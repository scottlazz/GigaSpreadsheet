{"mappings":"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","sources":["<anon>","packages/financial/YADATA.json","src/app.ts","src/giga/index.ts","src/sheet/components/bottomBar.ts","src/sheet/index.ts","packages/sparsegrid.js","packages/expressionparser.js","packages/financial/FinData.ts","packages/dependencytracker.js","src/sheet/windows/format/index.js","src/sheet/graphs/linechart.js","packages/financial/index.ts","packages/financial/ya.ts","src/sheet/utils.ts","src/sheet/shiftops.ts","src/sheet/templates.ts","src/sheet/components/contextmenu.ts"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire8661\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire8661\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"5Mp1b\", function(module, exports) {\nmodule.exports = JSON.parse(\"{\\\"options\\\":{\\\"syntax\\\":\\\"proto3\\\"},\\\"nested\\\":{\\\"yaticker\\\":{\\\"fields\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"id\\\":1},\\\"price\\\":{\\\"type\\\":\\\"float\\\",\\\"id\\\":2},\\\"time\\\":{\\\"type\\\":\\\"sint64\\\",\\\"id\\\":3},\\\"currency\\\":{\\\"type\\\":\\\"string\\\",\\\"id\\\":4},\\\"exchange\\\":{\\\"type\\\":\\\"string\\\",\\\"id\\\":5},\\\"quoteType\\\":{\\\"type\\\":\\\"QuoteType\\\",\\\"id\\\":6},\\\"marketHours\\\":{\\\"type\\\":\\\"MarketHoursType\\\",\\\"id\\\":7},\\\"changePercent\\\":{\\\"type\\\":\\\"float\\\",\\\"id\\\":8},\\\"dayVolume\\\":{\\\"type\\\":\\\"sint64\\\",\\\"id\\\":9},\\\"dayHigh\\\":{\\\"type\\\":\\\"float\\\",\\\"id\\\":10},\\\"dayLow\\\":{\\\"type\\\":\\\"float\\\",\\\"id\\\":11},\\\"change\\\":{\\\"type\\\":\\\"float\\\",\\\"id\\\":12},\\\"shortName\\\":{\\\"type\\\":\\\"string\\\",\\\"id\\\":13},\\\"expireDate\\\":{\\\"type\\\":\\\"sint64\\\",\\\"id\\\":14},\\\"openPrice\\\":{\\\"type\\\":\\\"float\\\",\\\"id\\\":15},\\\"previousClose\\\":{\\\"type\\\":\\\"float\\\",\\\"id\\\":16},\\\"strikePrice\\\":{\\\"type\\\":\\\"float\\\",\\\"id\\\":17},\\\"underlyingSymbol\\\":{\\\"type\\\":\\\"string\\\",\\\"id\\\":18},\\\"openInterest\\\":{\\\"type\\\":\\\"sint64\\\",\\\"id\\\":19},\\\"optionsType\\\":{\\\"type\\\":\\\"OptionType\\\",\\\"id\\\":20},\\\"miniOption\\\":{\\\"type\\\":\\\"sint64\\\",\\\"id\\\":21},\\\"lastSize\\\":{\\\"type\\\":\\\"sint64\\\",\\\"id\\\":22},\\\"bid\\\":{\\\"type\\\":\\\"float\\\",\\\"id\\\":23},\\\"bidSize\\\":{\\\"type\\\":\\\"sint64\\\",\\\"id\\\":24},\\\"ask\\\":{\\\"type\\\":\\\"float\\\",\\\"id\\\":25},\\\"askSize\\\":{\\\"type\\\":\\\"sint64\\\",\\\"id\\\":26},\\\"priceHint\\\":{\\\"type\\\":\\\"sint64\\\",\\\"id\\\":27},\\\"vol_24hr\\\":{\\\"type\\\":\\\"sint64\\\",\\\"id\\\":28},\\\"volAllCurrencies\\\":{\\\"type\\\":\\\"sint64\\\",\\\"id\\\":29},\\\"fromcurrency\\\":{\\\"type\\\":\\\"string\\\",\\\"id\\\":30},\\\"lastMarket\\\":{\\\"type\\\":\\\"string\\\",\\\"id\\\":31},\\\"circulatingSupply\\\":{\\\"type\\\":\\\"double\\\",\\\"id\\\":32},\\\"marketcap\\\":{\\\"type\\\":\\\"double\\\",\\\"id\\\":33}},\\\"nested\\\":{\\\"QuoteType\\\":{\\\"values\\\":{\\\"NONE\\\":0,\\\"ALTSYMBOL\\\":5,\\\"HEARTBEAT\\\":7,\\\"EQUITY\\\":8,\\\"INDEX\\\":9,\\\"MUTUALFUND\\\":11,\\\"MONEYMARKET\\\":12,\\\"OPTION\\\":13,\\\"CURRENCY\\\":14,\\\"WARRANT\\\":15,\\\"BOND\\\":17,\\\"FUTURE\\\":18,\\\"ETF\\\":20,\\\"COMMODITY\\\":23,\\\"ECNQUOTE\\\":28,\\\"CRYPTOCURRENCY\\\":41,\\\"INDICATOR\\\":42,\\\"INDUSTRY\\\":1000}},\\\"OptionType\\\":{\\\"values\\\":{\\\"CALL\\\":0,\\\"PUT\\\":1}},\\\"MarketHoursType\\\":{\\\"values\\\":{\\\"PRE_MARKET\\\":0,\\\"REGULAR_MARKET\\\":1,\\\"POST_MARKET\\\":2,\\\"EXTENDED_HOURS_MARKET\\\":3}}}}}}\");\n\n});\n\n// @ts-ignore\nclass $5740ee1f8f0a81d9$export$baad9f01dbfd9b39 {\n    constructor(){\n        this.container = document.createElement('div');\n        this.container.className = 'gigasheet-bottombar';\n        this.container.innerHTML = `\n            <div class=\"gigasheet-contextmenu\" style=\"width: 160px; display: none; left: 271px; bottom: 41px;\">\n                <div class=\"gigasheet-item\">Delete</div>\n            </div>\n            <ul class=\"gigasheet-menu\">\n                <li class=\"\">\n                    <div class=\"gigasheet-icon\">\n                        <div class=\"gigasheet-icon-img add\"></div>\n                    </div><span class=\"\">\n                        <div class=\"gigasheet-dropdown top-left\">\n                            <div class=\"gigasheet-dropdown-header\">\n                                <div class=\"gigasheet-icon\">\n                                    <div class=\"gigasheet-icon-img ellipsis\"></div>\n                                </div>\n                            </div>\n                            <div class=\"gigasheet-dropdown-content\" style=\"width: auto; display: none;\">\n                                <div class=\"gigasheet-item\" style=\"width: 150px; font-weight: normal;\">Sheet1</div>\n                            </div>\n                        </div>\n                    </span>\n                </li>\n            </ul>\n        `;\n        this.menu = this.container.querySelector('.gigasheet-menu');\n        this.active = 1;\n        this.tabCbs = [];\n        this.addListeners();\n    }\n    addListeners() {\n        this.menu.addEventListener('click', (e)=>{\n            if (e.target.hasAttribute('data-tabid')) {\n                if (e.target.getAttribute('data-tabid') === String(this.active)) return;\n                this.setActive(e.target.getAttribute('data-tabid'));\n            }\n        });\n    }\n    setActive(id) {\n        const el = this.container.querySelector(`[data-tabid='${id}']`);\n        if (!el) return;\n        this.removeActive();\n        this.active = id;\n        el.classList.add('active');\n        this.emit(id);\n    }\n    emit(value) {\n        this.tabCbs.forEach((fn)=>{\n            fn(value);\n        });\n    }\n    onTabClicked(fn) {\n        this.tabCbs.push(fn);\n    }\n    removeActive() {\n        const tabContainer = this.container.querySelector('.gigasheet-menu');\n        for (let tab of tabContainer.children)tab.classList.remove('active');\n    }\n    addTab(name, id) {\n        const container = this.container;\n        this.active = id;\n        const tabContainer = container.querySelector('.gigasheet-menu');\n        this.removeActive();\n        if (tabContainer.lastElementChild) tabContainer.lastElementChild.insertAdjacentHTML('afterend', `<li data-tabid=\"${id}\" class=\"active\">Sheet${id}</div>`);\n        else tabContainer.innerHTML = '<li data-tabid=\"1\" class=\"active gigasheet-bottom-tab\">Sheet1</li>';\n    }\n}\n\n\n// @ts-ignore\nfunction $9da0d049db75c76f$var$createUuid() {\n    let _id = 1;\n    return function() {\n        return _id++;\n    };\n}\nconst $9da0d049db75c76f$var$uuid = $9da0d049db75c76f$var$createUuid();\nclass $9da0d049db75c76f$export$2e2bcd8739ae039 {\n    constructor(){\n        this._data = []; // {row: {col: value}}\n        this._colCounts = []; // {col: count}\n        this._topRow = Infinity;\n        this._bottomRow = -Infinity;\n        this._leftCol = Infinity;\n        this._rightCol = -Infinity;\n        this._totalValues = 0;\n        this._totalRows = 0; // Track distinct rows with data\n        this._totalCols = 0; // Track distinct columns with data\n        this._valueCount = 0;\n    }\n    save() {\n        const state = {\n            // Store data as arrays for compactness\n            d: Object.keys(this._data).map((row)=>[\n                    Number(row),\n                    Object.keys(this._data[row]).map((col)=>[\n                            col === 'count' ? col : Number(col),\n                            this._data[row][col]\n                        ])\n                ]),\n            // Store counts as arrays for compactness\n            cc: Object.entries(this._colCounts).map(([col, count])=>[\n                    Number(col),\n                    count\n                ]),\n            // Store boundaries\n            tr: this._topRow,\n            br: this._bottomRow,\n            lc: this._leftCol,\n            rc: this._rightCol,\n            // Store totals\n            tv: this._totalValues,\n            trow: this._totalRows,\n            tcol: this._totalCols\n        };\n        return JSON.stringify(state);\n    }\n    restore(json) {\n        const state = JSON.parse(json);\n        // Clear current state\n        this.clear();\n        // Rebuild data structure\n        state.d.forEach(([row, cols])=>{\n            this._data[row] = [];\n            cols.forEach(([col, value])=>{\n                this._data[row][col] = value;\n            });\n        });\n        state.cc.forEach(([col, count])=>{\n            this._colCounts[col] = count;\n        });\n        // Restore boundaries and totals\n        this._topRow = state.tr;\n        this._bottomRow = state.br;\n        this._leftCol = state.lc;\n        this._rightCol = state.rc;\n        this._totalValues = state.tv;\n        this._totalRows = state.trow;\n        this._totalCols = state.tcol;\n        return this;\n    }\n    // Set a value at a specific row and column\n    setCellProperty(row, col, property, value) {\n        const cell = this.get(row, col);\n        if (!cell._id) cell._id = $9da0d049db75c76f$var$uuid();\n        cell[property] = value;\n        this.set(row, col, cell);\n    }\n    setRowSize(row, size) {\n        if (!this._data[row]) return;\n        this._data[row].size = size;\n    }\n    incrementRowSize(row) {\n        if (!this._data[row]) return;\n        this._data[row].size++;\n    }\n    decrementRowSize(row) {\n        if (!this._data[row]) return;\n        this._data[row].size--;\n    }\n    set(row, col, value) {\n        if (!Number.isInteger(row) || !Number.isInteger(col)) throw new Error('Coordinates must be integers');\n        const isNewRow = !this._data[row];\n        const isNewCell = isNewRow || !Object.hasOwn(this._data[row], col);\n        const isNewCol = isNewCell && !this._colCounts[col];\n        if (isNewRow) {\n            this._data[row] = [];\n            this.setRowSize(row, 0);\n            this._totalRows++;\n            // Update row boundaries\n            if (row < this._topRow) this._topRow = row;\n            if (row > this._bottomRow) this._bottomRow = row;\n        }\n        if (isNewCell) {\n            this.incrementRowSize(row);\n            this._totalValues++;\n            if (isNewCol) {\n                this._colCounts[col] = 0;\n                this._totalCols++;\n            }\n            this._colCounts[col]++;\n            // Update column boundaries\n            if (col < this._leftCol) this._leftCol = col;\n            if (col > this._rightCol) this._rightCol = col;\n        }\n        this._data[row][col] = value;\n        if (!value._id) value._id = $9da0d049db75c76f$var$uuid();\n        return isNewCell;\n    }\n    decrementColSize(col) {\n        this._colCounts[col]--;\n        if (this._colCounts[col] <= 0) delete this._colCounts[col];\n    }\n    incrementColSize(col) {\n        if (!this._colCounts[col]) this._colCounts[col] = 0;\n        this._colCounts[col]++;\n    }\n    deleteRow(row) {\n        const rowObj = this._data[row];\n        if (rowObj) {\n            for(let col in rowObj)this.decrementColSize(col);\n            this._totalRows--;\n        }\n        this._data.splice(row, 1);\n        this._recalculateBoundaries();\n        return rowObj;\n    }\n    addRow(row, data = []) {\n        data = data || [];\n        for(let col in data)this.incrementColSize(col);\n        if (data.length > 0) this._totalRows++;\n        this._data.splice(row, 0, data);\n        this._recalculateBoundaries();\n        return null;\n    }\n    addCol(col, data = []) {\n        data = data || [];\n        for(let row in this._data){\n            if (row === 'count') continue;\n            this._data[row].splice(col, 0, undefined);\n            delete this._data[row][col];\n            if (row in data) {\n                this._data[row][col] = data[row];\n                this.incrementRowSize(row);\n            }\n        }\n        if (data.length > 0) this._totalCols++;\n        this._recalculateBoundaries();\n        return null;\n    }\n    getCol(col) {\n        const colData = [];\n        for(let row in this._data){\n            if (row === 'count') continue;\n            if (col in this._data[row]) colData[row] = this._data[row][col];\n        }\n        return colData;\n    }\n    deleteCol(col) {\n        const colData = this.getCol(col);\n        const colCount = this._colCounts[col];\n        colData.size = colCount;\n        if (this._colCounts[col]) this._totalCols--;\n        for(let row in this._data){\n            if (row === 'count') continue;\n            if (this.has(row, col)) this.decrementColSize(col);\n            this._data[row].splice(col, 1);\n        }\n        this._colCounts.splice(col, 1); // shift colcounts\n        this._recalculateBoundaries();\n        return colData;\n    }\n    delete(row, col) {\n        if (!this.has(row, col)) return false;\n        delete this._data[row][col];\n        this.decrementRowSize(row);\n        this._colCounts[col]--;\n        this._totalValues--;\n        // Check if row became empty\n        if (this._data[row].size === 0) {\n            delete this._data[row];\n            this._totalRows--;\n        }\n        // Check if column became empty\n        if (this._colCounts[col] === 0) {\n            delete this._colCounts[col];\n            this._totalCols--;\n        }\n        let boundariesChanged = false;\n        if (row === this._topRow || row === this._bottomRow) boundariesChanged = true;\n        if (col === this._leftCol || col === this._rightCol) boundariesChanged = true;\n        if (boundariesChanged) this._recalculateBoundaries();\n        return true;\n    }\n    _recalculateBoundaries() {\n        if (this.totalRows === 0) {\n            this._topRow = Infinity;\n            this._bottomRow = -Infinity;\n            this._leftCol = Infinity;\n            this._rightCol = -Infinity;\n            return;\n        }\n        let minRow = Infinity;\n        let maxRow = -Infinity;\n        let minCol = Infinity;\n        let maxCol = -Infinity;\n        for(let row in this._data){\n            row = parseInt(row);\n            if (row < minRow) minRow = row;\n            if (row > maxRow) maxRow = row;\n            for(let col in this._data[row]){\n                col = parseInt(col);\n                if (col < minCol) minCol = col;\n                if (col > maxCol) maxCol = col;\n            }\n        }\n        this._topRow = minRow;\n        this._bottomRow = maxRow;\n        this._leftCol = minCol;\n        this._rightCol = maxCol;\n    }\n    get(row, col) {\n        if (!this._data[row] || !Object.hasOwn(this._data[row], col)) return {\n            row: row,\n            col: col\n        };\n        return this._data[row][col];\n    }\n    has(row, col = null) {\n        if (col == null) return Object.hasOwn(this._data, row);\n        return Object.hasOwn(this._data, row) && Object.hasOwn(this._data[row], col);\n    }\n    deleteCells(coordinates) {\n        let deletedCount = 0;\n        let boundaryChanged = false;\n        const affectedRows = {};\n        // First pass: perform deletions\n        for (const [row, col] of coordinates){\n            if (!Number.isInteger(row) || !Number.isInteger(col)) continue;\n            if (this.has(row, col)) {\n                delete this._data[row][col];\n                this.decrementRowSize(row);\n                this._colCounts[col]--;\n                deletedCount++;\n                affectedRows[row] = true;\n                if (col === this._leftCol || col === this._rightCol) boundaryChanged = true;\n            }\n        }\n        // Second pass: clean empty rows\n        for(const row in affectedRows)if (this._data[row].size === 0) {\n            delete this._data[row];\n            const numRow = Number(row);\n            if (numRow === this._topRow || numRow === this._bottomRow) boundaryChanged = true;\n        }\n        this._totalValues -= deletedCount;\n        if (boundaryChanged) this._recalculateBoundaries();\n        return deletedCount;\n    }\n    // Get count of cells in a specific row\n    getRowCount(row) {\n        return this._data[row].size || 0;\n    }\n    // Get all non-empty rows with their counts\n    getRowCounts() {\n        return Object.fromEntries(Object.entries(this._data).map(([row, data])=>[\n                Number(row),\n                data.size\n            ]));\n    }\n    deleteCellsArea(startRow, startCol, endRow, endCol) {\n        const [minRow, maxRow] = [\n            Math.min(startRow, endRow),\n            Math.max(startRow, endRow)\n        ];\n        const [minCol, maxCol] = [\n            Math.min(startCol, endCol),\n            Math.max(startCol, endCol)\n        ];\n        let deletedCount = 0;\n        let boundariesChanged = false;\n        // We need to collect rows first to avoid modifying while iterating\n        const rowsToProcess = [];\n        for(const row in this._rows)if (row >= minRow && row <= maxRow) rowsToProcess.push(row);\n        for (const row of rowsToProcess){\n            const rowArr = this._rows[row];\n            // Collect columns to delete\n            const colsToDelete = [];\n            for(const col in rowArr)if (col >= minCol && col <= maxCol) colsToDelete.push(col);\n            // Delete the collected columns\n            for (const col of colsToDelete){\n                delete rowArr[col];\n                this.decrementRowSize(row);\n                this._colCounts[col]--;\n                deletedCount++;\n                if (col == this._leftCol || col == this._rightCol) boundariesChanged = true;\n            }\n            // Clean empty rows\n            if (this._data[row].size === 0) {\n                delete this._data[row];\n                this._totalRows--;\n                boundariesChanged = true;\n            }\n        }\n        this._valueCount -= deletedCount;\n        if (boundariesChanged) this._recalculateBoundaries();\n        return deletedCount;\n    }\n    getCells(startRow, startCol, endRow, endCol) {\n        const cells = [];\n        const [minRow, maxRow] = [\n            Math.min(startRow, endRow),\n            Math.max(startRow, endRow)\n        ];\n        const [minCol, maxCol] = [\n            Math.min(startCol, endCol),\n            Math.max(startCol, endCol)\n        ];\n        // Get and sort rows in range\n        const rows = Object.keys(this._data).map(Number).filter((row)=>row >= minRow && row <= maxRow);\n        for (const row of rows){\n            // Get and sort columns in range\n            const cols = Object.keys(this._data[row]).map(Number).filter((col)=>col >= minCol && col <= maxCol);\n            for (const col of cols)cells.push({\n                row: row,\n                col: col,\n                value: this._data[row][col]\n            });\n        }\n        return cells;\n    }\n    getCellsForce(startRow, startCol, endRow, endCol) {\n        const cells = [];\n        for(let row = startRow; row <= endRow; row++)for(let col = startCol; col <= endCol; col++)cells.push({\n            row: row,\n            col: col\n        });\n        return cells;\n    }\n    // Accessors\n    get topRow() {\n        return this._topRow === Infinity ? null : this._topRow;\n    }\n    get bottomRow() {\n        return this._bottomRow === -Infinity ? null : this._bottomRow;\n    }\n    get leftCol() {\n        return this._leftCol === Infinity ? null : this._leftCol;\n    }\n    get rightCol() {\n        return this._rightCol === -Infinity ? null : this._rightCol;\n    }\n    get totalRows() {\n        return this._totalRows;\n    }\n    get totalColumns() {\n        return this._totalCols;\n    }\n    get totalValues() {\n        return this._totalValues;\n    }\n    get rowCount() {\n        return this._topRow !== Infinity && this._bottomRow !== -Infinity ? this._bottomRow - this._topRow + 1 : 0;\n    }\n    get colCount() {\n        return this._leftCol !== Infinity && this._rightCol !== -Infinity ? this._rightCol - this._leftCol + 1 : 0;\n    }\n    get valueCount() {\n        return this._valueCount;\n    }\n    get allDimensions() {\n        return {\n            topRow: this.topRow,\n            bottomRow: this.bottomRow,\n            leftCol: this.leftCol,\n            rightCol: this.rightCol,\n            rowCount: this.rowCount,\n            colCount: this.colCount,\n            totalValues: this.totalValues\n        };\n    }\n    clear() {\n        this._data = [];\n        this._topRow = Infinity;\n        this._bottomRow = -Infinity;\n        this._leftCol = Infinity;\n        this._rightCol = -Infinity;\n        this._valueCount = 0;\n    }\n    forEach(callback) {\n        let counter = 0;\n        for(let row in this._data){\n            if (row === 'count') continue;\n            for(let col in this._data[row])callback(this._data[row][col], row, col, counter++);\n        }\n    }\n}\n\n\nclass $5055501275aadc06$export$2e2bcd8739ae039 {\n    constructor(){\n        if ($5055501275aadc06$export$2e2bcd8739ae039._instance) return $5055501275aadc06$export$2e2bcd8739ae039._instance;\n        $5055501275aadc06$export$2e2bcd8739ae039._instance = this;\n        this._data = {};\n    }\n    store(namespace, key, value) {\n        if (!this._data[namespace]) this._data[namespace] = {};\n        this._data[namespace][key] = value;\n    }\n    get(namespace, key) {\n        if (!this._data[namespace]) return null;\n        if (!Object.hasOwn(this._data[namespace], key)) return null;\n        return this._data[namespace][key];\n    }\n}\n\n\nconst $c8587485a8b03077$export$a4bd3681e1db52ef = {};\nconst $c8587485a8b03077$export$19212157ca66f33d = {};\nconst $c8587485a8b03077$export$f93e88ee62922d93 = {};\nfunction $c8587485a8b03077$var$isEmpty(obj) {\n    for(let i in obj){\n        if (Object.hasOwn(obj, i)) return false;\n    }\n    return true;\n}\nfunction $c8587485a8b03077$export$95ca57ccd6c8bd78(pivotRow) {\n    const cellsToUpdate = [];\n    function helper(tree, depth = 0, didShift = false) {\n        const newDeps = {};\n        if (depth === 2) for(let row in tree){\n            let tmp = tree[row];\n            if (row > pivotRow) {\n                newDeps[parseInt(row) - 1] = tree[row];\n                delete tree[row];\n            }\n            if (didShift) for(let col in tmp)cellsToUpdate.push([\n                row,\n                col\n            ]);\n        }\n        else if (depth === 0) for(let row in tree){\n            if (row == pivotRow) {\n                helper(tree[row], 1, true);\n                delete tree[row];\n            } else if (row > pivotRow) {\n                newDeps[parseInt(row) - 1] = helper(tree[row], 1, true);\n                delete tree[row];\n            } else helper(tree[row], 1);\n        }\n        else if (depth === 1) for(let col in tree)helper(tree[col], 2, didShift);\n        for(let rowOrCol in newDeps)tree[rowOrCol] = newDeps[rowOrCol];\n        return tree;\n    }\n    helper($c8587485a8b03077$export$a4bd3681e1db52ef);\n    return cellsToUpdate;\n}\nfunction $c8587485a8b03077$export$cf80109cc26f790(pivotRow) {\n    const cellsToUpdate = [];\n    function helper(tree, depth = 0, didShift = false) {\n        const newDeps = {};\n        if (depth === 2) for(let row in tree){\n            let tmp = tree[row];\n            if (row >= pivotRow) {\n                newDeps[parseInt(row) + 1] = tree[row];\n                delete tree[row];\n            }\n            if (didShift) for(let col in tmp)cellsToUpdate.push([\n                row,\n                col\n            ]);\n        }\n        else if (depth === 0) {\n            for(let row in tree)if (row >= pivotRow) {\n                newDeps[parseInt(row) + 1] = helper(tree[row], 1, true);\n                delete tree[row];\n            } else helper(tree[row], 1);\n        } else if (depth === 1) for(let col in tree)helper(tree[col], 2, didShift);\n        for(let rowOrCol in newDeps)tree[rowOrCol] = newDeps[rowOrCol];\n        return tree;\n    }\n    helper($c8587485a8b03077$export$a4bd3681e1db52ef);\n    return cellsToUpdate;\n}\nfunction $c8587485a8b03077$export$fe244e29ae22944f(pivotCol) {\n    const cellsToUpdate = [];\n    function helper(tree, depth = 0, didshift, _row) {\n        const newDeps = {};\n        if (depth === 0 || depth === 2) for(let row in tree)helper(tree[row], depth + 1, didshift, row);\n        else if (depth === 1) {\n            for(let col in tree)if (col >= pivotCol) {\n                newDeps[parseInt(col) + 1] = helper(tree[col], 2, true, null);\n                delete tree[col];\n            } else helper(tree[col], 2);\n        } else if (depth === 3) for(let col in tree){\n            if (col >= pivotCol) {\n                newDeps[parseInt(col) + 1] = true;\n                delete tree[col];\n            }\n            if (didshift) cellsToUpdate.push([\n                _row,\n                col\n            ]);\n        }\n        for(let rowOrCol in newDeps)tree[rowOrCol] = newDeps[rowOrCol];\n        return tree;\n    }\n    helper($c8587485a8b03077$export$a4bd3681e1db52ef);\n    return cellsToUpdate;\n}\nfunction $c8587485a8b03077$export$abf4e674d580d2bd(pivotCol) {\n    const cellsToUpdate = [];\n    function helper(tree, depth = 0, didshift, _row) {\n        const newDeps = {};\n        if (depth === 0 || depth === 2) for(let row in tree)helper(tree[row], depth + 1, didshift, row);\n        else if (depth === 1) for(let col in tree){\n            if (col == pivotCol) {\n                helper(tree[col], 2, true);\n                delete tree[col];\n            } else if (col >= pivotCol) {\n                newDeps[parseInt(col) - 1] = helper(tree[col], 2, true, null);\n                delete tree[col];\n            } else helper(tree[col], 2);\n        }\n        else if (depth === 3) for(let col in tree){\n            if (col >= pivotCol) {\n                newDeps[parseInt(col) - 1] = true;\n                delete tree[col];\n            }\n            if (didshift) cellsToUpdate.push([\n                _row,\n                col\n            ]);\n        }\n        for(let rowOrCol in newDeps)tree[rowOrCol] = newDeps[rowOrCol];\n        return tree;\n    }\n    helper($c8587485a8b03077$export$a4bd3681e1db52ef);\n    return cellsToUpdate;\n}\nfunction $c8587485a8b03077$export$b59bcc595b241b53(deptRow, deptCol) {\n    const dependencies = $c8587485a8b03077$export$75915f81f2a6540a(deptRow, deptCol);\n    for (const [drow, dcol] of dependencies){\n        const dcell = $c8587485a8b03077$export$a4bd3681e1db52ef[drow]?.[dcol];\n        if (!dcell) continue;\n        if (dcell[deptRow]?.[deptCol]) {\n            delete dcell[deptRow][deptCol];\n            if ($c8587485a8b03077$var$isEmpty(dcell[deptRow])) delete dcell[deptRow];\n        }\n    }\n    $c8587485a8b03077$export$d453174b3a624665(deptRow, deptCol);\n}\nfunction $c8587485a8b03077$export$75915f81f2a6540a(row, col) {\n    const deps = [];\n    const t = $c8587485a8b03077$export$19212157ca66f33d;\n    const cell = t[row]?.[col];\n    if (!cell) return [];\n    for(let drow in cell)for(let dcol in cell[drow])deps.push([\n        drow,\n        dcol\n    ]);\n    return deps;\n}\nfunction $c8587485a8b03077$export$d453174b3a624665(row, col) {\n    const t = $c8587485a8b03077$export$19212157ca66f33d;\n    if (!t[row]?.[col]) return;\n    delete t[row][col];\n    if ($c8587485a8b03077$var$isEmpty(t[row])) delete t[row];\n}\n\n\nclass $5aadb708f388d983$export$2e2bcd8739ae039 {\n    constructor(data){\n        this.data = data; // Spreadsheet data\n        this.finData = new (0, $5055501275aadc06$export$2e2bcd8739ae039)();\n    }\n    // Add a dependency relationship\n    addDependency(source, target) {\n        const sr = source[0], sc = source[1];\n        const tr = target[0], tc = target[1];\n        if (!(0, $c8587485a8b03077$export$a4bd3681e1db52ef)[tr]) (0, $c8587485a8b03077$export$a4bd3681e1db52ef)[tr] = {};\n        if (!(0, $c8587485a8b03077$export$a4bd3681e1db52ef)[tr][tc]) (0, $c8587485a8b03077$export$a4bd3681e1db52ef)[tr][tc] = {};\n        if (!(0, $c8587485a8b03077$export$a4bd3681e1db52ef)[tr][tc][sr]) (0, $c8587485a8b03077$export$a4bd3681e1db52ef)[tr][tc][sr] = {};\n        (0, $c8587485a8b03077$export$a4bd3681e1db52ef)[tr][tc][sr][sc] = true;\n        if (!(0, $c8587485a8b03077$export$19212157ca66f33d)[sr]) (0, $c8587485a8b03077$export$19212157ca66f33d)[sr] = {};\n        if (!(0, $c8587485a8b03077$export$19212157ca66f33d)[sr][sc]) (0, $c8587485a8b03077$export$19212157ca66f33d)[sr][sc] = {};\n        if (!(0, $c8587485a8b03077$export$19212157ca66f33d)[sr][sc][tr]) (0, $c8587485a8b03077$export$19212157ca66f33d)[sr][sc][tr] = {};\n        (0, $c8587485a8b03077$export$19212157ca66f33d)[sr][sc][tr][tc] = true;\n    }\n    // Tokenize the input expression\n    tokenize(expression) {\n        // Remove leading '=' if present\n        if (expression.startsWith('=')) expression = expression.slice(1);\n        const tokens = [];\n        const regex = /\\s*(=>|[-+*/^()]|[A-Za-z_]\\w*|\\d*\\.?\\d+|\\S)\\s*/g;\n        let match;\n        while((match = regex.exec(expression)) !== null)tokens.push(match[1]);\n        return tokens;\n    }\n    static tokenizeWithIndex(expression) {\n        // Remove leading '=' if present\n        if (expression.startsWith('=')) expression = expression.slice(1);\n        const tokens = [];\n        const regex = /\\s*(=>|[-+*/^()]|[A-Za-z_]\\w*|\\d*\\.?\\d+|\\S)\\s*/dg;\n        let match;\n        while((match = regex.exec(expression)) !== null)tokens.push([\n            match[1],\n            match.indices[1]\n        ]);\n        return tokens;\n    }\n    // Parse the tokens into an AST\n    parse(tokens) {\n        let index = 0;\n        const parseExpression = ()=>{\n            let left = parseTerm();\n            while(index < tokens.length && (tokens[index] === '+' || tokens[index] === '-')){\n                const operator = tokens[index];\n                index++;\n                const right = parseTerm();\n                left = {\n                    type: 'BinaryExpression',\n                    operator: operator,\n                    left: left,\n                    right: right\n                };\n            }\n            return left;\n        };\n        const parseTerm = ()=>{\n            let left = parseFactor();\n            while(index < tokens.length && (tokens[index] === '*' || tokens[index] === '/')){\n                const operator = tokens[index];\n                index++;\n                const right = parseFactor();\n                left = {\n                    type: 'BinaryExpression',\n                    operator: operator,\n                    left: left,\n                    right: right\n                };\n            }\n            return left;\n        };\n        const parseFactor = ()=>{\n            if (tokens[index] === '(') {\n                index++;\n                const expr = parseExpression();\n                if (tokens[index] !== ')') throw new Error('Expected closing parenthesis');\n                index++;\n                return expr;\n            } else if (/^\\d+$/.test(tokens[index])) return {\n                type: 'Number',\n                value: parseFloat(tokens[index++])\n            };\n            else if (tokens[index] === ':') return {\n                type: 'RangeReference',\n                value: tokens[index++]\n            };\n            else if (/^[A-Za-z]+\\d+$/.test(tokens[index])) {\n                if (tokens[index + 1] === ':') return {\n                    type: 'RangeReference',\n                    value: `${tokens[index++]}${tokens[index++]}${tokens[index++]}`\n                };\n                return {\n                    type: 'CellReference',\n                    value: tokens[index++]\n                };\n            } else if (/^[A-Za-z_]\\w*$/.test(tokens[index])) return {\n                type: 'Function',\n                name: tokens[index++],\n                args: parseArguments()\n            };\n            else throw new Error(`Unexpected token: ${tokens[index]}`);\n        };\n        const parseArguments = ()=>{\n            const args = [];\n            if (tokens[index] === '(') {\n                index++;\n                while(tokens[index] !== ')'){\n                    args.push(parseExpression());\n                    if (tokens[index] === ',') index++;\n                }\n                index++;\n            }\n            return args;\n        };\n        return parseExpression();\n    }\n    // Evaluate the AST\n    evaluate(ast, source) {\n        // if (source) {\n        //     // Remove old dependencies before evaluating\n        //     this.removeDependencies(source);\n        // }\n        switch(ast.type){\n            case 'Number':\n                return ast.value;\n            case 'CellReference':\n                if (source) {\n                    const { row: row, col: col } = this.parseCellReference(ast.value);\n                    this.addDependency(source, [\n                        row,\n                        col\n                    ]);\n                }\n                return this.getCellValue(ast.value);\n            case 'RangeReference':\n                if (source) {\n                    const [startCell, endCell] = ast.value.split(':');\n                    const start = this.parseCellReference(startCell);\n                    const end = this.parseCellReference(endCell);\n                    for(let row = start.row; row <= end.row; row++)for(let col = start.col; col <= end.col; col++)this.addDependency(source, [\n                        row,\n                        col\n                    ]);\n                }\n                return this.getRangeValues(ast.value);\n            case 'BinaryExpression':\n                return this.evaluateBinaryExpression(ast, source);\n            case 'Function':\n                return this.evaluateFunction(ast, source);\n            default:\n                throw new Error(`Unknown AST node type: ${ast.type}`);\n        }\n    }\n    // Evaluate binary expressions (e.g., +, -, *, /, ^)\n    evaluateBinaryExpression(ast, source) {\n        const left = this.evaluate(ast.left, source);\n        const right = this.evaluate(ast.right, source);\n        switch(ast.operator){\n            case '+':\n                return left + right;\n            case '-':\n                return left - right;\n            case '*':\n                return left * right;\n            case '/':\n                return left / right;\n            case '^':\n                return Math.pow(left, right);\n            default:\n                throw new Error(`Unknown operator: ${ast.operator}`);\n        }\n    }\n    // Evaluate functions (e.g., SUM, AVERAGE)\n    evaluateFunction(ast, source) {\n        const args = ast.args.map((arg)=>this.evaluate(arg));\n        switch(ast.name.toUpperCase()){\n            case 'SUM':\n                return args.flat().reduce((sum, val)=>sum + val, 0);\n            case 'AVERAGE':\n                const values = args.flat();\n                return values.reduce((sum, val)=>sum + val, 0) / values.length;\n            case 'ERROR':\n                return 'ERROR';\n            case 'REFERROR':\n                return 'REFERROR';\n            default:\n                // tickerReg[source[0]]\n                console.log('subbing', ast.name);\n                if (!(0, $c8587485a8b03077$export$f93e88ee62922d93)[ast.name]) (0, $c8587485a8b03077$export$f93e88ee62922d93)[ast.name] = {};\n                (0, $c8587485a8b03077$export$f93e88ee62922d93)[ast.name][`${source[0]},${source[1]}`] = true;\n                if (this.finData.get('YA', ast.name)) return this.finData.get('YA', ast.name).price;\n                else return '';\n        }\n    }\n    getCellText(row, col) {\n        return this.data.get(row, col)?.text ?? '';\n    }\n    // Get the value of a cell reference (e.g., A1, B2)\n    getCellValue(cellRef) {\n        const { row: row, col: col } = this.parseCellReference(cellRef);\n        if (row < 0 || row > this.bottomRow || col < 0 || col > this.data.rightCol) return '';\n        const value = this.getCellText(row, col);\n        // If the cell value is a formula (starts with '='), evaluate it recursively\n        if (typeof value === 'string' && value.startsWith('=')) return this.evaluateExpression(value, [\n            row,\n            col\n        ]);\n        // Otherwise, treat it as a literal value\n        return typeof value === 'number' ? value : parseFloat(value) || 0;\n    }\n    // Get the values of a range reference (e.g., A1:B2)\n    getRangeValues(rangeRef) {\n        const [startCell, endCell] = rangeRef.split(':');\n        const start = this.parseCellReference(startCell);\n        const end = this.parseCellReference(endCell);\n        const values = [];\n        for(let row = start.row; row <= end.row; row++)for(let col = start.col; col <= end.col; col++){\n            if (row < 0 || row >= this.data.bottomRow || col < 0 || col >= this.rightCol) throw new Error(`Invalid cell in range: ${rangeRef}`);\n            const value = this.getCellText(row, col);\n            // If the cell value is a formula (starts with '='), evaluate it recursively\n            if (typeof value === 'string' && value.startsWith('=')) values.push(this.evaluateExpression(value, [\n                row,\n                col\n            ]));\n            else values.push(typeof value === 'number' ? value : parseFloat(value) || 0);\n        }\n        return values;\n    }\n    // Parse a cell reference (e.g., A1 => { row: 0, col: 0 })\n    parseCellReference(cellRef) {\n        const colLetter = cellRef.match(/[A-Za-z]+/)?.[0];\n        const rowNumber = cellRef.match(/\\d+/)?.[0];\n        if (!colLetter || !rowNumber) throw new Error(`Invalid cell reference: ${cellRef}`);\n        const col = colLetter.split('').reduce((acc, char)=>acc * 26 + (char.toUpperCase().charCodeAt(0) - 64), 0) - 1;\n        const row = parseInt(rowNumber, 10) - 1;\n        return {\n            row: row,\n            col: col\n        };\n    }\n    static parseCellReference(cellRef) {\n        const colLetter = cellRef.match(/[A-Za-z]+/)?.[0];\n        const rowNumber = cellRef.match(/\\d+/)?.[0];\n        if (!colLetter || !rowNumber) throw new Error(`Invalid cell reference: ${cellRef}`);\n        const col = colLetter.split('').reduce((acc, char)=>acc * 26 + (char.toUpperCase().charCodeAt(0) - 64), 0) - 1;\n        const row = parseInt(rowNumber, 10) - 1;\n        return {\n            row: row,\n            col: col\n        };\n    }\n    getAst(expression) {\n        if (expression.startsWith('=')) {\n            const tokens = this.tokenize(expression);\n            return this.parse(tokens);\n        }\n        return null;\n    }\n    // Main function to parse and evaluate an expression\n    evaluateExpression(expression, source) {\n        if (typeof expression !== 'string') return expression; // Return non-string values as-is\n        // If the expression starts with '=', parse and evaluate it\n        if (expression.startsWith('=')) {\n            const tokens = this.tokenize(expression);\n            const ast = this.parse(tokens);\n            return this.evaluate(ast, source);\n        }\n        // If the expression does not start with '=', treat it as a literal value\n        return parseFloat(expression) || expression;\n    }\n}\n\n\nfunction $f1a08cb39f53ec5a$export$ca03e75f2d79dc0e() {\n    const formatWindow = window.open('', 'target=_blank', 'width=190,height=400');\n    formatWindow.document.body.innerHTML = `\n        <style>\n            .format-menu {\n                font-family: Arial, sans-serif;\n                width: 220px;\n                padding: 12px;\n                background: #f8f8f8;\n                border: 1px solid #999999;\n                border-radius: 4px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n            }\n            .menu-section {\n                margin-bottom: 12px;\n            }\n            .menu-title {\n                font-weight: bold;\n                margin-bottom: 6px;\n                color: #555;\n                font-size: 13px;\n            }\n            select, input {\n                width: 100%;\n                padding: 6px;\n                border: 1px solid #ccc;\n                border-radius: 3px;\n                margin-bottom: 8px;\n            }\n            .color-options {\n                display: flex;\n                gap: 4px;\n                margin-top: 6px;\n            }\n            .color-option {\n                width: 20px;\n                height: 20px;\n                border-radius: 3px;\n                cursor: pointer;\n                border: 1px solid #999999;\n            }\n            .format-btn {\n                flex: 1;\n                padding: 6px;\n                background: white;\n                border: 1px solid #ccc;\n                border-radius: 3px;\n                cursor: pointer;\n                text-align: center;\n                font-size: 12px;\n            }\n            .format-btn:hover {\n                background: #f0f0f0;\n            }\n            .format-btn.active {\n                background: #999999;\n                border-color: #999;\n            }\n            .color-option:hover {\n                border-color: #999;\n            }\n            .alignment-options,.border-options {\n                display: flex;\n                gap: 4px;\n            }\n            .alignment-btn,.border-btn {\n                flex: 1;\n                padding: 6px;\n                background: white;\n                border: 1px solid #ccc;\n                border-radius: 3px;\n                cursor: pointer;\n                text-align: center;\n            }\n            .alignment-btn:hover,.border-btn:hover {\n                background: #f0f0f0;\n            }\n            .alignment-btn.active,.border-btn.active {\n                background: #999999;\n                border-color: #999;\n            }\n            .baseline-visual {\n                display: inline-block;\n                width: 100%;\n                height: 40px;\n                position: relative;\n                margin-top: 8px;\n                border: 1px solid #eee;\n                background: repeating-linear-gradient(\n                    to bottom,\n                    #f8f8f8,\n                    #f8f8f8 1px,\n                    #fff 1px,\n                    #fff 10px\n                );\n            }\n            .baseline-line {\n                position: absolute;\n                left: 0;\n                right: 0;\n                height: 1px;\n                background-color: red;\n            }\n            .baseline-text {\n                position: absolute;\n                left: 50%;\n                transform: translateX(-50%);\n                white-space: nowrap;\n            }\n        </style>\n        <div class=\"format-menu\">\n            <div class=\"menu-section\">\n                <div class=\"menu-title\">Cell Type</div>\n                <select id=\"cellType\">\n                    <option value=\"text\" selected>Text</option>\n                    <option value=\"button\">Button</option>\n                    <option value=\"linechart\">Line Chart</option>\n                </select>\n            </div>\n            <div class=\"menu-section\">\n                <div class=\"menu-title\">Font Size</div>\n                <select id=\"fontSize\">\n                    <option value=\"8\">8</option>\n                    <option value=\"10\" selected>10</option>\n                    <option value=\"12\">12</option>\n                    <option value=\"14\">14</option>\n                    <option value=\"16\">16</option>\n                    <option value=\"18\">18</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"24\">24</option>\n                </select>\n            </div>\n            <div class=\"menu-section\">\n                <div class=\"menu-title\">Font Color</div>\n                <input type=\"color\" id=\"fontColor\" value=\"#000000\">\n                <div class=\"color-options\">\n                    <div class=\"color-option\" style=\"background: #000000;\" data-color=\"#000000\"></div>\n                    <div class=\"color-option\" style=\"background: #ff0000;\" data-color=\"#ff0000\"></div>\n                    <div class=\"color-option\" style=\"background: #00aa00;\" data-color=\"#00aa00\"></div>\n                    <div class=\"color-option\" style=\"background: #0000ff;\" data-color=\"#0000ff\"></div>\n                    <div class=\"color-option\" style=\"background: #ff9900;\" data-color=\"#ff9900\"></div>\n                </div>\n            </div>\n            <div class=\"menu-section\">\n                <div class=\"menu-title\">Text Alignment</div>\n                <div class=\"alignment-options\">\n                    <div class=\"alignment-btn\" data-align=\"left\" title=\"Align Left\">\\u{23A1}</div>\n                    <div class=\"alignment-btn\" data-align=\"center\" title=\"Align Center\">\\u{23A2}</div>\n                    <div class=\"alignment-btn\" data-align=\"right\" title=\"Align Right\">\\u{23A3}</div>\n                </div>\n            </div>\n            <div class=\"menu-section\">\n                <div class=\"menu-title\">Borders</div>\n                <div class=\"border-options\">\n                    <div class=\"border-btn\" data-border=\"${2}\" title=\"Border Left\">Left</div>\n                    <div class=\"border-btn\" data-border=\"${4}\" title=\"Border Top\">Top</div>\n                    <div class=\"border-btn\" data-border=\"${8}\" title=\"Border Right\">Right</div>\n                    <div class=\"border-btn\" data-border=\"${16}\" title=\"Border Bottom\">Bottom</div>\n                </div>\n            </div>\n            <div class=\"menu-section\">\n            <div class=\"menu-title\">Text Baseline</div>\n                <div class=\"option-group\">\n                    <div class=\"format-btn\" data-baseline=\"alphabetic\" title=\"Alphabetic\">A</div>\n                    <div class=\"format-btn\" data-baseline=\"top\" title=\"Top\">Top</div>\n                    <div class=\"format-btn\" data-baseline=\"middle\" title=\"Middle\">Mid</div>\n                    <div class=\"format-btn\" data-baseline=\"bottom\" title=\"Bottom\">Bot</div>\n                </div>\n                <div class=\"baseline-visual\" id=\"baselineDemo\">\n                    <div class=\"baseline-line\" id=\"baselineIndicator\"></div>\n                    <div class=\"baseline-text\" id=\"baselineText\">Text</div>\n                </div>\n            </div>\n        </div>\n    `;\n    const cbs = [];\n    function onChange(type, value) {\n        for (let cb of cbs)cb(type, value);\n    }\n    formatWindow.document.title = 'Format Menu';\n    formatWindow.document.getElementById('fontSize').addEventListener('change', function() {\n        onChange('fontSize', this.value);\n    });\n    formatWindow.document.getElementById('cellType').addEventListener('change', function() {\n        onChange('cellType', this.value);\n    });\n    formatWindow.document.getElementById('fontColor').addEventListener('input', function() {\n        onChange('color', this.value);\n    });\n    // Quick color options\n    formatWindow.document.querySelectorAll('.color-option').forEach((option)=>{\n        option.addEventListener('click', function() {\n            const color = this.getAttribute('data-color');\n            formatWindow.document.getElementById('fontColor').value = color;\n            onChange('color', color);\n        });\n    });\n    // Alignment buttons\n    formatWindow.document.querySelectorAll('.alignment-btn').forEach(function(btn) {\n        btn.addEventListener('click', function() {\n            // Remove active class from all buttons\n            formatWindow.document.querySelectorAll('.alignment-btn').forEach(function(b) {\n                b.classList.remove('active');\n            });\n            // Add active class to clicked button\n            this.classList.add('active');\n            const alignment = this.getAttribute('data-align');\n            onChange('textAlign', alignment);\n        });\n    });\n    // Border buttons\n    formatWindow.document.querySelectorAll('.border-btn').forEach(function(btn) {\n        btn.addEventListener('click', function() {\n            this.classList.toggle('active');\n            let border = 0;\n            formatWindow.document.querySelectorAll('.border-btn.active').forEach(function(b) {\n                const databorder = b.getAttribute('data-border');\n                border |= databorder;\n            });\n            // Remove active class from all buttons\n            // const border = this.getAttribute('data-border');\n            onChange('border', border);\n        });\n    });\n    // Baseline buttons\n    formatWindow.document.querySelectorAll('[data-baseline]').forEach(function(btn) {\n        // Update baseline visual demonstration\n        const baselineOptions = {\n            'alphabetic': {\n                position: 30,\n                description: 'Normal text baseline'\n            },\n            'top': {\n                position: 5,\n                description: 'Top of the em square'\n            },\n            'middle': {\n                position: 20,\n                description: 'Middle of the em square'\n            },\n            'bottom': {\n                position: 35,\n                description: 'Bottom of the em square'\n            },\n            'hanging': {\n                position: 5,\n                description: 'Hanging baseline (like Hindi)'\n            },\n            'ideographic': {\n                position: 35,\n                description: 'Ideographic baseline (like CJK)'\n            }\n        };\n        function updateBaselineVisual(baseline) {\n            const demo = formatWindow.document.getElementById('baselineDemo');\n            const indicator = formatWindow.document.getElementById('baselineIndicator');\n            const text = formatWindow.document.getElementById('baselineText');\n            if (baselineOptions[baseline]) {\n                const pos = baselineOptions[baseline].position;\n                indicator.style.top = `${pos}px`;\n                text.style.top = `${pos}px`;\n                text.textContent = baseline;\n            }\n        }\n        btn.addEventListener('click', function() {\n            formatWindow.document.querySelectorAll('[data-baseline]').forEach((b)=>b.classList.remove('active'));\n            this.classList.add('active');\n            const baseline = this.getAttribute('data-baseline');\n            updateBaselineVisual(baseline);\n            onChange('textBaseline', baseline);\n        });\n    });\n    return {\n        win: formatWindow,\n        addListener: (fn)=>cbs.push(fn)\n    };\n}\n\n\nfunction $89443b9b021fff66$export$3b774a58fdb21522(data, container, width, height) {\n    console.log('createlinecahrt?');\n    function render(data, width, height) {\n        container.innerHTML = '';\n        container.innerHTML = `\n                    <div class=\"chart-container\">\n                        <div class=\"chart\"></div>\n                    </div>\n                    <div class=\"tooltip\"></div>\n                `;\n        const chart = container.querySelector('.chart');\n        const tooltip = container.querySelector('.tooltip');\n        const parsedData = data.map((item)=>({\n                value: parseFloat(item[0]),\n                date: item[1]\n            }));\n        // Get dimensions\n        // const width = chart.offsetWidth;\n        // const height = chart.offsetHeight;\n        const margin = {\n            top: 20,\n            right: 50,\n            bottom: 50,\n            left: 50\n        };\n        const chartWidth = width - margin.left - margin.right;\n        const chartHeight = height - margin.top - margin.bottom;\n        // Create SVG\n        const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        svg.setAttribute(\"width\", width);\n        svg.setAttribute(\"height\", height);\n        svg.style.overflow = 'visible';\n        chart.appendChild(svg);\n        // Create chart group\n        const chartGroup = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n        chartGroup.setAttribute(\"transform\", `translate(${margin.left}, ${margin.top})`);\n        svg.appendChild(chartGroup);\n        // Calculate scales\n        const xScale = (date, index)=>{\n            const totalPoints = parsedData.length;\n            // Add slight padding to the sides\n            const padding = 0.02 * chartWidth;\n            return padding + index / (totalPoints - 1) * (chartWidth - 2 * padding);\n        };\n        const maxValue = Math.max(...parsedData.map((d)=>d.value));\n        const yScale = (value)=>{\n            return chartHeight - value / maxValue * chartHeight;\n        };\n        // Create line\n        const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n        let pathData = \"M\";\n        parsedData.forEach((d, i)=>{\n            const x = xScale(d.date, i);\n            const y = yScale(d.value);\n            pathData += `${x},${y} `;\n            if (i < parsedData.length - 1) pathData += \"L\";\n            // Add points\n            const point = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n            point.setAttribute(\"class\", \"point\");\n            point.setAttribute(\"cx\", x);\n            point.setAttribute(\"cy\", y);\n            point.setAttribute(\"r\", 4);\n            point.setAttribute(\"data-value\", d.value);\n            point.setAttribute(\"data-date\", d.date);\n            // Add hover events\n            point.addEventListener('mouseover', (e)=>{\n                tooltip.style.display = 'block';\n                tooltip.innerHTML = `Date: ${d.date}<br>Value: ${d.value}`;\n                tooltip.style.left = e.pageX + 10 + 'px';\n                tooltip.style.top = e.pageY - 10 + 'px';\n            });\n            point.addEventListener('mouseout', ()=>{\n                tooltip.style.display = 'none';\n            });\n            chartGroup.appendChild(point);\n        });\n        path.setAttribute(\"class\", \"line\");\n        path.setAttribute(\"d\", pathData);\n        chartGroup.appendChild(path);\n        // Add x-axis labels (dates)\n        const labelPadding = 5; // Additional padding for labels\n        parsedData.forEach((d, i)=>{\n            if (i % Math.ceil(parsedData.length / 5) === 0 || i === parsedData.length - 1) {\n                const xPos = xScale(d.date, i);\n                // Only draw label if it fits within bounds\n                if (xPos >= 0 && xPos <= chartWidth) {\n                    const label = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n                    label.setAttribute(\"class\", \"x-axis\");\n                    label.setAttribute(\"x\", xPos);\n                    label.setAttribute(\"y\", chartHeight + 20);\n                    label.setAttribute(\"text-anchor\", \"middle\");\n                    // Shorten date format if needed\n                    const labelText = d.date.length > 10 ? d.date.substring(5) : d.date;\n                    label.textContent = labelText;\n                    // Check if label would extend beyond right edge\n                    const textLength = labelText.length * 6; // Approximate width\n                    if (xPos + textLength / 2 > chartWidth) {\n                        label.setAttribute(\"text-anchor\", \"end\");\n                        label.setAttribute(\"x\", chartWidth - labelPadding);\n                    } else if (xPos - textLength / 2 < 0) {\n                        label.setAttribute(\"text-anchor\", \"start\");\n                        label.setAttribute(\"x\", labelPadding);\n                    }\n                    chartGroup.appendChild(label);\n                }\n            }\n        });\n        // Add y-axis labels (values)\n        for(let i = 0; i <= 5; i++){\n            const value = maxValue / 5 * i;\n            const label = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n            label.setAttribute(\"class\", \"y-axis\");\n            label.setAttribute(\"x\", -10);\n            label.setAttribute(\"y\", yScale(value));\n            label.setAttribute(\"text-anchor\", \"end\");\n            label.setAttribute(\"dy\", \"0.35em\");\n            label.textContent = value.toFixed(1);\n            chartGroup.appendChild(label);\n            // Add grid line\n            const gridLine = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n            gridLine.setAttribute(\"x1\", 0);\n            gridLine.setAttribute(\"y1\", yScale(value));\n            gridLine.setAttribute(\"x2\", chartWidth);\n            gridLine.setAttribute(\"y2\", yScale(value));\n            gridLine.setAttribute(\"stroke\", \"#eee\");\n            gridLine.setAttribute(\"stroke-dasharray\", \"2,2\");\n            chartGroup.insertBefore(gridLine, chartGroup.firstChild);\n        }\n        // Add axis titles\n        const xAxisTitle = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        xAxisTitle.setAttribute(\"class\", \"x-axis\");\n        xAxisTitle.setAttribute(\"x\", chartWidth / 2);\n        xAxisTitle.setAttribute(\"y\", chartHeight + 40);\n        xAxisTitle.setAttribute(\"text-anchor\", \"middle\");\n        xAxisTitle.textContent = \"Date\";\n        chartGroup.appendChild(xAxisTitle);\n        const yAxisTitle = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        yAxisTitle.setAttribute(\"class\", \"y-axis\");\n        yAxisTitle.setAttribute(\"transform\", \"rotate(-90)\");\n        yAxisTitle.setAttribute(\"x\", -chartHeight / 2);\n        yAxisTitle.setAttribute(\"y\", -40); // Adjusted to not overlap with labels\n        yAxisTitle.setAttribute(\"text-anchor\", \"middle\");\n        yAxisTitle.textContent = \"Value\";\n        chartGroup.appendChild(yAxisTitle);\n    }\n    function update() {\n        container.innerHTML = '';\n    }\n    function destroy() {\n        container.innerHTML = '';\n    }\n    render(data, width, height);\n    return {\n        container: container,\n        update: update,\n        destroy: destroy,\n        render: render\n    };\n}\n\n\n\n\nclass $2ed898743101093c$export$2e2bcd8739ae039 {\n    constructor(){\n        this.onmessage = (event)=>{\n            try {\n                const messageData = event.data;\n                const data = this.Yaticker?.decode(new Uint8Array(atob(messageData).split(\"\").map((c)=>c.charCodeAt(0))));\n                if (data.id.startsWith('^')) {\n                    data._id = data.id;\n                    data.id = data.id.slice(1);\n                }\n                this.data.store('YA', data.id, data);\n                console.log('tick data:', data);\n                this.updateListeners(data);\n            } catch (e) {\n                console.log(e);\n            }\n        };\n        this.tickers = new Set();\n        this.connection = null;\n        this.data = new (0, $5055501275aadc06$export$2e2bcd8739ae039)();\n        this.isOpen = false;\n        this.root = protobuf.Root.fromJSON((parcelRequire(\"5Mp1b\")));\n        this.Yaticker = this.root?.lookupType(\"yaticker\");\n        this.cbs = [];\n    // setInterval(() => {\n    //     const dummydata = { id: 'GME', price: Math.random() * 100 };\n    //     this.data.store('YA', dummydata.id, dummydata);\n    //     this.updateListeners(dummydata)\n    // }, 1000)\n    }\n    /**\n     * @returns something like '{\"subscribe\":[\"API\",\"^GSPC\",\"^DJI\",\"^IXIC\",\"^RUT\",\"CL=F\",\"GC=F\",\"NVDA\",\"GME\",\"RKT\",\"GAP\",\"BLD\",\"IBP\"]}'\n     */ getSubString() {\n        return JSON.stringify({\n            subscribe: [\n                ...this.tickers\n            ]\n        });\n    }\n    hasSubs() {\n        return this.tickers.size > 0;\n    }\n    addListener(cb) {\n        this.cbs.push(cb);\n    }\n    updateSubs() {\n        if (this.connection) {\n            if (this.hasSubs()) this.connection.send(this.getSubString());\n        } else {\n            this.connection = new WebSocket(atob(\"d3NzOi8vc3RyZWFtZXIuZmluYW5jZS55YWhvby5jb20v\"));\n            this.connection.onopen = ()=>{\n                this.isOpen = true;\n                if (this.hasSubs()) this.connection.send(this.getSubString());\n            };\n            this.connection.onmessage = this.onmessage;\n        }\n        return this.connection;\n    }\n    updateListeners(data) {\n        for (let cb of this.cbs)cb(data);\n    }\n    async fetchTicker(symbol) {}\n    addSubs(subs) {\n        for (let symbol of subs){\n            if (!this.tickers.has(symbol)) this.fetchTicker(symbol);\n            this.tickers.add(symbol);\n        }\n        if (this.hasSubs()) this.updateSubs();\n    }\n}\n\n\nclass $9404a3e77a7924f2$export$2e2bcd8739ae039 {\n    constructor(){\n        if ($9404a3e77a7924f2$export$2e2bcd8739ae039._instance) return $9404a3e77a7924f2$export$2e2bcd8739ae039._instance;\n        $9404a3e77a7924f2$export$2e2bcd8739ae039._instance = this;\n        this.ya = new (0, $2ed898743101093c$export$2e2bcd8739ae039)();\n        this.tickListeners = [];\n        this.ya.addListener((data)=>{\n            for (let listener of this.tickListeners)listener(data);\n        });\n    }\n    listenYA(tickers) {\n        this.ya.addSubs(tickers);\n    }\n    onTick(fn) {\n        this.tickListeners.push(fn);\n    }\n}\n\n\n\nconst $b786fc20307c7d32$export$47658cca1a909427 = 2;\nconst $b786fc20307c7d32$export$f9a7b6bd24892946 = 4;\nconst $b786fc20307c7d32$export$5abca33e6be905d2 = 8;\nconst $b786fc20307c7d32$export$e2ce9f12a980a822 = 16;\nfunction $b786fc20307c7d32$export$ddaab9e7f2b71bf3(curBorder, border) {\n    if (!curBorder) return border;\n    return curBorder | border;\n}\nfunction $b786fc20307c7d32$export$cd55b7833b9fcb42(curBorder, border) {\n    if (!curBorder) return 0;\n    return border ^ curBorder;\n}\nfunction $b786fc20307c7d32$export$e77b9811020023f0(curBorder, border) {\n    if (!curBorder) return false;\n    return border === (border & curBorder);\n}\nfunction $b786fc20307c7d32$export$de8456e649b1d7(curBorder, borderStr) {\n    if (!curBorder) return false;\n    let border;\n    if (borderStr === 'left') border = $b786fc20307c7d32$export$47658cca1a909427;\n    else if (borderStr === 'top') border = $b786fc20307c7d32$export$f9a7b6bd24892946;\n    else if (borderStr === 'right') border = $b786fc20307c7d32$export$5abca33e6be905d2;\n    else if (borderStr === 'bottom') border = $b786fc20307c7d32$export$e2ce9f12a980a822;\n    else return 0;\n    return border === (border & curBorder);\n}\nfunction $b786fc20307c7d32$export$63c9bf321bec550b(tag = 'div', className = '', children) {\n    const el = document.createElement(tag);\n    el.className = className;\n    if (children) el.innerHTML = children;\n    return el;\n}\n\n\n// @ts-ignore\n\nfunction $1687a2f0ec14ec0a$var$rowColToRef(row, col) {\n    // Validate inputs\n    if (row < 0 || col < 0 || !Number.isInteger(row) || !Number.isInteger(col)) return '';\n    // Convert column index to letters (0 = A, 1 = B, ..., 25 = Z, 26 = AA, etc.)\n    let colLetters = '';\n    let remaining = col + 1; // Convert to 1-based for calculation\n    while(remaining > 0){\n        const remainder = (remaining - 1) % 26;\n        colLetters = String.fromCharCode(65 + remainder) + colLetters;\n        remaining = Math.floor((remaining - 1) / 26);\n    }\n    // Convert row index to 1-based number\n    const rowNumber = row + 1;\n    return colLetters + rowNumber;\n}\nfunction $1687a2f0ec14ec0a$export$6248b70327fdc923(text, dir) {\n    const deltas = {\n        up: [\n            -1,\n            0\n        ],\n        down: [\n            1,\n            0\n        ],\n        left: [\n            0,\n            -1\n        ],\n        right: [\n            0,\n            1\n        ]\n    };\n    const delta = deltas[dir];\n    text = text.slice(1); // strip =\n    const tokens = (0, $5aadb708f388d983$export$2e2bcd8739ae039).tokenizeWithIndex(text);\n    tokens.reverse();\n    let str = '=';\n    for(let i = 0; i < text.length; i++){\n        while(tokens.length > 0 && !/^[A-Za-z]+\\d+$/.test(tokens[tokens.length - 1][0]))tokens.pop();\n        const [token, indexes] = tokens[tokens.length - 1] || [\n            '',\n            []\n        ];\n        if (i === indexes[0]) {\n            const cell = (0, $5aadb708f388d983$export$2e2bcd8739ae039).parseCellReference(token);\n            const newRef = $1687a2f0ec14ec0a$var$rowColToRef(cell.row + delta[0], cell.col + delta[1]);\n            if (!newRef) str += 'REFERROR';\n            else str += newRef;\n            tokens.pop();\n            i = indexes[1] - 1;\n        } else str += text[i];\n    }\n    return str;\n}\n\n\nconst $874381dec2e17b27$export$38e42c68cf43b5d4 = `\n<style>\n    .header-bar {\n        font-family: Arial, sans-serif;\n        background-color: #f3f3f3;\n        padding: 5px;\n        border-bottom: 1px solid #d4d4d4;\n        display: flex;\n        flex-wrap: wrap;\n        z-index: 300;\n    }\n\n    .tab-group {\n        display: flex;\n        margin-right: 15px;\n    }\n\n    .button-group {\n        display: flex;\n        border-right: 1px solid #d4d4d4;\n        padding: 3px 10px 3px 3px;\n        align-items: center;\n    }\n\n    .button {\n        background: none;\n        border: none;\n        padding: 5px 8px;\n        margin: 0 2px;\n        cursor: pointer;\n        border-radius: 3px;\n    }\n\n    .button:hover {\n        background-color: #e0e0e0;\n    }\n\n    .button img {\n        width: 16px;\n        height: 16px;\n    }\n\n    .separator {\n        width: 1px;\n        background-color: #d4d4d4;\n        margin: 0 5px;\n        height: 30px;\n    }\n\n    .dropdown {\n        position: relative;\n        display: inline-block;\n    }\n\n    .dropdown-content {\n        display: none;\n        position: absolute;\n        background-color: #f9f9f9;\n        min-width: 130px;\n        box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\n        z-index: 1;\n        font-size: 14px;\n        border: 1px solid #d4d4d4;\n    }\n    .dropdown-content > div {\n        border-bottom: 1px solid #d4d4d4;\n        padding: 2px;\n        cursor: pointer;\n    }\n\n    .dropdown-content > div:last-child {\n        border-bottom: none;\n    }\n\n    .dropdown:hover .dropdown-content {\n        display: block;\n        z-index: 300;\n    }\n</style>\n<div class=\"header-bar\">\n    <!-- Clipboard Group -->\n    <div class=\"button-group quick-text-actions-buttons\">\n        <button class=\"button\" data-action=\"paste\" title=\"Paste\">\\u{1F4CB}</button>\n        <button class=\"button\" data-action=\"cut\" title=\"Cut\">\\u{2702}\\u{FE0F}</button>\n        <button class=\"button\" data-action=\"copy\" title=\"Copy\">\\u{1F4C4}</button>\n        <div class=\"separator\"></div>\n        <div class=\"dropdown\">\n            <button id=\"format-button\" class=\"button format-button\" title=\"Format Painter\">\\u{1F58C}\\u{FE0F}</button>\n        </div>\n    </div>\n\n    <!-- Font Group -->\n    <div class=\"button-group\">\n        <div class=\"dropdown\">\n            <button class=\"button\" title=\"Font\">Arial \\u{25BC}</button>\n            <div class=\"dropdown-content\">\n                <div>Arial</div>\n                <div>Calibri</div>\n                <div>Times New Roman</div>\n            </div>\n        </div>\n        <div class=\"dropdown\">\n            <button class=\"button\" title=\"Font Size\">11 \\u{25BC}</button>\n        </div>\n        <button class=\"button\" title=\"Bold\">B</button>\n        <button class=\"button\" title=\"Italic\">I</button>\n        <button class=\"button\" title=\"Underline\">U</button>\n        <div class=\"separator\"></div>\n        <button class=\"button\" title=\"Border\">\\u{29C9}</button>\n        <div class=\"dropdown\">\n            <button class=\"button\" title=\"Fill Color\">\\u{25A3}</button>\n        </div>\n        <div class=\"dropdown\">\n            <button class=\"button\" title=\"Font Color\">A</button>\n        </div>\n    </div>\n\n    <!-- Alignment Group -->\n    <div class=\"button-group align-button-group\">\n        <button class=\"button\" data-align=\"left\" title=\"Align Left\">\\u{2261}</button>\n        <button class=\"button\" data-align=\"center\" title=\"Align Center\">\\u{2261}</button>\n        <button class=\"button\" data-align=\"right\" title=\"Align Right\">\\u{2261}</button>\n        <div class=\"separator\"></div>\n        <button class=\"button merge-button\" title=\"Merge & Center\" id=\"merge-button\">\\u{29C9} M</button>\n    </div>\n\n    <!-- Editing Group -->\n    <div class=\"button-group\">\n        <div class=\"dropdown\">\n            <button class=\"button\" title=\"Insert\">\\u{2295} Insert</button>\n        </div>\n        <div class=\"dropdown\">\n            <button class=\"button\" title=\"Delete\">\\u{2296} Delete</button>\n        </div>\n        <div class=\"separator\"></div>\n        <div class=\"dropdown\">\n            <button class=\"button\" title=\"Conditional Formatting\">\\u{2630} Format</button>\n        </div>\n    </div>\n</div>\n`;\n\n\n\nconst $64e794a85fb4c4a6$var$menuItems = [\n    {\n        key: 'copy',\n        title: 'Copy',\n        label: 'Ctrl+C'\n    },\n    {\n        key: 'cut',\n        title: 'Cut',\n        label: 'Ctrl+X'\n    },\n    {\n        key: 'paste',\n        title: 'Paste',\n        label: 'Ctrl+V'\n    },\n    {\n        key: 'paste-value',\n        title: 'Paste values only',\n        label: 'Ctrl+Shift+V'\n    },\n    {\n        key: 'paste-format',\n        title: 'Paste format only',\n        label: 'Ctrl+Alt+V'\n    },\n    {\n        key: 'divider'\n    },\n    {\n        key: 'insert-row',\n        title: 'Insert row'\n    },\n    {\n        key: 'insert-column',\n        title: 'Insert column'\n    },\n    {\n        key: 'divider'\n    },\n    {\n        key: 'merge',\n        title: 'Merge'\n    },\n    {\n        key: 'unmerge',\n        title: 'Unmerge'\n    },\n    {\n        key: 'divider'\n    },\n    {\n        key: 'delete-row',\n        title: 'Delete row'\n    },\n    {\n        key: 'delete-column',\n        title: 'Delete column'\n    },\n    {\n        key: 'delete-cell-text',\n        title: 'Delete cell text'\n    },\n    {\n        key: 'clear',\n        title: 'Clear Contents',\n        label: ''\n    },\n    {\n        key: 'divider'\n    },\n    {\n        key: 'toggle-gridlines',\n        title: 'Toggle Gridlines'\n    }\n];\nfunction $64e794a85fb4c4a6$var$buildMenuItem(item) {\n    if (item.key === 'divider') return (0, $b786fc20307c7d32$export$63c9bf321bec550b)('div', `gigasheet-item divider`);\n    const el = (0, $b786fc20307c7d32$export$63c9bf321bec550b)('div', `gigasheet-item`, `\n        ${item.title}\n        <div class=\"label\">${item.label || ''}</div>\n    `);\n    el.setAttribute('data-key', item.key);\n    return el;\n}\nfunction $64e794a85fb4c4a6$var$buildMenu(menuItems) {\n    return menuItems.map((it)=>$64e794a85fb4c4a6$var$buildMenuItem(it));\n}\nclass $64e794a85fb4c4a6$export$2e2bcd8739ae039 {\n    constructor(){\n        this.menuItems = $64e794a85fb4c4a6$var$buildMenu($64e794a85fb4c4a6$var$menuItems);\n        this.container = (0, $b786fc20307c7d32$export$63c9bf321bec550b)('div', 'gigasheet-contextmenu');\n        this.container.oncontextmenu = (e)=>e.preventDefault();\n        this.container.style.display = 'none';\n        for (let child of this.menuItems)this.container.appendChild(child);\n        this.container.onclick = (e)=>{\n            if (e.target.hasAttribute('data-key')) {\n                const action = e.target.getAttribute('data-key');\n                if (this.clickCb) this.clickCb(action);\n                this.hide();\n            }\n        };\n    }\n    onClick(fn) {\n        this.clickCb = fn;\n    }\n    hide() {\n        this.container.style.display = 'none';\n    }\n    setPosition(x, y, containerRect) {\n        const { width: width, height: height } = containerRect;\n        const ctxrect = this.container.getBoundingClientRect();\n        const ctxwidth = ctxrect.width;\n        const vhf = height / 2;\n        let left = x;\n        if (width - x <= ctxwidth) left -= ctxwidth;\n        this.container.style.left = `${left}px`;\n        if (y > vhf) {\n            this.container.style.bottom = `${height - y}px`;\n            this.container.style.maxHeight = `${y}px`;\n            this.container.style.top = 'auto';\n        } else {\n            this.container.style.top = `${y}px`;\n            this.container.style.maxHeight = `${height - y}px`;\n            this.container.style.bottom = 'auto';\n        }\n        this.container.style.display = '';\n    }\n}\n\n\nclass $e1851ed6dad30b6d$export$2e2bcd8739ae039 {\n    constructor(wrapper, options, state){\n        this.wrapper = wrapper || document.createElement('div');\n        const _container = document.createElement('div');\n        this._container = _container;\n        _container.style.width = '100%';\n        _container.style.height = '100%';\n        _container.style.display = 'flex';\n        _container.style.flexDirection = 'column';\n        // _container.style.maxHeight = 'calc(100vh - 40px)';\n        _container.innerHTML = `\n        ${0, $874381dec2e17b27$export$38e42c68cf43b5d4}\n        <div id=\"grid-container\" class=\"grid-container\">\n            <div id=\"corner-cell\" class=\"corner-cell\"></div>\n            <div id=\"header-container\" class=\"header-container\"></div>\n            <div id=\"row-number-container\" class=\"row-number-container\"></div>\n            <div id=\"selection-layer\" class=\"selection-layer\"></div>\n        </div>\n        `;\n        this.container = _container.querySelector('.grid-container');\n        this.wrapper.appendChild(_container);\n        this.ctxmenu = new (0, $64e794a85fb4c4a6$export$2e2bcd8739ae039)();\n        _container.append(this.ctxmenu.container);\n        // this.container.style.minHeight = '100%';\n        this.container.style.width = '100%';\n        // this.container.style.height = '100%';\n        this.container.style.position = 'relative';\n        this.container.style.overflow = 'auto';\n        this.container.scrollLeft = 0;\n        this.container.scrollTop = 0;\n        this.headerContainer = _container.querySelector('.header-container');\n        this.rowNumberContainer = _container.querySelector('.row-number-container');\n        this.cornerCell = _container.querySelector('.corner-cell');\n        this.selectionLayer = _container.querySelector('.selection-layer');\n        this.mergeButton = _container.querySelector('.merge-button');\n        this.formatButton = _container.querySelector('.format-button');\n        this.lastDevicePixelRatio = window.devicePixelRatio;\n        this.lastBlockCanvases = this.blockCanvases();\n        // const rect = this.container.getBoundingClientRect();\n        // this.cornerCell.style.top = `${rect.y}px`;\n        // Configuration\n        this.cellWidth = options.cellWidth ?? 64;\n        this.cellHeight = options.cellHeight ?? 20;\n        this.blockRows = options.blockRows ?? 28; // Max rows per canvas block\n        this.blockCols = options.blockCols ?? 30; // Max cols per canvas block\n        this.paddingBlocks = options.paddingBlocks ?? 1; // Extra blocks to render around visible area\n        this.padding = options.padding || 1; // number of adjacent blocks to render\n        this.MAX_HISTORY_SIZE = 100;\n        this.rowNumberWidth = 42;\n        this.headerRowHeight = this.cellHeight || 30;\n        // this.headerContainer.style.height = `${this.headerRowHeight}px`;\n        this.headerContainer.style.lineHeight = `${this.headerRowHeight}px`;\n        this.selectionLayer.style.top = `${this.headerRowHeight}px`;\n        this.selectionLayer.style.left = `${this.rowNumberWidth}px`;\n        this.rowNumberContainer.style.width = `${this.rowNumberWidth}px`;\n        this.rowNumberContainer.style.lineHeight = `${this.headerRowHeight}px`;\n        this.cornerCell.style.width = `${this.rowNumberWidth}px`;\n        this.cornerCell.style.height = `${this.headerRowHeight}px`;\n        this.cornerCell.style.marginTop = `-${this.headerRowHeight + 1}px`; // -1 for border\n        if (options.subscribeFinance) this.subscribeFinance();\n        // State\n        this.mergedCells = options.mergedCells || [];\n        this.heightOverrides = this.buildOverrides(options.heightOverrides);\n        this.widthOverrides = this.buildOverrides(options.widthOverrides);\n        this.gridlinesOn = options.gridlinesOn ?? true;\n        this.activeBlocks = new Map(); // Track active canvas blocks\n        // window.activeBlocks = this.activeBlocks;\n        // window.renderBlock = this.renderBlock.bind(this);\n        this.undoStack = [];\n        this.redoStack = [];\n        this.elRegistry = {};\n        this.heightAccum = [];\n        this.widthAccum = [];\n        this.isResizing = false;\n        this.resizeStart = null;\n        this.resizeInitialSize = null;\n        this.busy = false;\n        // Selection state\n        this.selectedCell = null;\n        this.isSelecting = false;\n        this.selectionStart = null;\n        this.selectionEnd = null;\n        this.selectionHandle = null;\n        this.draggingHeader = null;\n        this.selectedCols = new Set();\n        this.selectedRows = new Set();\n        // Metrics\n        this.visibleStartRow = 0;\n        this.visibleEndRow = 0;\n        this.visibleStartCol = 0;\n        this.visibleEndCol = 0;\n        // Initialize\n        this.initEventListeners();\n        this.createSelectionHandle();\n        this.addNewSelection();\n        // Add edit input element\n        this.editInput = document.createElement('input');\n        this.editInput.className = 'cell-edit-input';\n        this.editInput.style.position = 'absolute';\n        this.editInput.style.display = 'none';\n        this.container.appendChild(this.editInput);\n        this.initRender();\n        this.data = null;\n        this.parser = null;\n        // if (!this.restoreSave()) {\n        this.setData(new (0, $9da0d049db75c76f$export$2e2bcd8739ae039)(), options.initialCells);\n    // }\n    }\n    initRender() {\n        this.updateGridDimensions();\n        this.renderHeaders();\n        this.renderRowNumbers();\n        this.updateVisibleGrid();\n    }\n    buildOverrides(overrides) {\n        if (!overrides) return [];\n        const _overrides = [];\n        for(let key in overrides)_overrides[key] = overrides[key];\n        return _overrides;\n    }\n    subscribeFinance() {\n        const f = new (0, $9404a3e77a7924f2$export$2e2bcd8739ae039)();\n        f.listenYA([\n            \"API\",\n            \"^GSPC\",\n            \"^DJI\",\n            \"^IXIC\",\n            \"^RUT\",\n            \"CL=F\",\n            \"GC=F\",\n            \"NVDA\",\n            \"GME\",\n            \"RKT\",\n            \"GAP\",\n            \"BLD\",\n            \"IBP\"\n        ]);\n        f.onTick((data)=>{\n            const cells = (0, $c8587485a8b03077$export$f93e88ee62922d93)[data.id] || {};\n            for(let key in cells){\n                const [row, col] = key.split(',');\n                this.renderCell(row, col);\n            }\n            console.log('gigasheet::ontick', data);\n        });\n    }\n    initEventListeners() {\n        this.container.addEventListener('scroll', ()=>{\n            requestAnimationFrame(()=>this.handleScroll());\n        });\n        const resizeObserver = new ResizeObserver(()=>{\n            this.updateGridDimensions();\n            this.updateVisibleGrid();\n            this.updateSelection();\n            this.updateRenderingQuality();\n        // this.contextMenu.style.width = `${130 * this.scaler()}px`;\n        // this.contextMenu.style.fontSize = `${14 * this.scaler()}px`;\n        });\n        resizeObserver.observe(this.container);\n        // Selection event listeners\n        this.container.addEventListener('mousedown', this.handleMouseDown.bind(this));\n        document.addEventListener('mousemove', this.handleMouseMove.bind(this));\n        document.addEventListener('mouseup', this.handleMouseUp.bind(this));\n        // Edit event listeners\n        this.container.addEventListener('dblclick', this.handleCellDblClick.bind(this));\n        document.addEventListener('keydown', this.handleKeyDown.bind(this));\n        // Copy selected cells to clipboard\n        document.addEventListener('copy', (e)=>{\n            if (this.editingCell) return;\n            if (!this.selectionBoundRect) return;\n            const { startRow: startRow, startCol: startCol, endRow: endRow, endCol: endCol } = this.selectionBoundRect;\n            let clipboardData = '';\n            for(let row = startRow; row <= endRow; row++){\n                for(let col = startCol; col <= endCol; col++){\n                    const value = this.getCellText(row, col);\n                    clipboardData += value;\n                    if (col < endCol) clipboardData += '\\t';\n                }\n                if (row < endRow) clipboardData += '\\n';\n            }\n            e.clipboardData.setData('text/plain', clipboardData);\n            e.preventDefault();\n        });\n        // Show context menu on right-click\n        this.container.addEventListener('contextmenu', (e)=>{\n            if (e.target.closest('.row-number-container')) return;\n            if (e.target.closest('.header-container')) return;\n            if (e.target.closest('.corner-cell')) return;\n            if (e.target.closest('.cell-edit-input')) return;\n            e.preventDefault(); // Prevent the default browser context menu\n        });\n        this._container.querySelector('.align-button-group')?.addEventListener('click', (e)=>{\n            // console.log('clicked align buttons', e.target?.getAttribute('data-align'))\n            const textAlign = e.target?.getAttribute('data-align');\n            const selectedCells = this.getSelectedCells();\n            this.setCells(selectedCells, 'textAlign', textAlign);\n        });\n        this._container.querySelector('.quick-text-actions-buttons')?.addEventListener('click', async (e)=>{\n            // console.log('clicked align buttons', e.target?.getAttribute('data-align'))\n            const action = e.target?.getAttribute('data-action');\n            if (action === 'copy') document.execCommand('copy');\n            else if (action === 'paste') {\n                const clipboardText = await navigator.clipboard.readText();\n                this.handlePaste(clipboardText);\n            } else if (action === 'cut') {\n                document.execCommand('copy');\n                this.clearSelectedCells();\n            }\n        });\n        document.addEventListener('paste', (e)=>{\n            if (this.editingCell) return;\n            this.handlePaste(e.clipboardData.getData('text/plain'));\n            e.preventDefault();\n        });\n        this.mergeButton.onclick = (e)=>{\n            e.preventDefault();\n            this.mergeSelectedCells();\n        };\n        this.formatButton.onclick = (e)=>{\n            e.preventDefault();\n            this.openFormatMenu();\n        };\n        this.ctxmenu.onClick(async (action)=>{\n            if (action === 'copy') document.execCommand('copy');\n            else if (action === 'cut') {\n                document.execCommand('copy');\n                this.clearSelectedCells();\n            } else if (action === 'paste') {\n                if (this.editingCell) return;\n                const clipboardText = await navigator.clipboard.readText();\n                this.handlePaste(clipboardText);\n            } else if (action === 'insert-row') this.insertRow();\n            else if (action === 'insert-column') this.insertCol();\n            else if (action === 'delete-row') this.deleteRow();\n            else if (action === 'delete-column') this.deleteCol();\n            else if (action === 'clear') this.clearSelectedCells();\n            else if (action === 'toggle-gridlines') {\n                this.toggleGridlines();\n                this.forceRerender();\n            } else if (action === 'merge') this.mergeSelectedCells();\n            else if (action === 'unmerge') this.unmergeSelectedCells();\n        });\n    }\n    showContextMenu(x, y, row, col) {\n        const rect = this.container.getBoundingClientRect();\n        this.ctxmenu.setPosition(x, y, rect);\n        if (!this.rowColInBounds(row, col, this.selectionBoundRect)) this.selectCell({\n            row: row,\n            col: col\n        });\n    }\n    deleteRow(row = null, record = true) {\n        row = row != null ? row : this.selectionStart?.row;\n        if (row == null) return;\n        const cellsNeedingShift = (0, $c8587485a8b03077$export$95ca57ccd6c8bd78)(row);\n        for (let [row, col] of cellsNeedingShift){\n            const newText = (0, $1687a2f0ec14ec0a$export$6248b70327fdc923)(this.getCellText(row, col), 'up');\n            this.setText(parseInt(row), parseInt(col), newText);\n        }\n        const rowData = this.data.deleteRow(row);\n        this.mergedCells.forEach((merge)=>{\n            if (merge.startRow >= row) {\n                merge.startRow--;\n                merge.endRow--;\n            }\n        });\n        const heightOverride = this.heightOverrides[row];\n        delete this.heightOverrides[row];\n        this.shiftHeightOverrides(row, -1);\n        this.updateHeightAccum();\n        this.renderRowNumbers();\n        record && this.recordChanges([\n            {\n                changeKind: 'deleteEntireRow',\n                row: row,\n                rowData: rowData,\n                heightOverride: heightOverride\n            }\n        ]);\n        this.forceRerender();\n        this.selectionBoundRect = this.getBoundingRectCells(this.selectionBoundRect.startRow, this.selectionBoundRect.startCol, this.selectionBoundRect.endRow, this.selectionBoundRect.endCol);\n        this.updateSelection();\n    }\n    deleteCol(col = null, record = true) {\n        col = col != null ? col : this.selectionStart?.col;\n        if (col == null) return;\n        const cellsNeedingShift = (0, $c8587485a8b03077$export$abf4e674d580d2bd)(col);\n        for (let [row, col] of cellsNeedingShift){\n            const newText = (0, $1687a2f0ec14ec0a$export$6248b70327fdc923)(this.getCellText(row, col), 'left');\n            this.setText(parseInt(row), parseInt(col), newText);\n        }\n        const colData = this.data.deleteCol(col);\n        this.mergedCells.forEach((merge)=>{\n            if (merge.startCol >= col) {\n                merge.startCol--;\n                merge.endCol--;\n            }\n        });\n        const widthOverride = this.widthOverrides[col];\n        delete this.widthOverrides[col];\n        this.shiftWidthOverrides(col, -1);\n        this.updateWidthAccum();\n        this.renderHeaders();\n        record && this.recordChanges([\n            {\n                changeKind: 'deleteEntireCol',\n                col: col,\n                colData: colData,\n                widthOverride: widthOverride\n            }\n        ]);\n        this.forceRerender();\n        this.selectionBoundRect = this.getBoundingRectCells(this.selectionBoundRect.startRow, this.selectionBoundRect.startCol, this.selectionBoundRect.endRow, this.selectionBoundRect.endCol);\n        this.updateSelection();\n    }\n    shiftHeightOverrides(pivot, amount = 1) {\n        if (amount === -1) this.heightOverrides.splice(pivot, 1);\n        else if (amount === 1) {\n            this.heightOverrides.splice(pivot, 0, undefined);\n            delete this.heightOverrides[pivot];\n        }\n    }\n    shiftWidthOverrides(pivot, amount = 1) {\n        if (amount === -1) this.widthOverrides.splice(pivot, 1);\n        else if (amount === 1) {\n            this.widthOverrides.splice(pivot, 0, undefined);\n            delete this.widthOverrides[pivot];\n        }\n    }\n    insertRow(row = null, data = null, record = true, heightOverride = null) {\n        row = row != null ? row : this.selectionStart?.row;\n        if (row == null) return;\n        const cellsNeedingShift = (0, $c8587485a8b03077$export$cf80109cc26f790)(row);\n        for (let [row, col] of cellsNeedingShift){\n            const newText = (0, $1687a2f0ec14ec0a$export$6248b70327fdc923)(this.getCellText(row, col), 'down');\n            this.setText(parseInt(row), parseInt(col), newText);\n        }\n        this.data.addRow(row, data);\n        this.mergedCells.forEach((merge)=>{\n            if (merge.startRow >= row) {\n                merge.startRow++;\n                merge.endRow++;\n            }\n        });\n        this.shiftHeightOverrides(row, 1);\n        if (heightOverride != null) this.heightOverrides[row] = heightOverride;\n        this.updateHeightAccum();\n        this.renderRowNumbers();\n        record && this.recordChanges([\n            {\n                changeKind: 'insertEntireRow',\n                row: row\n            }\n        ]);\n        this.forceRerender();\n        this.selectionBoundRect = this.getBoundingRectCells(this.selectionBoundRect.startRow, this.selectionBoundRect.startCol, this.selectionBoundRect.endRow, this.selectionBoundRect.endCol);\n        this.updateSelection();\n    }\n    insertCol(col = null, data = null, record = true, widthOverride = null) {\n        col = col != null ? col : this.selectionStart?.col;\n        if (col == null) return;\n        const cellsNeedingShift = (0, $c8587485a8b03077$export$fe244e29ae22944f)(col);\n        for (let [row, col] of cellsNeedingShift){\n            const newText = (0, $1687a2f0ec14ec0a$export$6248b70327fdc923)(this.getCellText(row, col), 'right');\n            this.setText(parseInt(row), parseInt(col), newText);\n        }\n        this.data.addCol(col, data);\n        this.mergedCells.forEach((merge)=>{\n            if (merge.startCol >= col) {\n                merge.startCol++;\n                merge.endCol++;\n            }\n        });\n        this.shiftWidthOverrides(col, 1);\n        if (widthOverride != null) this.widthOverrides[col] = widthOverride;\n        this.updateWidthAccum();\n        this.renderHeaders();\n        record && this.recordChanges([\n            {\n                changeKind: 'insertEntireCol',\n                col: col\n            }\n        ]);\n        this.forceRerender();\n        this.selectionBoundRect = this.getBoundingRectCells(this.selectionBoundRect.startRow, this.selectionBoundRect.startCol, this.selectionBoundRect.endRow, this.selectionBoundRect.endCol);\n        this.updateSelection();\n    }\n    toggleGridlines() {\n        this.gridlinesOn = !this.gridlinesOn;\n        this.forceRerender();\n    }\n    scaler() {\n        return devicePixelRatio < 1 ? (1 + (1 - devicePixelRatio)) * (1 + (1 - devicePixelRatio)) : 1;\n    }\n    // Modify the clearSelectedCells function to record changes\n    clearSelectedCells() {\n        if (!this.selectionBoundRect) return;\n        const { startRow: startRow, startCol: startCol, endRow: endRow, endCol: endCol } = this.selectionBoundRect;\n        const changes = [];\n        const deletions = [];\n        for(let row = startRow; row <= endRow; row++)for(let col = startCol; col <= endCol; col++){\n            const obj = {\n                row: row,\n                col: col,\n                previousValue: this.getCellText(row, col),\n                newValue: '',\n                changeKind: 'valchange'\n            };\n            this.clearElRegistry(row, col);\n            deletions.push([\n                row,\n                col\n            ]);\n            changes.push(obj);\n        }\n        this.data.deleteCells(deletions);\n        this.recordChanges(changes);\n        for (let [row, col] of deletions)this.renderCell(row, col);\n    }\n    getColumnName(columnNumber) {\n        let columnName = '';\n        while(columnNumber >= 0){\n            const remainder = columnNumber % 26;\n            columnName = String.fromCharCode(65 + remainder) + columnName;\n            columnNumber = Math.floor(columnNumber / 26) - 1;\n            if (columnNumber < 0) break;\n        }\n        return columnName;\n    }\n    handlePaste(text) {\n        if (!this.selectionBoundRect) return;\n        const { startRow: startRow, startCol: startCol } = this.selectionBoundRect;\n        const clipboardData = text;\n        const rowsData = clipboardData.split('\\n');\n        const changes = []; // To record changes for undo/redo\n        for(let i = 0; i < rowsData.length; i++){\n            const rowData = rowsData[i].split('\\t');\n            for(let j = 0; j < rowData.length; j++){\n                const row = startRow + i;\n                const col = startCol + j;\n                // if (row <= this.totalRowBounds && col <= this.totalColBounds) {\n                changes.push({\n                    row: row,\n                    col: col,\n                    previousValue: this.getCellText(row, col),\n                    newValue: rowData[j],\n                    changeKind: 'valchange'\n                });\n                this.setText(row, col, rowData[j]);\n                this.renderCell(row, col);\n            // }\n            }\n        }\n        // Record the changes in the undo stack\n        if (changes.length > 0) this.recordChanges(changes);\n    }\n    // Function to record a change in the history\n    recordChanges(changes) {\n        // Clear redo stack when a new change is made\n        this.redoStack = [];\n        // Add the change to the undo stack\n        this.undoStack.push(changes);\n        // Limit the size of the undo stack\n        if (this.undoStack.length > this.MAX_HISTORY_SIZE) this.undoStack.shift(); // Remove the oldest change\n    }\n    setWidthOverride(col, width) {\n        if (width == null) delete this.widthOverrides[col];\n        else this.widthOverrides[col] = width;\n    }\n    setHeightOverride(row, height) {\n        if (height == null) delete this.heightOverrides[row];\n        else this.heightOverrides[row] = height;\n    }\n    // Function to undo the last change\n    undo() {\n        if (this.undoStack.length === 0) return; // Nothing to undo\n        const changes = this.undoStack.pop(); // Get the last change\n        const redoChanges = [];\n        const updatedCells = [];\n        let rerender = false;\n        for (const change of changes){\n            const { row: row, col: col, previousValue: previousValue, changeKind: changeKind } = change;\n            if (changeKind === 'merge') {\n                this.unmergeSelectedCells(change.bounds, false);\n                rerender = true;\n                redoChanges.push({\n                    changeKind: 'unmerge',\n                    bounds: change.bounds\n                });\n            } else if (changeKind === 'unmerge') {\n                this.mergeSelectedCells(change.bounds, false);\n                rerender = true;\n                redoChanges.push({\n                    changeKind: 'merge',\n                    bounds: change.bounds\n                });\n            } else if (changeKind === 'deleteEntireRow') {\n                this.insertRow(change.row, change.rowData, false, change.heightOverride);\n                rerender = true;\n                // this.data.addRow(change.row, change.rowData);\n                redoChanges.push({\n                    changeKind: 'deleteEntireRow',\n                    row: change.row,\n                    rowData: change.rowData,\n                    heightOverride: change.heightOverride\n                });\n            } else if (changeKind === 'deleteEntireCol') {\n                this.insertCol(change.col, change.colData, false, change.widthOverride);\n                rerender = true;\n                redoChanges.push({\n                    changeKind: 'deleteEntireCol',\n                    col: change.col,\n                    colData: change.colData,\n                    widthOverride: change.widthOverride\n                });\n            } else if (changeKind === 'insertEntireRow') {\n                this.deleteRow(change.row, false);\n                rerender = true;\n                redoChanges.push({\n                    changeKind: 'insertEntireRow',\n                    row: change.row\n                });\n            } else if (changeKind === 'insertEntireCol') {\n                this.deleteCol(change.col, false);\n                rerender = true;\n                redoChanges.push({\n                    changeKind: 'insertEntireCol',\n                    col: change.col\n                });\n            } else if (changeKind === 'widthOverrideUpdate') {\n                const prev = this.widthOverrides[change.col];\n                this.setWidthOverride(change.col, change.value);\n                this.updateWidthAccum();\n                this.renderHeaders();\n                rerender = true;\n                redoChanges.push({\n                    changeKind: 'widthOverrideUpdate',\n                    col: change.col,\n                    value: prev\n                });\n            } else if (changeKind === 'heightOverrideUpdate') {\n                const prev = this.heightOverrides[change.row];\n                this.setHeightOverride(change.row, change.value);\n                this.updateHeightAccum();\n                this.renderRowNumbers();\n                rerender = true;\n                redoChanges.push({\n                    changeKind: 'heightOverrideUpdate',\n                    row: change.row,\n                    value: prev\n                });\n            } else if (changeKind === 'valchange') {\n                // Record the current value for redo\n                redoChanges.push({\n                    row: row,\n                    col: col,\n                    previousValue: this.getCellText(row, col),\n                    newValue: previousValue,\n                    changeKind: 'valchange'\n                });\n                // Revert the cell to its previous value\n                this.setCell(row, col, 'text', previousValue);\n                updatedCells.push([\n                    row,\n                    col\n                ]);\n            } else console.log('UNHANDLED UNDO:', changeKind);\n        }\n        this.redoStack.push(redoChanges);\n        if (rerender) this.forceRerender();\n        else this.rerenderCells(updatedCells);\n        this.updateSelection();\n    }\n    rerenderCells(arr = []) {\n        for (let [row, col] of arr)this.renderCell(row, col);\n        this.rerenderMerges(arr);\n    }\n    rerenderMerges(arr = []) {\n        const mergeSet = new Set();\n        for (let [row, col] of arr){\n            const merge = this.getMerge(row, col);\n            if (!merge) continue;\n            mergeSet.add(merge);\n            for (let block of this.getBlocksInMerge(merge))this.renderCell(merge.startRow, merge.startCol, block);\n        }\n    }\n    // Function to redo the last undone change\n    redo() {\n        if (this.redoStack.length === 0) return; // Nothing to redo\n        const changes = this.redoStack.pop(); // Get the last undone change\n        const undoChanges = [];\n        const updatedCells = [];\n        let rerender = false;\n        for (const change of changes){\n            const { row: row, col: col, newValue: newValue, previousValue: previousValue, changeKind: changeKind } = change;\n            if (changeKind === 'unmerge') {\n                this.mergeSelectedCells(change.bounds, false);\n                rerender = true;\n                undoChanges.push({\n                    changeKind: 'merge',\n                    bounds: change.bounds\n                });\n            } else if (changeKind === 'merge') {\n                this.unmergeSelectedCells(change.bounds, false);\n                rerender = true;\n                undoChanges.push({\n                    changeKind: 'unmerge',\n                    bounds: change.bounds\n                });\n            } else if (changeKind === 'deleteEntireRow') {\n                this.deleteRow(change.row, false);\n                rerender = true;\n                undoChanges.push({\n                    changeKind: 'deleteEntireRow',\n                    row: change.row,\n                    rowData: change.rowData,\n                    heightOverride: change.heightOverride\n                });\n            } else if (changeKind === 'deleteEntireCol') {\n                this.deleteCol(change.col, false);\n                rerender = true;\n                undoChanges.push({\n                    changeKind: 'deleteEntireCol',\n                    col: change.col,\n                    colData: change.colData,\n                    widthOverride: change.widthOverride\n                });\n            } else if (changeKind === 'insertEntireRow') {\n                this.insertRow(change.row, null, false);\n                rerender = true;\n                undoChanges.push({\n                    changeKind: 'insertEntireRow',\n                    row: change.row\n                });\n            } else if (changeKind === 'insertEntireCol') {\n                this.insertCol(change.col, null, false);\n                rerender = true;\n                undoChanges.push({\n                    changeKind: 'insertEntireCol',\n                    col: change.col\n                });\n            } else if (changeKind === 'widthOverrideUpdate') {\n                const prev = this.widthOverrides[change.col];\n                this.setWidthOverride(change.col, change.value);\n                this.updateWidthAccum();\n                this.renderHeaders();\n                rerender = true;\n                undoChanges.push({\n                    changeKind: 'widthOverrideUpdate',\n                    col: change.col,\n                    value: prev\n                });\n            } else if (changeKind === 'heightOverrideUpdate') {\n                const prev = this.heightOverrides[change.row];\n                this.setHeightOverride(change.row, change.value);\n                this.updateHeightAccum();\n                this.renderRowNumbers();\n                rerender = true;\n                undoChanges.push({\n                    changeKind: 'heightOverrideUpdate',\n                    row: change.row,\n                    value: prev\n                });\n            } else if (changeKind === 'valchange') {\n                // Record the current value for undo\n                undoChanges.push({\n                    row: row,\n                    col: col,\n                    previousValue: this.getCellText(row, col),\n                    newValue: newValue,\n                    changeKind: 'valchange'\n                });\n                // Apply the new value to the cell\n                this.setCell(row, col, 'text', previousValue);\n                updatedCells.push([\n                    row,\n                    col\n                ]);\n            } else console.log('UNHANDLED REDO:', changeKind);\n        }\n        this.undoStack.push(undoChanges);\n        if (rerender) this.forceRerender();\n        else this.rerenderCells(updatedCells);\n        this.updateSelection();\n    }\n    rowColInBounds(row, col, bounds) {\n        if (bounds == null) return false;\n        return row <= bounds.endRow && row >= bounds.startRow && col <= bounds.endCol && col >= bounds.startCol;\n    }\n    // Function to hide the context menu\n    hideContextMenu() {\n        this.ctxmenu.hide();\n    }\n    handleCellDblClick(e) {\n        if (e.target === this.editInput) return;\n        const { row: row, col: col } = this.getCellFromEvent(e);\n        if (row === -1 || col === -1) return;\n        this.startCellEdit(row, col);\n    }\n    openFormatMenu() {\n        const { win: win, addListener: addListener } = (0, $f1a08cb39f53ec5a$export$ca03e75f2d79dc0e)();\n        addListener((type, value)=>{\n            const selectedCells = this.getSelectedCells();\n            this.setCells(selectedCells, type, value);\n        });\n    }\n    forceRerender() {\n        this.updateVisibleGrid(true);\n    }\n    handleKeyDown(e) {\n        const key = e.key.toLowerCase();\n        if (key === 'f2' && this.selectionStart) {\n            e.preventDefault();\n            if (this.editingCell) return;\n            this.startCellEdit(this.selectionStart.row, this.selectionStart.col);\n        } else if (key === 'f3') {\n            if (this.editingCell) return;\n            this.openFormatMenu();\n            e.preventDefault();\n        } else if (key === 'escape' && this.editInput.style.display !== 'none') this.cancelCellEdit();\n        else if (key === 'delete') {\n            if (this.editingCell) return;\n            this.clearSelectedCells();\n        } else if (key === 'x' && e.ctrlKey) {\n            if (this.editingCell) return;\n            document.execCommand('copy');\n            this.clearSelectedCells();\n        } else if (key === 's' && e.ctrlKey) {\n            if (this.editingCell) return;\n            const data = this.data.save();\n            const save = {\n                mergedCells: this.mergedCells,\n                heightOverrides: this.heightOverrides,\n                widthOverrides: this.widthOverrides,\n                gridlinesOn: this.gridlinesOn,\n                data: data\n            };\n            // localStorage.setItem('data-save', data)\n            localStorage.setItem('sheet-state', JSON.stringify(save));\n            e.preventDefault();\n        } else if (key === 'l' && e.ctrlKey) {\n            if (this.editingCell) return;\n            this.restoreSave();\n            e.preventDefault();\n        } else if (e.ctrlKey || e.metaKey) {\n            if (this.editingCell) return;\n            if (key === 'y' || e.shiftKey && key === 'z') {\n                e.preventDefault(); // Prevent default behavior\n                this.redo();\n            } else if (key === 'z') {\n                e.preventDefault(); // Prevent default behavior (e.g., browser undo)\n                this.undo();\n            }\n        } else if (key === 'arrowup' || key === 'arrowdown' || key === 'arrowleft' || key === 'arrowright' || key === 'enter') {\n            if (!this.selectionEnd || this.editingCell) return;\n            e.preventDefault();\n            this.handleArrowKeyDown(e);\n        } else if (this.selectionStart && e.key?.length === 1) {\n            if (this.editingCell) return;\n            this.startCellEdit(this.selectionStart.row, this.selectionStart.col, e.key);\n        }\n    }\n    restoreSave() {\n        let save = localStorage.getItem('sheet-state');\n        if (save) {\n            try {\n                save = JSON.parse(save);\n                if (!save) return false;\n            } catch  {\n                return false;\n            }\n            this.widthOverrides = save.widthOverrides;\n            this.heightOverrides = save.heightOverrides;\n            this.mergedCells = save.mergedCells;\n            this.gridlinesOn = save.gridlinesOn;\n            const g = new (0, $9da0d049db75c76f$export$2e2bcd8739ae039)();\n            g.restore(save.data);\n            this.setData(g);\n            this.updateSelection();\n            return true;\n        }\n        return false;\n    }\n    handleArrowKeyDown(e) {\n        if (!this.selectionEnd || !this.selectionStart) return;\n        const deltas = {\n            'ArrowUp': [\n                -1,\n                0\n            ],\n            'ArrowDown': [\n                1,\n                0\n            ],\n            'ArrowLeft': [\n                0,\n                -1\n            ],\n            'ArrowRight': [\n                0,\n                1\n            ],\n            'Enter': e.shiftKey ? [\n                -1,\n                0\n            ] : [\n                1,\n                0\n            ]\n        };\n        const curMerge = this.getMerge(this.selectionEnd.row, this.selectionEnd.col);\n        let row = this.selectionEnd.row + deltas[e.key][0];\n        let col = this.selectionEnd.col + deltas[e.key][1];\n        const merge = this.getMerge(row, col);\n        if (e.shiftKey) {\n            // TODO: do in less bruteforce way\n            const prevRect = JSON.stringify(this.selectionBoundRect);\n            if (e.key === 'ArrowUp' || e.key === 'Enter' && e.shiftKey) {\n                let curRect;\n                while(row > 0){\n                    curRect = this.getBoundingRectCells(this.selectionStart.row, this.selectionStart.col, row, col);\n                    if (prevRect !== JSON.stringify(curRect)) break;\n                    row--;\n                }\n            } else if (e.key === 'ArrowDown' || e.key === 'Enter' && !e.shiftKey) {\n                let curRect;\n                while(row < this.getTotalRows()){\n                    curRect = this.getBoundingRectCells(this.selectionStart.row, this.selectionStart.col, row, col);\n                    if (prevRect !== JSON.stringify(curRect)) break;\n                    row++;\n                }\n            } else if (e.key === 'ArrowLeft') {\n                let curRect;\n                while(col > 0){\n                    curRect = this.getBoundingRectCells(this.selectionStart.row, this.selectionStart.col, row, col);\n                    if (prevRect !== JSON.stringify(curRect)) break;\n                    col--;\n                }\n            } else if (e.key === 'ArrowRight') {\n                let curRect;\n                while(col < this.getTotalCols()){\n                    curRect = this.getBoundingRectCells(this.selectionStart.row, this.selectionStart.col, row, col);\n                    if (prevRect !== JSON.stringify(curRect)) break;\n                    col++;\n                }\n            }\n        } else if (merge && merge === curMerge) {\n            if (e.key === 'ArrowUp') row = merge.startRow - 1;\n            else if (e.key === 'ArrowDown' || e.key === 'Enter') row = merge.endRow + 1;\n            else if (e.key === 'ArrowLeft') col = merge.startCol - 1;\n            else if (e.key === 'ArrowRight') col = merge.endCol + 1;\n        }\n        row = Math.max(0, row);\n        row = Math.min(row, this.totalRowBounds - 1);\n        col = Math.max(0, col);\n        col = Math.min(col, this.totalColBounds - 1);\n        if (e.shiftKey && e.key !== 'Enter') this.selectionEnd = {\n            row: row,\n            col: col\n        };\n        this.selectCell({\n            row: row,\n            col: col,\n            continuation: e.shiftKey && e.key !== 'Enter'\n        });\n    }\n    inVisibleBounds(row, col) {\n        const { row: visStartRow, col: visStartCol } = this.getTopLeftBounds();\n        const { row: visEndRow, col: visEndCol } = this.getBottomRightBounds();\n        return row >= visStartCol && row <= visEndRow && col >= visStartCol && col <= visEndCol;\n    }\n    scrollTo(row, col, delta) {\n        if (row < 0 || row >= this.totalRows || col < 0 || col >= this.totalCols) return;\n        const merge = this.getMerge(row, col);\n        let left, top, width, height, value;\n        if (merge) {\n            left = this.getWidthOffset(merge.startCol, true);\n            top = this.getHeightOffset(merge.startRow, true);\n            width = this.getMergeWidth(merge);\n            height = this.getMergeHeight(merge);\n            value = this.getCellText(merge.startRow, merge.startCol);\n        } else {\n            left = this.getWidthOffset(col, true);\n            top = this.getHeightOffset(row, true);\n            width = this.getCellWidth(row, col);\n            height = this.rowHeight(row);\n            value = this.getCellText(row, col);\n        }\n        if (delta === 'ArrowUp') this.container.scrollTo({\n            top: top - 100,\n            behavior: 'smooth'\n        });\n        else if (delta === 'ArrowDown') this.container.scrollTo({\n            top: // top: top + 100,\n            top,\n            behavior: 'smooth'\n        });\n        else if (delta == 'ArrowLeft') this.container.scrollTo({\n            left: // left: left - 100,\n            left,\n            behavior: 'smooth'\n        });\n        else if (delta === 'ArrowRight') this.container.scrollTo({\n            // left: left + width,\n            left: left - this.container.clientWidth - width,\n            behavior: 'smooth'\n        });\n    }\n    getSelectedCells() {\n        if (!this.selectionBoundRect) return [];\n        const { startRow: startRow, startCol: startCol, endRow: endRow, endCol: endCol } = this.selectionBoundRect;\n        const cells = this.data.getCellsForce(startRow, startCol, endRow, endCol).filter((cell)=>this.isValid(cell.row, cell.col));\n        return cells;\n    }\n    isValid(row, col) {\n        const merge = this.getMerge(row, col);\n        if (!merge) return true;\n        return merge.startRow == row && merge.startCol == col;\n    }\n    getTotalRows() {\n        return this.totalRows;\n    }\n    getTotalCols() {\n        return this.totalCols;\n    }\n    get totalRows() {\n        return Math.max(this.data?.rowCount || 0, this.blockRows) + this.blockRows * this.padding;\n    }\n    get totalCols() {\n        return Math.max(this.data?.colCount || 0, this.blockCols) + this.blockCols * this.padding;\n    }\n    getMerge(row, col) {\n        // Check if the cell is part of a merged range\n        return this.mergedCells.find((merged)=>row >= merged.startRow && row <= merged.endRow && col >= merged.startCol && col <= merged.endCol);\n    }\n    getMergeWidth(merge) {\n        return this.getWidthBetweenColumns(merge.startCol, merge.endCol + 1);\n    }\n    getMergeHeight(merge) {\n        return this.getHeightBetweenRows(merge.startRow, merge.endRow + 1);\n    }\n    startCellEdit(row, col, startingValue) {\n        if (row < 0 || row > this.totalRowBounds || col < 0 || col > this.totalColBounds) return;\n        const merge = this.getMerge(row, col);\n        let left, top, width, height, value;\n        if (merge) {\n            left = this.getWidthOffset(merge.startCol, true);\n            top = this.getHeightOffset(merge.startRow, true);\n            width = this.getMergeWidth(merge);\n            height = this.getMergeHeight(merge);\n            value = startingValue != null ? '' : this.getCellText(merge.startRow, merge.startCol);\n            row = merge.startRow, col = merge.startCol;\n        } else {\n            left = this.getWidthOffset(col, true);\n            top = this.getHeightOffset(row, true);\n            width = this.getCellWidth(row, col);\n            height = this.rowHeight(row);\n            value = startingValue != null ? '' : this.getCellText(row, col);\n        }\n        // Set up edit input\n        this.editInput.value = value;\n        this.editInput.style.left = `${left}px`;\n        this.editInput.style.top = `${top}px`;\n        this.editInput.style.minWidth = `${width}px`;\n        this.editInput.style.width = value.length + 1 + \"ch\";\n        this.editInput.style.height = `${height}px`;\n        this.editInput.style.display = 'block';\n        this.editInput.focus();\n        // Store edit state\n        this.editingCell = {\n            row: row,\n            col: col\n        };\n        this.editInput.onblur = this.finishCellEdit.bind(this);\n        this.editInput.onkeydown = (e)=>{\n            if (e.key === 'Enter') this.finishCellEdit();\n            else this.editInput.style.width = this.editInput.value.length + 1 + \"ch\";\n        };\n    }\n    setText(row, col, text) {\n        this.setCell(row, col, 'text', text);\n    // this.data?.setCellProperty(row, col, 'text', text);\n    }\n    setCell(row, col, field, value) {\n        const cell = this.getCell(row, col);\n        if (!cell) return;\n        cell[field] = value;\n        if (!this.data.has(row, col)) this.data.set(row, col, cell);\n    }\n    setCells(cells, field, value) {\n        for (let cell of cells){\n            this.setCell(cell.row, cell.col, field, value);\n            this.renderCell(cell.row, cell.col);\n        }\n        if (field === 'cellType') {\n            console.log('forcing rerender');\n            this.forceRerender();\n        }\n    }\n    // mergeInCell(row: number, col: number, data: any) {\n    //     const cell = this.getCell(row, col);\n    //     if (!cell) return;\n    //     Object.assign(cell, data);\n    // }\n    finishCellEdit() {\n        if (!this.editingCell) return;\n        const { row: row, col: col } = this.editingCell;\n        if (this.editInput.value === this.getCellText(row, col)) {\n            this.cancelCellEdit();\n            return;\n        }\n        this.recordChanges([\n            {\n                row: row,\n                col: col,\n                previousValue: this.getCellText(row, col),\n                newValue: this.editInput.value,\n                changeKind: 'valchange'\n            }\n        ]);\n        this.setText(row, col, this.editInput.value);\n        // Hide input and redraw cell\n        this.cancelCellEdit();\n        const merge = this.getMerge(row, col);\n        if (merge) for (let block of this.getBlocksInMerge(merge))this.renderCell(merge.startRow, merge.startCol, block);\n        else this.renderCell(row, col);\n    }\n    getBlocksInMerge(merge) {\n        const blockSet = new Set();\n        for(let i = merge.startRow; i <= merge.endRow; i++)for(let j = merge.startCol; j <= merge.endCol; j++){\n            const block = this.getBlockOrSubBlock(i, j);\n            if (!block) continue;\n            if (blockSet.has(block)) continue;\n            blockSet.add(block);\n        }\n        return blockSet;\n    }\n    cancelCellEdit() {\n        this.editInput.style.display = 'none';\n        this.editingCell = null;\n        this.editInput.onblur = null;\n        this.editInput.onkeydown = null;\n    }\n    updateRenderingQuality() {\n        if (this.lastBlockCanvases !== this.blockCanvases()) {\n            console.log(\"RESIZE\");\n            this.lastBlockCanvases = this.blockCanvases();\n            this.forceRerender();\n        } else if (Math.abs(window.devicePixelRatio - this.lastDevicePixelRatio) > 0.00) {\n            // Only update if scale changed significantly\n            this.lastDevicePixelRatio = window.devicePixelRatio;\n            console.log('update render quality');\n            requestAnimationFrame(()=>{\n                if (this.busy) return;\n                const createTimeout = ()=>setTimeout(()=>{\n                        this.busy = true;\n                        this.activeBlocks.forEach((block)=>{\n                            if (block.subBlocks.length < 2) this.renderBlock(block, true);\n                            else block.subBlocks.forEach((subBlock)=>{\n                                this.renderBlock(subBlock, true);\n                            });\n                        });\n                        this.busy = false;\n                        this.rqtimeout = null;\n                    }, 200);\n                if (this.rqtimeout) clearTimeout(this.rqtimeout);\n                this.rqtimeout = createTimeout();\n            });\n        }\n    }\n    createSelectionHandle() {\n        this.selectionHandle = document.createElement('div');\n        this.selectionHandle.className = 'selection-handle bottom-right';\n        this.selectionHandle.style.display = 'none';\n        this.selectionLayer.appendChild(this.selectionHandle);\n        // Add drag event for the handle\n        this.selectionHandle.addEventListener('mousedown', (e)=>{\n            e.stopPropagation();\n            if (!this.selectedCell) return;\n            this.isResizing = true;\n            this.resizeStart = {\n                x: e.clientX,\n                y: e.clientY\n            };\n            this.resizeInitialSize = {\n                width: this.selectedCell.offsetWidth,\n                height: this.selectedCell.offsetHeight\n            };\n        });\n    }\n    handleMouseDown(e) {\n        if (e.target.closest('.header-cell') || e.target.closest('.row-number-container') || e.target.closest('.corner-cell')) {\n            this.hideContextMenu();\n            return;\n        }\n        if (e.target === this.container) return;\n        if (e.target === this.editInput) return;\n        if (this.draggingHeader) return;\n        if (e.target !== this.ctxmenu.container && !this.ctxmenu.container.contains(e.target)) this.hideContextMenu();\n        if (e.button === 2) {\n            const x = e.clientX;\n            const y = e.clientY;\n            const { row: row, col: col } = this.getCellFromEvent(e);\n            this.showContextMenu(x, y, row, col);\n            return;\n        }\n        if (e.button !== 0) return;\n        this.handleSelectionMouseDown(e);\n    }\n    handleSelectionMouseDown(e) {\n        const { row: row, col: col } = this.getCellFromEvent(e);\n        if (e.ctrlKey && this.selectionStart) {\n            this.selectionStart = null;\n            this.selectionEnd = null;\n            this.selectionBoundRect = null;\n            this.isSelecting = true;\n            this.addNewSelection();\n            this.selectCell({\n                row: row,\n                col: col\n            });\n        } else if (e.shiftKey && this.selectionStart) {\n            this.isSelecting = true;\n            this.selectCell({\n                row: row,\n                col: col,\n                continuation: true\n            }); // kill old selections start new\n        } else {\n            this.isSelecting = true;\n            this.selectCell({\n                row: row,\n                col: col,\n                clear: true\n            });\n        }\n    }\n    selectCell({ row: row, col: col, continuation: continuation = false, clear: clear = false }) {\n        if (row === -1 || col === -1) return;\n        if (clear) {\n            this.selectionLayer.innerHTML = '';\n            this.addNewSelection();\n        }\n        if (!this.activeSelection) this.addNewSelection();\n        if (!continuation) this.selectionStart = {\n            row: row,\n            col: col\n        };\n        this.selectionEnd = {\n            row: row,\n            col: col\n        };\n        if (!this.selectionStart) return;\n        this.selectionBoundRect = this.getBoundingRectCells(this.selectionStart.row, this.selectionStart.col, row, col);\n        this.updateSelection();\n    // this.forceRerender(); // debug purposes, remove\n    }\n    getCellsInRange(startRow, startCol, endRow, endCol) {\n        const cells = [];\n        for(let i = startRow; i <= endRow; i++)for(let j = startCol; j <= endCol; j++)cells.push(this.getCell(i, j));\n        return cells;\n    }\n    getMergesInRange({ startRow: startRow, startCol: startCol, endRow: endRow, endCol: endCol }) {\n        const merges = new Set();\n        for(let i = startRow; i <= endRow; i++)for(let j = startCol; j <= endCol; j++){\n            const merge = this.getMerge(i, j);\n            if (merge) merges.add(merge);\n        }\n        return [\n            ...merges.values()\n        ];\n    }\n    normalizeCoordinates({ startRow: startRow, startCol: startCol, endRow: endRow, endCol: endCol }) {\n        const _startRow = Math.min(startRow, endRow);\n        const _endRow = Math.max(startRow, endRow);\n        const _startCol = Math.min(startCol, endCol);\n        const _endCol = Math.max(startCol, endCol);\n        return {\n            startRow: _startRow,\n            startCol: _startCol,\n            endRow: _endRow,\n            endCol: _endCol\n        };\n    }\n    getBoundingRectCells(startRow, startCol, endRow, endCol) {\n        ({ startRow: startRow, startCol: startCol, endRow: endRow, endCol: endCol } = this.normalizeCoordinates({\n            startRow: startRow,\n            startCol: startCol,\n            endRow: endRow,\n            endCol: endCol\n        }));\n        const merges = this.getMergesInRange({\n            startRow: startRow,\n            startCol: startCol,\n            endRow: endRow,\n            endCol: endCol\n        });\n        if (merges.length === 0) return {\n            startRow: startRow,\n            startCol: startCol,\n            endRow: endRow,\n            endCol: endCol\n        };\n        for (const merge of merges){\n            startRow = Math.min(startRow, merge.startRow);\n            startCol = Math.min(startCol, merge.startCol);\n            endRow = Math.max(endRow, merge.endRow);\n            endCol = Math.max(endCol, merge.endCol);\n        }\n        return {\n            startRow: startRow,\n            startCol: startCol,\n            endRow: endRow,\n            endCol: endCol\n        };\n    }\n    handleMouseMove(e) {\n        if (this.draggingHeader) {\n            const scrollLeft = this.container.scrollLeft;\n            this.draggingHeader.el.style.left = `${scrollLeft + e.clientX - 8}px`;\n        } else if (this.draggingRow) {\n            const scrollTop = this.container.scrollTop;\n            const rect = this.container.getBoundingClientRect();\n            this.draggingRow.el.style.top = `${scrollTop + e.clientY - this.headerRowHeight - rect.y - 5}px`;\n        } else if (this.isSelecting) {\n            const { row: row, col: col } = this.getCellFromEvent(e);\n            if (row !== -1 && col !== -1) {\n                this.selectionEnd = {\n                    row: row,\n                    col: col\n                };\n                if (!this.selectionStart) return;\n                this.selectionBoundRect = this.getBoundingRectCells(this.selectionStart.row, this.selectionStart.col, row, col);\n                this.updateSelection();\n            }\n        } else if (this.isResizing) {\n            const dx = e.clientX - this.resizeStart.x;\n            const dy = e.clientY - this.resizeStart.y;\n            const newWidth = Math.max(this.cellWidth, this.resizeInitialSize.width + dx);\n            const newHeight = Math.max(this.cellHeight, this.resizeInitialSize.height + dy);\n            if (!this.selectedCell) return;\n            this.selectedCell.style.width = `${newWidth}px`;\n            this.selectedCell.style.height = `${newHeight}px`;\n            // Position the handle\n            this.positionSelectionHandle();\n        }\n    }\n    handleMouseUp(e) {\n        if (this.isSelecting) {\n            this.isSelecting = false;\n            const { row: row, col: col } = this.getCellFromEvent(e);\n            if (row !== -1 && col !== -1) {\n                if (!this.selectionStart) return;\n                this.selectionEnd = {\n                    row: row,\n                    col: col\n                };\n                const rect = this.getBoundingRectCells(this.selectionStart.row, this.selectionStart.col, row, col);\n                this.updateSelection();\n            }\n        } else if (this.isResizing) this.isResizing = false;\n        else if (this.draggingHeader) {\n            const draggingHeader = this.draggingHeader;\n            const col = this.draggingHeader.col;\n            this.draggingHeader = null;\n            const scrollLeft = this.container.scrollLeft;\n            const diff = scrollLeft + e.clientX - this.getWidthOffset(col + 1, true);\n            const prevOverride = this.widthOverrides[col];\n            const change = this.widthOverrides[col] ? this.widthOverrides[col] + diff : this.getCellWidth(col) + diff;\n            if (change <= 1) {\n                draggingHeader.el.style.left = draggingHeader.origLeft;\n                return;\n            }\n            this.setWidthOverride(col, change);\n            this.recordChanges([\n                {\n                    changeKind: 'widthOverrideUpdate',\n                    col: col,\n                    value: prevOverride\n                }\n            ]);\n            this.updateWidthAccum();\n            this.renderHeaders();\n            this.forceRerender();\n            this.updateSelection();\n            e.stopPropagation();\n        } else if (this.draggingRow) {\n            const draggingRow = this.draggingRow;\n            const row = this.draggingRow.row;\n            this.draggingRow = null;\n            const scrollTop = this.container.scrollTop;\n            const rect = this.container.getBoundingClientRect();\n            const diff = scrollTop + e.clientY - rect.y - this.getHeightOffset(row + 1, true);\n            const prevOverride = this.heightOverrides[row];\n            const change = this.heightOverrides[row] ? this.heightOverrides[row] + diff : this.getCellHeight(row) + diff;\n            if (change <= 1) {\n                draggingRow.el.style.top = draggingRow.origTop;\n                return;\n            }\n            this.setHeightOverride(row, change);\n            this.recordChanges([\n                {\n                    changeKind: 'heightOverrideUpdate',\n                    row: row,\n                    value: prevOverride\n                }\n            ]);\n            this.updateHeightAccum();\n            this.renderRowNumbers();\n            this.forceRerender();\n            this.updateSelection();\n            e.stopPropagation();\n        }\n    }\n    getColWidth(col) {\n        return this.widthOverrides[col] ?? this.cellWidth;\n    }\n    getTopLeftBounds() {\n        const rect = this.container.getBoundingClientRect();\n        const scrollLeft = this.container.scrollLeft;\n        const scrollTop = this.container.scrollTop;\n        // Adjust for header and row numbers\n        const x = Math.max(0, this.rowNumberWidth + 8 - scrollLeft) - rect.left + scrollLeft - this.rowNumberWidth; // 50 for row numbers\n        const y = this.headerRowHeight + 8 - rect.top + scrollTop - this.headerRowHeight;\n        if (x < 0 || y < 0) return {\n            row: -1,\n            col: -1\n        };\n        // Find column\n        let col = this.bsearch(this.widthAccum, x + this.rowNumberWidth) - 1;\n        // Find row\n        const row = this.bsearch(this.heightAccum, y + this.headerRowHeight) - 1;\n        return {\n            row: Math.min(row, this.totalRowBounds - 1),\n            col: Math.min(col, this.totalColBounds - 1)\n        };\n    }\n    getBottomRightBounds() {\n        const rect = this.container.getBoundingClientRect();\n        const scrollLeft = this.container.scrollLeft;\n        const scrollTop = this.container.scrollTop;\n        // Adjust for header and row numbers\n        const x = rect.right - rect.left + scrollLeft - (this.rowNumberWidth + 8);\n        const y = rect.bottom - rect.top + scrollTop - this.headerRowHeight;\n        if (x < 0 || y < 0) return {\n            row: -1,\n            col: -1\n        };\n        // Find column\n        let col = this.bsearch(this.widthAccum, x + this.rowNumberWidth) - 1;\n        // Find row\n        const row = this.bsearch(this.heightAccum, y + this.headerRowHeight) - 1;\n        return {\n            row: Math.min(row, this.totalRowBounds - 1),\n            col: Math.min(col, this.totalColBounds - 1)\n        };\n    }\n    bsearch(arr, target) {\n        function condition(i) {\n            return target < arr[i];\n        }\n        let left = 0;\n        let right = arr.length - 1;\n        while(left < right){\n            let mid = Math.floor(left + (right - left) / 2);\n            if (condition(mid)) right = mid;\n            else left = mid + 1;\n        }\n        return left;\n    }\n    getCellFromEvent(e) {\n        const rect = this.container.getBoundingClientRect();\n        const scrollLeft = this.container.scrollLeft;\n        const scrollTop = this.container.scrollTop;\n        // Adjust for header and row numbers\n        const x = e.clientX - rect.left + scrollLeft - this.rowNumberWidth;\n        const y = e.clientY - rect.top + scrollTop - this.headerRowHeight; // 30 for header\n        if (x < 0 || y < 0) return {\n            row: -1,\n            col: -1\n        };\n        let col = this.bsearch(this.widthAccum, x + this.rowNumberWidth) - 1;\n        let row = this.bsearch(this.heightAccum, y + this.headerRowHeight) - 1;\n        return {\n            row: Math.min(row, this.totalRowBounds - 1),\n            col: Math.min(col, this.totalColBounds - 1)\n        };\n    }\n    mergeSelectedCells(bounds = null, recordChanges = true) {\n        if (!this.selectionStart || !this.selectionEnd) return;\n        let sr = this.selectionStart.row, sc = this.selectionStart.col, er = this.selectionEnd.row, ec = this.selectionEnd.col;\n        if (bounds) sr = bounds.startRow, sc = bounds.startCol, er = bounds.endRow, ec = bounds.endCol;\n        // Normalize selection coordinates\n        const startRow = Math.min(sr, er);\n        const endRow = Math.max(sr, er);\n        const startCol = Math.min(sc, ec);\n        const endCol = Math.max(sc, ec);\n        // Check if the selected range overlaps with existing merged cells\n        for (const merged of this.mergedCells)if (startRow <= merged.endRow && endRow >= merged.startRow && startCol <= merged.endCol && endCol >= merged.startCol) {\n            alert('Cannot merge cells that overlap with existing merged cells.');\n            return;\n        }\n        // Add the merged range to the list\n        this.mergedCells.push({\n            startRow: startRow,\n            endRow: endRow,\n            startCol: startCol,\n            endCol: endCol\n        });\n        recordChanges && this.recordChanges([\n            {\n                changeKind: 'merge',\n                bounds: {\n                    startRow: startRow,\n                    endRow: endRow,\n                    startCol: startCol,\n                    endCol: endCol\n                }\n            }\n        ]);\n        recordChanges && this.forceRerender();\n    }\n    unmergeSelectedCells(bounds = null, recordChanges = true) {\n        if (!this.selectionStart || !this.selectionEnd) return;\n        let sr = this.selectionStart.row, sc = this.selectionStart.col, er = this.selectionEnd.row, ec = this.selectionEnd.col;\n        if (bounds) sr = bounds.startRow, sc = bounds.startCol, er = bounds.endRow, ec = bounds.endCol;\n        // Normalize selection coordinates\n        const startRow = Math.min(sr, er);\n        const endRow = Math.max(sr, er);\n        const startCol = Math.min(sc, ec);\n        const endCol = Math.max(sc, ec);\n        let merged;\n        for(let i = 0; i < this.mergedCells.length; i++){\n            merged = this.mergedCells[i];\n            if (startRow <= merged.endRow && endRow >= merged.startRow && startCol <= merged.endCol && endCol >= merged.startCol) this.mergedCells.splice(i, 1);\n        }\n        if (!merged) return;\n        recordChanges && this.recordChanges([\n            {\n                changeKind: 'unmerge',\n                bounds: {\n                    startRow: merged.startRow,\n                    endRow: merged.endRow,\n                    startCol: merged.startCol,\n                    endCol: merged.endCol\n                }\n            }\n        ]);\n        recordChanges && this.forceRerender();\n    }\n    addNewSelection() {\n        const newSelection = document.createElement('div');\n        this.selectionLayer.appendChild(newSelection);\n        this.activeSelection = newSelection;\n        return newSelection;\n    }\n    updateSelection() {\n        if (!this.activeSelection) return;\n        // Clear previous selection\n        this.activeSelection.innerHTML = '';\n        if (!this.selectionHandle) return;\n        this.selectionHandle.style.display = 'none';\n        if (!this.selectionBoundRect) return;\n        const { startRow: startRow, startCol: startCol, endRow: endRow, endCol: endCol } = this.selectionBoundRect;\n        let left = this.getWidthOffset(startCol);\n        let width = this.getWidthBetweenColumns(startCol, endCol + 1);\n        const top = this.getHeightOffset(startRow); // Below header\n        const height = this.getHeightBetweenRows(startRow, endRow + 1);\n        // Create selection element\n        this.selectedCell = document.createElement('div');\n        this.selectedCell.className = 'selected-cell';\n        this.selectedCell.style.left = `${left}px`;\n        this.selectedCell.style.top = `${top}px`;\n        this.selectedCell.style.width = `${width + 1}px`;\n        this.selectedCell.style.height = `${height + 1}px`;\n        this.activeSelection.appendChild(this.selectedCell);\n        // Add resize handle\n        this.positionSelectionHandle();\n        this.selectionHandle.style.display = 'block';\n        for (let col of this.selectedCols)if (col < startCol || col > endCol) {\n            this.selectedCols.delete(col);\n            const el = this.headerContainer.querySelector(`[data-hccol='${col}']`);\n            if (!el) continue;\n            el.classList.remove('col-selected');\n            const handle = el.nextSibling;\n            if (handle) handle.classList.remove('handle-col-selected');\n        }\n        for(let i = startCol; i <= endCol; i++){\n            if (i in this.selectedCols) continue;\n            this.selectedCols.add(i);\n            const el = this.headerContainer.querySelector(`[data-hccol='${i}']`);\n            if (!el) continue;\n            el.classList.add('col-selected');\n            const handle = el.nextSibling;\n            if (handle) handle.classList.add('handle-col-selected');\n        }\n        for (let row of this.selectedRows)if (row < startRow || row > endRow) {\n            this.selectedRows.delete(row);\n            const el = this.rowNumberContainer.querySelector(`[data-rnrow='${row}']`);\n            if (!el) continue;\n            el.classList.remove('row-selected');\n            const handle = el.nextSibling;\n            if (handle) handle.classList.remove('handle-row-selected');\n        }\n        for(let i = startRow; i <= endRow; i++){\n            if (i in this.selectedRows) continue;\n            this.selectedRows.add(i);\n            const el = this.rowNumberContainer.querySelector(`[data-rnrow='${i}']`);\n            if (!el) continue;\n            el.classList.add('row-selected');\n            const handle = el.nextSibling;\n            if (handle) handle.classList.add('handle-row-selected');\n        }\n    }\n    positionSelectionHandle() {\n        if (!this.selectedCell || !this.selectionHandle) return;\n        const rect = this.selectedCell.getBoundingClientRect();\n        const containerRect = this.container.getBoundingClientRect();\n        this.selectionHandle.style.left = `${rect.right - containerRect.left - 3}px`;\n        this.selectionHandle.style.top = `${rect.bottom - containerRect.top - 3}px`;\n    }\n    setData(data = null, initialData = null) {\n        data = data || new (0, $9da0d049db75c76f$export$2e2bcd8739ae039)();\n        if (initialData) initialData.forEach((cell)=>{\n            data.set(cell.row, cell.col, cell);\n        });\n        // for (let i = 0; i < 2000; i++) {\n        //     for (let j = 0; j < 2000; j++) {\n        //         data.set(i, j, { text: (Math.random() * 1000).toFixed(2), _id: uuid() })\n        //     }\n        // }\n        this.parser = new (0, $5aadb708f388d983$export$2e2bcd8739ae039)(data);\n        this.data = data;\n        this.updateGridDimensions();\n        this.renderHeaders();\n        this.renderRowNumbers();\n        this.updateVisibleGrid(true);\n    }\n    renderHeaders() {\n        this.headerContainer.innerHTML = `<div class=\"header-cell\" style=\"width:${this.rowNumberWidth}px;\"></div>`;\n        this.headerContainer.onmousedown = (e)=>{\n            if (e.button !== 0) return;\n            if (e.target.getAttribute('data-col') != null) this.draggingHeader = {\n                origLeft: e.target.style.left,\n                el: e.target,\n                col: parseInt(e.target.getAttribute('data-col'))\n            };\n        };\n        // Calculate total width needed for columns\n        let totalWidth = this.rowNumberWidth;\n        for(let col = 0; col <= this.totalColBounds; col++){\n            const width = this.getColWidth(col);\n            totalWidth += width;\n            const headerCell = document.createElement('div');\n            headerCell.className = 'header-cell';\n            headerCell.setAttribute('data-hccol', col);\n            headerCell.textContent = this.getColumnName(col);\n            headerCell.style.width = `${width}px`;\n            const headerHandle = document.createElement('div');\n            headerHandle.className = 'header-handle';\n            headerHandle.style.height = `${this.headerRowHeight}px`;\n            headerHandle.setAttribute('data-col', col);\n            headerHandle.style.left = `${totalWidth - 8}px`;\n            this.headerContainer.appendChild(headerCell);\n            this.headerContainer.appendChild(headerHandle);\n        }\n        this.headerContainer.style.width = `${totalWidth + 10}px`;\n    }\n    createRowNumber(label) {\n        const el = document.createElement('div');\n        el.className = 'row-number';\n        // el.textContent = label;\n        el.innerHTML = `<div>${label}</div>`;\n        return el;\n    }\n    renderRowNumbers() {\n        this.rowNumberContainer.innerHTML = '';\n        this.rowNumberContainer.onmousedown = (e)=>{\n            if (e.button !== 0) return;\n            if (e.target.getAttribute('data-row') != null) this.draggingRow = {\n                origTop: e.target.style.top,\n                el: e.target,\n                row: parseInt(e.target.getAttribute('data-row'))\n            };\n        };\n        // Create or reuse row numbers for visible rows\n        // let totalHeight = 0;\n        let totalHeight = 0;\n        for(let row = 0; row <= this.totalRowBounds; row++){\n            // if (row >= this.totalRows) break;\n            const rowNumberEl = this.createRowNumber(row + 1);\n            // rowNumberEl.textContent = row + 1;\n            totalHeight += this.rowHeight(row);\n            rowNumberEl.style.height = `${this.rowHeight(row)}px`;\n            rowNumberEl.style.lineHeight = `${this.rowHeight(row)}px`;\n            rowNumberEl.setAttribute('data-rnrow', row);\n            this.rowNumberContainer.appendChild(rowNumberEl);\n            const rowNumberHandle = document.createElement('div');\n            rowNumberHandle.className = 'row-handle';\n            rowNumberHandle.setAttribute('data-row', row);\n            rowNumberHandle.style.top = `${totalHeight - 5}px`;\n            this.rowNumberContainer.appendChild(rowNumberHandle);\n        }\n        // this.totalHeight = totalHeight;\n        this.rowNumberContainer.style.height = `${totalHeight + 20}px`; // extra pixels fixes slight alignment issue on scroll\n    }\n    get totalRowBounds() {\n        return this.heightAccum?.length || this.blockRows;\n    }\n    get totalColBounds() {\n        return this.widthAccum?.length || this.blockCols;\n    }\n    get totalYBounds() {\n        return this.heightAccum[this.heightAccum.length - 1];\n    }\n    get totalXBounds() {\n        return this.widthAccum[this.widthAccum.length - 1];\n    }\n    updateHeightAccum() {\n        let prevRowBounds = this.totalRowBounds;\n        const oldHeight = this.heightAccum.length;\n        this.heightAccum = [\n            this.headerRowHeight\n        ];\n        let heightSum = this.headerRowHeight;\n        const updateVisHeight = this.container.clientHeight + this.container.scrollTop >= this.container.scrollHeight - 150;\n        for(let row = 0; row < oldHeight - 1 || row % this.blockRows !== 0 || row < this.totalRows || updateVisHeight && row < prevRowBounds + this.blockRows; row++)this.heightAccum.push(heightSum += this.heightOverrides[row] ?? this.cellHeight);\n    }\n    updateWidthAccum() {\n        let prevColBounds = this.totalColBounds;\n        const oldWidth = this.widthAccum.length;\n        this.widthAccum = [\n            this.rowNumberWidth\n        ];\n        let widthSum = this.rowNumberWidth;\n        const updateVisWidth = this.container.clientWidth + this.container.scrollLeft >= this.container.scrollWidth - 150;\n        for(let col = 0; col < oldWidth - 1 || col % this.blockCols !== 0 || col < this.totalCols || updateVisWidth && col < prevColBounds + this.blockCols; col++)this.widthAccum.push(widthSum += this.getColWidth(col));\n    }\n    updateGridDimensions() {\n        this.updateHeightAccum();\n        this.updateWidthAccum();\n    }\n    handleScroll() {\n        const updateVisHeight = this.container.clientHeight + this.container.scrollTop >= this.container.scrollHeight - 150;\n        const updateVisWidth = this.container.clientWidth + this.container.scrollLeft >= this.container.scrollWidth - 150;\n        if (updateVisHeight || updateVisWidth) {\n            console.log('SCROLL UPDATE VIS HEIGHT OR WIDTH');\n            this.updateGridDimensions();\n            this.renderRowNumbers();\n            this.renderHeaders();\n            this.forceRerender();\n        } else this.updateVisibleGrid();\n        this.updateSelection();\n    }\n    calculateVisibleRange() {\n        const { row: visStartRow, col: visStartCol } = this.getTopLeftBounds();\n        const { row: visEndRow, col: visEndCol } = this.getBottomRightBounds();\n        this.visibleStartRow = visStartRow;\n        this.visibleStartCol = visStartCol;\n        this.visibleEndRow = visEndRow;\n        this.visibleEndCol = visEndCol;\n    }\n    updateVisibleGrid(force = false) {\n        const padding = this.padding;\n        const maxBlockRows = Math.floor(this.totalRowBounds / this.blockRows);\n        const maxBlockCols = Math.floor(this.totalColBounds / this.blockCols);\n        this.calculateVisibleRange();\n        // Determine which blocks we need to render\n        const neededBlocks = new Set();\n        const startBlockRow = Math.max(0, Math.floor(this.visibleStartRow / this.blockRows) - padding);\n        const endBlockRow = Math.min(maxBlockRows, Math.floor((this.visibleEndRow - 1) / this.blockRows));\n        const startBlockCol = Math.max(0, Math.floor(this.visibleStartCol / this.blockCols) - padding);\n        const endBlockCol = Math.min(maxBlockCols, Math.floor((this.visibleEndCol - 1) / this.blockCols));\n        // console.log('visible blocks', [startBlockRow, startBlockCol], 'through', [endBlockRow, endBlockCol])\n        for(let blockRow = startBlockRow; blockRow <= endBlockRow; blockRow++)for(let blockCol = startBlockCol; blockCol <= endBlockCol; blockCol++)neededBlocks.add(`${blockRow},${blockCol}`);\n        // Remove blocks that are no longer needed\n        const toRemove = [];\n        this.activeBlocks.forEach((block, key)=>{\n            if (force || !neededBlocks.has(key)) {\n                toRemove.push(key);\n                this.releaseBlock(block);\n            }\n        });\n        toRemove.forEach((key)=>this.activeBlocks.delete(key));\n        // this.updatePlaceholders();\n        // TODO: when zoom is >= 170%, subdivide blocks\n        requestAnimationFrame(()=>{\n            // Add new blocks that are needed\n            neededBlocks.forEach((key)=>{\n                if (!this.activeBlocks.has(key)) {\n                    const [blockRow, blockCol] = key.split(',').map(Number);\n                    const block = this.createBlock(blockRow, blockCol);\n                } else {\n                    // Ensure existing blocks are properly positioned\n                    const block = this.activeBlocks.get(key);\n                    this.positionBlock(block);\n                }\n            });\n        });\n    }\n    blockCanvases() {\n        if (devicePixelRatio >= 1.875) return 4;\n        if (devicePixelRatio > 1.7) return 2;\n        else return 1;\n    }\n    positionBlock(block) {\n        // Calculate horizontal position (left)\n        let left = this.rowNumberWidth; // Account for row numbers column\n        for(let col = 0; col < block.startCol; col++)left += this.getColWidth(col);\n        // Calculate vertical position (top)\n        const top = this.heightAccum[block.startRow];\n        block.blockContainer.style.left = `${left}px`;\n        block.blockContainer.style.top = `${top}px`;\n        block.blockContainer.style.display = 'block';\n    // block.left = left;\n    }\n    positionSubBlock(block, i) {\n        if (i === 0) return;\n        // Calculate vertical position (top)\n        if (i === 1 || i === 3) block.canvas.style.left = `${block.parentBlock.subBlocks[0].styleWidth}px`;\n        if (i >= 2) block.canvas.style.top = `${block.parentBlock.subBlocks[0].styleHeight}px`;\n    }\n    createBlock(blockRow, blockCol) {\n        // Calculate block boundaries\n        const startRow = blockRow * this.blockRows;\n        const endRow = Math.min(startRow + this.blockRows);\n        const startCol = blockCol * this.blockCols;\n        const endCol = Math.min(startCol + this.blockCols);\n        const blockContainer = document.createElement('div');\n        blockContainer.id = `${blockRow},${blockCol}`;\n        blockContainer.className = 'canvas-block-container';\n        const createCanvas = (idx = null)=>{\n            // const canvas = this.pool.pop() || document.createElement('canvas');\n            const canvas = document.createElement('canvas');\n            canvas.className = 'canvas-block';\n            canvas.id = `canvas-${blockRow},${blockCol}${idx != null ? '__' + idx : ''}`;\n            return canvas;\n        };\n        const block = {\n            startRow: startRow,\n            endRow: endRow,\n            startCol: startCol,\n            endCol: endCol,\n            blockRow: blockRow,\n            blockCol: blockCol,\n            blockContainer: blockContainer,\n            canvas: null,\n            subBlocks: []\n        };\n        const key = `${blockRow},${blockCol}`;\n        this.activeBlocks.set(key, block);\n        // const subBlockTemplate = () => {\n        //     return { startRow, startCol, endRow, endCol, canvas: createCanvas(), parentBlock: block, isSubBlock: true, index: 0 };\n        // }\n        this.calculateBlockDimensionsContainer(block);\n        this.positionBlock(block);\n        // Add to DOM if not already present\n        if (!blockContainer.parentNode) this.container.appendChild(blockContainer);\n        if (this.blockCanvases() === 1) {\n            block.canvas = createCanvas();\n            blockContainer.appendChild(block.canvas);\n            this.calculateBlockDimensions(block);\n            this.renderBlock(block);\n        } else {\n            if (this.blockCanvases() === 2) block.subBlocks.push({\n                startRow: startRow,\n                startCol: startCol,\n                endRow: endRow,\n                endCol: Math.floor((startCol + endCol) / 2),\n                canvas: createCanvas(0),\n                parentBlock: block,\n                isSubBlock: true,\n                index: 0\n            }, {\n                startRow: startRow,\n                startCol: Math.floor((startCol + endCol) / 2),\n                endRow: endRow,\n                endCol: endCol,\n                canvas: createCanvas(1),\n                parentBlock: block,\n                isSubBlock: true,\n                index: 1\n            });\n            else block.subBlocks.push({\n                startRow: startRow,\n                startCol: startCol,\n                endRow: Math.floor((startRow + endRow) / 2),\n                endCol: Math.floor((startCol + endCol) / 2),\n                canvas: createCanvas(0),\n                parentBlock: block,\n                isSubBlock: true,\n                index: 0\n            }, {\n                startRow: startRow,\n                startCol: Math.floor((startCol + endCol) / 2),\n                endRow: Math.floor((startRow + endRow) / 2),\n                endCol: endCol,\n                canvas: createCanvas(1),\n                parentBlock: block,\n                isSubBlock: true,\n                index: 1\n            }, {\n                startRow: Math.floor((startRow + endRow) / 2),\n                startCol: startCol,\n                endRow: endRow,\n                endCol: Math.floor((startCol + endCol) / 2),\n                canvas: createCanvas(2),\n                parentBlock: block,\n                isSubBlock: true,\n                index: 2\n            }, {\n                startRow: Math.floor((startRow + endRow) / 2),\n                startCol: Math.floor((startCol + endCol) / 2),\n                endRow: endRow,\n                endCol: endCol,\n                canvas: createCanvas(3),\n                parentBlock: block,\n                isSubBlock: true,\n                index: 3\n            });\n            for(let i = 0; i < this.blockCanvases(); i++){\n                blockContainer.appendChild(block.subBlocks[i].canvas);\n                this.calculateBlockDimensions(block.subBlocks[i]);\n                this.positionSubBlock(block.subBlocks[i], i);\n                this.renderBlock(block.subBlocks[i]);\n            }\n        }\n        return block;\n    }\n    calculateBlockDimensions(block) {\n        let scaleFactor = this.effectiveDevicePixelRatio();\n        block.width = 0;\n        let styleWidth = 0;\n        for(let col = block.startCol; col < block.endCol; col++)block.width += this.getColWidth(col) * scaleFactor;\n        block.width = Math.round(block.width);\n        styleWidth = block.width / scaleFactor;\n        // Calculate block height based on rows\n        block.height = (this.heightAccum[block.endRow] - this.heightAccum[block.startRow]) * scaleFactor;\n        block.height = Math.round(block.height);\n        let styleHeight = block.height / scaleFactor;\n        // Set canvas dimensions\n        block.canvas.width = block.width;\n        block.canvas.height = block.height;\n        block.canvas.style.width = `${styleWidth}px`;\n        block.canvas.style.height = `${styleHeight}px`;\n        const ctx = block.canvas.getContext('2d', {\n            alpha: false\n        });\n        block.styleHeight = styleHeight;\n        block.styleWidth = styleWidth;\n        ctx.scale(1, 1);\n    }\n    calculateBlockDimensionsContainer(block) {\n        const scaleFactor = this.effectiveDevicePixelRatio();\n        // Calculate block width based on columns\n        block.width = 0;\n        for(let col = block.startCol; col < block.endCol; col++)block.width += this.getColWidth(col) * scaleFactor;\n        block.width = Math.round(block.width);\n        block.width = block.width / scaleFactor;\n        // Calculate block height based on rows\n        block.height = (this.heightAccum[block.endRow] - this.heightAccum[block.startRow]) * scaleFactor;\n        block.height = Math.round(block.height);\n        block.height = block.height / scaleFactor;\n        // block.height = (block.endRow - block.startRow) * this.cellHeight;\n        block.blockContainer.style.width = `${block.width}px`;\n        block.blockContainer.style.height = `${block.height}px`;\n        block.styleWidth = block.width;\n        block.styleHeight = block.height;\n    }\n    effectiveDevicePixelRatio() {\n        return devicePixelRatio;\n    }\n    blockKey(block) {\n        return `${block.blockRow},${block.blockCol}`;\n    }\n    rowHeight(row) {\n        return this.heightOverrides[row] ?? this.cellHeight;\n    }\n    leftBlock(block) {\n        if (block.isSubBlock) {\n            if (block.index === 0) {\n                const leftBlock = this.getBlock(block.parentBlock.blockRow, block.parentBlock.blockCol - 1);\n                if (!leftBlock) return;\n                return leftBlock.subBlocks?.[1];\n            } else if (block.index === 1) return block.parentBlock.subBlocks?.[0];\n            else if (block.index === 2) {\n                const leftBlock = this.getBlock(block.parentBlock.blockRow, block.parentBlock.blockCol - 1);\n                if (!leftBlock) return;\n                return leftBlock.subBlocks?.[leftBlock.subBlocks?.length - 1];\n            } else if (block.index === 3) return block.parentBlock.subBlocks?.[2];\n            return null;\n        } else return this.getBlock(block.blockRow, block.blockCol - 1);\n    }\n    blockFromRc(row, col) {\n        const blockRow = Math.floor(row / 34);\n        const blockCol = Math.floor(col / 34);\n        const block = this.getBlock(blockRow, blockCol);\n        if (!block) return null; // todo: left block might be pruned because not in view\n        if (block.subBlocks.length === 0) return block;\n        for (let subBlock of block.subBlocks){\n            if (row >= subBlock.startRow && row <= subBlock.endRow && col >= subBlock.startCol && col <= subBlock.endCol) return subBlock;\n        }\n        return null;\n    }\n    getKey(row, col) {\n        return `${row},${col}`;\n    }\n    getWidthHeight(row, col) {\n        const merged = this.getMerge(row, col);\n        let width, height;\n        if (merged) width = this.getWidthBetweenColumns(merged.startCol, merged.endCol + 1), height = this.getHeightBetweenRows(merged.startRow, merged.endRow + 1);\n        else width = this.getCellWidth(row, col), height = this.getHeight(row, col);\n        return {\n            width: width,\n            height: height\n        };\n    }\n    // getBlock(blockRow: number, blockCol: number) {\n    //     return this.activeBlocks.get(this.blockKey({ blockRow, blockCol }));\n    // }\n    getBlock(row, col) {\n        const blockRow = Math.floor(row / this.blockRows);\n        const blockCol = Math.floor(col / this.blockCols);\n        const key = this.getKey(blockRow, blockCol);\n        if (this.activeBlocks.has(key)) return this.activeBlocks.get(key);\n        return null;\n    }\n    getBlockOrSubBlock(row, col) {\n        const parentBlock = this.getBlock(row, col);\n        if (!parentBlock) return null;\n        if (parentBlock.subBlocks.length === 0) return parentBlock;\n        if (parentBlock.subBlocks.length === 2) {\n            let ncol = col % this.blockCols;\n            const subBlockCols = Math.floor(this.blockCols / 2);\n            let idx = ncol >= subBlockCols ? 1 : 0;\n            return parentBlock.subBlocks[idx];\n        }\n        if (parentBlock.subBlocks.length === 4) {\n            let ncol = col % this.blockCols;\n            const subBlockCols = Math.floor(this.blockCols / 2);\n            let right = ncol >= subBlockCols;\n            let nrow = row % this.blockRows;\n            const subBlockRows = Math.floor(this.blockRows / 2);\n            let bottom = nrow >= subBlockRows;\n            let i = 0;\n            if (!right && !bottom) i = 0;\n            else if (right && !bottom) i = 1;\n            else if (!right && bottom) i = 2;\n            else if (right && bottom) i = 3;\n            return parentBlock.subBlocks[i];\n        }\n        return null;\n    }\n    getCellCoordsContainer(row, col) {\n        const merge = this.getMerge(row, col);\n        let left, top, width, height, value;\n        if (merge) {\n            left = this.getWidthOffset(merge.startCol, true);\n            top = this.getHeightOffset(merge.startRow, true);\n            width = this.getMergeWidth(merge);\n            height = this.getMergeHeight(merge);\n            row = merge.startRow, col = merge.startCol;\n        } else {\n            left = this.getWidthOffset(col, true);\n            top = this.getHeightOffset(row, true);\n            width = this.getCellWidth(row, col);\n            height = this.rowHeight(row);\n        }\n        return {\n            left: left,\n            top: top,\n            width: width,\n            height: height,\n            row: row,\n            col: col\n        };\n    }\n    getCellCoordsCanvas(row, col) {\n        const block = this.getBlockOrSubBlock(row, col);\n        // if (!block) return null;\n        const merge = this.getMerge(row, col);\n        let left, top, width, height;\n        if (merge) {\n            left = this.getWidthBetweenColumns(block.startCol, merge.startCol);\n            top = this.getHeightBetweenRows(block.startRow, merge.startRow);\n            width = this.getMergeWidth(merge);\n            height = this.getMergeHeight(merge);\n            row = merge.startRow, col = merge.startCol;\n        } else {\n            left = this.getWidthBetweenColumns(block.startCol, col);\n            top = this.getHeightBetweenRows(block.startRow, row);\n            width = this.getCellWidth(row, col);\n            height = this.rowHeight(row);\n        }\n        return {\n            left: left,\n            top: top,\n            width: width,\n            height: height,\n            row: row,\n            col: col\n        };\n    }\n    renderBorders(ctx, row, col) {\n        if (!this.getCell(row, col)?.border) return;\n        const border = this.getCell(row, col)?.border;\n        ctx.save();\n        ctx.strokeStyle = 'red';\n        // left border\n        if ((0, $b786fc20307c7d32$export$de8456e649b1d7)(border, 'left')) {\n            ctx.beginPath();\n            ctx.moveTo(this.getWidthOffset(col) * devicePixelRatio, this.getHeightOffset(row) * devicePixelRatio);\n            ctx.lineTo(this.getWidthOffset(col) * devicePixelRatio, (this.getHeightOffset(row) + this.getCellHeight(row)) * devicePixelRatio);\n            ctx.stroke();\n        }\n        // top border\n        if ((0, $b786fc20307c7d32$export$de8456e649b1d7)(border, 'top')) {\n            ctx.beginPath();\n            ctx.moveTo(this.getWidthOffset(col) * devicePixelRatio, this.getHeightOffset(row) * devicePixelRatio);\n            ctx.lineTo((this.getWidthOffset(col) + this.getCellWidth(col)) * devicePixelRatio, this.getHeightOffset(row) * devicePixelRatio);\n            ctx.stroke();\n        }\n        // right border\n        if ((0, $b786fc20307c7d32$export$de8456e649b1d7)(border, 'right')) {\n            ctx.beginPath();\n            ctx.moveTo((this.getWidthOffset(col) + this.getCellWidth(col)) * devicePixelRatio, this.getHeightOffset(row) * devicePixelRatio);\n            ctx.lineTo((this.getWidthOffset(col) + this.getCellWidth(col)) * devicePixelRatio, (this.getHeightOffset(row) + this.getCellHeight(row)) * devicePixelRatio);\n            ctx.stroke();\n        }\n        // bottom border\n        if ((0, $b786fc20307c7d32$export$de8456e649b1d7)(border, 'bottom')) {\n            ctx.beginPath();\n            ctx.moveTo(this.getWidthOffset(col) * devicePixelRatio, (this.getHeightOffset(row) + this.getCellHeight(row)) * devicePixelRatio);\n            ctx.lineTo((this.getWidthOffset(col) + this.getCellWidth(col)) * devicePixelRatio, (this.getHeightOffset(row) + this.getCellHeight(row)) * devicePixelRatio);\n            ctx.stroke();\n        }\n        ctx.restore();\n    }\n    renderCell(row, col, srcblock, ctx) {\n        // if (this.getMerge(row, col)) {\n        //     // this.forceRerender();\n        //     return;\n        // }\n        if (!ctx) {\n            let block = srcblock;\n            if (!block) block = this.getBlockOrSubBlock(row, col);\n            if (block) ctx = block.canvas.getContext('2d', {\n                alpha: false\n            });\n        }\n        let { left: left, top: top, width: width, height: height } = this.getCellCoordsCanvas(row, col);\n        if (ctx) ctx.fillStyle = '#ffffff';\n        if (!srcblock || this.rowColInBounds(row, col, srcblock)) // console.log('inbounds::', row,col)\n        ctx && ctx.fillRect((left + 1) * devicePixelRatio, (top + 1) * devicePixelRatio, (width - 2) * devicePixelRatio, (height - 2) * devicePixelRatio);\n        else {\n            const ssr = srcblock.startRow, sec = srcblock.endCol;\n            const merge = this.getMerge(row, col);\n            if (!merge) return;\n            row = merge.startRow, col = merge.startCol;\n            const _width = this.getWidthBetweenColumns(srcblock.startCol, merge.endCol + 1);\n            const _height = this.getHeightBetweenRows(srcblock.startRow, merge.endRow + 1);\n            left = _width - width;\n            top = _height - height;\n            ctx && ctx.fillRect((left + 1) * devicePixelRatio, (top + 1) * devicePixelRatio, (width - 2) * devicePixelRatio, (height - 2) * devicePixelRatio);\n        }\n        if (ctx) ctx.fillStyle = '#333333';\n        this.renderBorders(ctx, row, col);\n        if (this.getCell(row, col).cellType === 'button') {\n            const button = this.getButton(row, col).el;\n            ({ left: left, top: top, width: width, height: height } = this.getCellCoordsContainer(row, col));\n            this.positionElement(button, left, top, width, height);\n        } else if (this.getCell(row, col).cellType === 'linechart') {\n            const lineChart = this.getLineChart(row, col)?.el;\n            ({ left: left, top: top, width: width, height: height } = this.getCellCoordsContainer(row, col));\n            this.positionElement(lineChart, left, top, width, height);\n        } else {\n            this.clearElRegistry(row, col);\n            this.renderCellText(ctx, left, top, width, row, col);\n            if ((0, $c8587485a8b03077$export$a4bd3681e1db52ef)[row]?.[col]) {\n                for(let childRow in (0, $c8587485a8b03077$export$a4bd3681e1db52ef)[row][col])for(let childCol in (0, $c8587485a8b03077$export$a4bd3681e1db52ef)[row][col][childRow])this.renderCell(childRow, childCol);\n            }\n        }\n    }\n    scalerZoom() {\n        return devicePixelRatio;\n    }\n    renderBlock(block, calcDimensions = false) {\n        if (calcDimensions) this.calculateBlockDimensions(block);\n        const ctx = block.canvas.getContext('2d', {\n            alpha: false\n        });\n        ctx.fillStyle = '#ffffff';\n        ctx.fillRect(0, 0, block.canvas.width, block.canvas.height);\n        // Set rendering quality based on zoom\n        this.applyRenderingQuality(ctx);\n        // Draw cells\n        let x = 0;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        ctx.fillStyle = '#333333';\n        const scaler = 88;\n        ctx.strokeStyle = `hsl(0,0%,${scaler}%)`;\n        ctx.lineWidth = 1;\n        ctx.font = this.getFontString();\n        ctx.translate(0.5, 0.5); // thick gridlines fix\n        // draw row gridlines\n        let y;\n        if (this.gridlinesOn && this.quality() !== 'performance') for(let row = block.startRow; row < block.endRow; row++){\n            y = Math.round((this.heightAccum[row] - this.heightAccum[block.startRow]) * devicePixelRatio);\n            ctx.beginPath();\n            ctx.moveTo(0, y);\n            ctx.lineTo(block.canvas.width, y);\n            ctx.stroke();\n        }\n        // draw col grid lines\n        if (this.gridlinesOn && this.quality() !== 'performance') for(let col = block.startCol; col < block.endCol; col++){\n            const colWidth = this.getColWidth(col);\n            // draw col gridlines\n            ctx.beginPath();\n            ctx.moveTo(Math.round(x * devicePixelRatio), 0);\n            ctx.lineTo(Math.round(x * devicePixelRatio), block.canvas.height);\n            ctx.stroke();\n            x += colWidth;\n        }\n        x = 0;\n        const seenMerges = new Set();\n        for(let col = block.startCol; col < block.endCol; col++){\n            const colWidth = this.getColWidth(col);\n            for(let row = block.startRow; row < block.endRow; row++){\n                if (!this.getCell(row, col)) continue;\n                // Check if the cell is part of a merged range\n                const merged = this.getMerge(row, col);\n                if (merged) continue;\n                const y = this.heightAccum[row] - this.heightAccum[block.startRow];\n                // Skip rendering if the cell is part of a merged range (except the top-left cell)\n                const renderWidth = colWidth;\n                if (this.getCell(row, col).cellType === 'button') {\n                    if (!merged) {\n                        const button = this.getButton(row, col).el;\n                        this.positionElement(button, this.widthAccum[col], this.heightAccum[row], renderWidth, this.rowHeight(row));\n                    }\n                } else if (this.getCell(row, col).cellType === 'linechart') {\n                    const lineChart = this.getLineChart(row, col)?.el;\n                    this.positionElement(lineChart, this.widthAccum[col], this.heightAccum[row], renderWidth, this.rowHeight(row));\n                } else {\n                    this.renderBorders(ctx, row, col);\n                    this.renderCellText(ctx, x, y, renderWidth, row, col);\n                }\n            }\n            x += colWidth;\n        }\n        this.renderMergesOnBlock(block, ctx);\n    }\n    renderMergesOnBlock(block, ctx) {\n        const merges = this.getMergesInRange(block);\n        for (let merge of merges){\n            const row = merge.startRow, col = merge.startCol;\n            this.renderCell(row, col, block, ctx);\n        }\n    }\n    clearElRegistry(row, col) {\n        const _id = this.getCellId(row, col);\n        if (this.elRegistry[_id]) this.elRegistry[_id].el.parentNode?.removeChild(this.elRegistry[_id].el);\n    }\n    isSelectStart(row, col) {\n        if (!this.selectionStart) return;\n        return this.selectionStart.row === row && this.selectionStart.col === col;\n    }\n    isSelectEnd(row, col) {\n        if (!this.selectionEnd) return;\n        return this.selectionEnd.row === row && this.selectionEnd.col === col;\n    }\n    positionElement(el, x, y, width, height, append = true) {\n        el.style.top = `${y}px`;\n        el.style.left = `${x}px`;\n        el.style.width = `${width}px`;\n        el.style.height = `${height}px`;\n        append && this.container.appendChild(el);\n    }\n    getCellId(row, col) {\n        return this.getCell(row, col)?._id;\n    }\n    getButton(row, col) {\n        const _id = this.getCellId(row, col);\n        if (this.elRegistry[_id] && this.elRegistry[_id].type === 'button') return this.elRegistry[_id];\n        else if (this.elRegistry[_id] && this.elRegistry.type !== 'button') this.elRegistry[_id].el.parentNode?.removeChild(this.elRegistry[_id].el);\n        const button = document.createElement('button');\n        button.textContent = this.getCellText(row, col);\n        button.onclick = (e)=>e.stopPropagation();\n        button.ondblclick = (e)=>e.stopPropagation();\n        button.style.zIndex = 1;\n        button.style.position = 'absolute';\n        button.style.overflow = 'hidden';\n        button.style.userSelect = 'none';\n        this.elRegistry[_id] = {\n            type: 'button',\n            el: button\n        };\n        return this.elRegistry[_id];\n    }\n    getLineChart(row, col) {\n        const _id = this.getCellId(row, col);\n        if (this.elRegistry[_id] && this.elRegistry[_id].type === 'lineChart') {\n            const data = this.elRegistry[_id].data;\n            const { width: width, height: height } = this.getWidthHeight(row, col);\n            this.elRegistry[_id].lineChart.render(data, width, height);\n            return this.elRegistry[_id];\n        } else if (this.elRegistry[_id] && this.elRegistry[_id].type !== 'lineChart') this.elRegistry[_id].el.parentNode?.removeChild(this.elRegistry[_id].el);\n        const data = [\n            [\n                \"10\",\n                \"2023-01-01\"\n            ],\n            [\n                \"15\",\n                \"2023-01-02\"\n            ],\n            [\n                \"12\",\n                \"2023-01-03\"\n            ],\n            [\n                \"20\",\n                \"2023-01-04\"\n            ],\n            [\n                \"18\",\n                \"2023-01-05\"\n            ],\n            [\n                \"25\",\n                \"2023-01-06\"\n            ],\n            [\n                \"22\",\n                \"2023-01-07\"\n            ]\n        ];\n        const wrapper = document.createElement('div');\n        // wrapper.appendChild(lineChart.container);\n        wrapper.onclick = (e)=>e.stopPropagation();\n        wrapper.ondblclick = (e)=>e.stopPropagation();\n        wrapper.style.zIndex = 1;\n        wrapper.style.position = 'absolute';\n        wrapper.style.overflow = 'hidden';\n        wrapper.style.height = '100%';\n        wrapper.style.width = '100%';\n        const { width: width, height: height } = this.getWidthHeight(row, col);\n        const lineChart = (0, $89443b9b021fff66$export$3b774a58fdb21522)(data, wrapper, width, height);\n        this.elRegistry[_id] = {\n            el: wrapper,\n            lineChart: lineChart,\n            data: data,\n            type: 'lineChart'\n        };\n        return this.elRegistry[_id];\n    }\n    getWidthOffset(col, withStickyLeftBar = false) {\n        return this.widthAccum[col] - (withStickyLeftBar ? 0 : this.rowNumberWidth);\n    }\n    getHeightOffset(row, withStickyHeader = false) {\n        return this.heightAccum[row] - (withStickyHeader ? 0 : this.headerRowHeight);\n    }\n    getCellWidth(a, b = null) {\n        let col = a;\n        if (typeof b === 'number') col = b;\n        return this.getColWidth(col);\n    }\n    getCellHeight(row, col = null) {\n        return this.rowHeight(row);\n    }\n    getHeight(row, col = null) {\n        return this.rowHeight(row);\n    }\n    getWidthBetweenColumns(col1, col2) {\n        let accumulatedWidth = 0;\n        for(let _col = col1; _col < col2; _col++){\n            const colWidth = this.getColWidth(_col);\n            accumulatedWidth += colWidth;\n        }\n        return accumulatedWidth;\n    }\n    getHeightBetweenRows(startRow, endRow) {\n        if (endRow < startRow) {\n            let tmp = endRow;\n            endRow = startRow;\n            startRow = tmp;\n        }\n        return this.heightAccum[endRow] - this.heightAccum[startRow];\n    }\n    quality() {\n        const devicePixelRatio1 = window.devicePixelRatio;\n        if (devicePixelRatio1 < 0.5) return 'performance';\n        else if (devicePixelRatio1 < 1) return 'balance';\n        else return 'max';\n    }\n    applyRenderingQuality(ctx) {\n        switch(this.quality()){\n            case 'performance':\n                ctx.textRendering = 'optimizeSpeed';\n                ctx.imageSmoothingEnabled = false;\n                break;\n            case 'balance':\n                ctx.textRendering = 'geometricPrecision';\n                ctx.imageSmoothingEnabled = true;\n                break;\n            case 'max':\n            default:\n                ctx.textRendering = 'geometricPrecision';\n                ctx.imageSmoothingEnabled = true;\n        }\n    }\n    getCell(row, col) {\n        if (!this.data) return {\n            row: row,\n            col: col\n        };\n        return this.data.get(row, col);\n    }\n    getCellText(row, col) {\n        return this.getCell(row, col)?.text || '';\n    }\n    getCellTextAlign(row, col) {\n        return this.getCell(row, col)?.textAlign;\n    }\n    renderCellText(ctx, x, y, width, row, col, _text = '') {\n        const value = this.getCellText(row, col);\n        let text = value !== undefined && value !== null ? String(value) : '';\n        if (_text !== '') text = _text;\n        // if (text === '') return;\n        try {\n            (0, $c8587485a8b03077$export$b59bcc595b241b53)(row, col);\n            text = this.parser.evaluateExpression(text, [\n                row,\n                col\n            ]);\n        } catch (e) {\n            console.warn(e);\n            text;\n        }\n        if (text === '') return;\n        ctx.save(); // Save the current state\n        if (this.getCellColor(row, col)) ctx.fillStyle = this.getCellColor(row, col);\n        if (this.getCell(row, col)?.fontSize != null) ctx.font = this.getFontString(row, col);\n        if (this.getCell(row, col)?.textBaseline != null) ctx.textBaseline = this.getCell(row, col).textBaseline;\n        ctx.beginPath();\n        if (this.getCellTextAlign(row, col)) ctx.textAlign = this.getCellTextAlign(row, col);\n        ctx.rect(x * devicePixelRatio, y * devicePixelRatio, width * devicePixelRatio, this.rowHeight(row) * devicePixelRatio); // Adjust y position based on your text baseline\n        ctx.clip();\n        ctx.fillText(text, (x + 4) * devicePixelRatio, (y + this.rowHeight(row) / 2) * devicePixelRatio);\n        ctx.restore(); // Restore the state to remove clipping\n    }\n    getCellColor(row, col) {\n        return this.getCell(row, col)?.color ?? '';\n    }\n    getAbbreviatedText(text) {\n        if (text.length > 8) return text.substring(0, 5) + '...';\n        return text;\n    }\n    getFontString(row = null, col = null) {\n        let fontSize = 12 * devicePixelRatio;\n        if (row != null && col != null && this.getCell(row, col).fontSize != null) fontSize = this.getCell(row, col).fontSize;\n        let fontString = `${fontSize}px Arial`;\n        if (this.quality() === 'max' && devicePixelRatio >= 1) // Only use subpixel rendering when not zoomed out\n        fontString += ', sans-serif';\n        return fontString;\n    }\n    releaseBlock(block) {\n        if (block.subBlocks.length > 1) while(block.subBlocks.length > 1)block.subBlocks.pop();\n        block.blockContainer.innerHTML = '';\n        block.blockContainer.parentNode.removeChild(block.blockContainer);\n    }\n}\n\n\nclass $926fdc6e551c4757$export$2e2bcd8739ae039 {\n    constructor(wrapperId, options){\n        this.curId = 1;\n        this.curActiveGridId = 1;\n        this.activeGrids = new Map();\n        this.wrapper = document.getElementById(wrapperId) || document.createElement('div');\n        const _container = document.createElement('div');\n        this._container = _container;\n        _container.style.width = '100%';\n        _container.style.height = '100%';\n        _container.style.display = 'flex';\n        _container.style.flexDirection = 'column';\n        _container.innerHTML = `\n            <div id=\"sheets-container\" class=\"sheets-container\" style=\"display:flex;flex:1;flex-direction:column;height:calc(100% - 40px);\">\n            </div>\n        `;\n        this.bottomBar = new (0, $5740ee1f8f0a81d9$export$baad9f01dbfd9b39)();\n        _container.appendChild(this.bottomBar.container);\n        this.wrapper.appendChild(_container);\n        this.addSheetButton = _container.querySelector('.gigasheet-icon-img.add');\n        this.sheetsContainer = _container.querySelector('.sheets-container');\n        this.initEventListeners();\n        this.initSheets(options);\n    }\n    initEventListeners() {\n        this.addSheetButton.onclick = (e)=>{\n            e.preventDefault();\n            this.addGrid();\n        };\n        this.bottomBar.onTabClicked((tab)=>{\n            this.switchTab(tab);\n        });\n    }\n    switchTab(tab) {\n        const grid = this.activeGrids.get(tab);\n        if (!grid) return;\n        for (let child of this.sheetsContainer.children)child.style.display = 'none';\n        grid._container.style.display = 'flex';\n    }\n    getDefaultOptions() {\n        return {\n            gridlinesOn: true\n        };\n    }\n    addGrid(options) {\n        for (let child of this.sheetsContainer.children)child.style.display = 'none';\n        this.activeGrids.set(String(this.curId++), new (0, $e1851ed6dad30b6d$export$2e2bcd8739ae039)(this.sheetsContainer, options || this.getDefaultOptions()));\n        this.bottomBar.addTab('Sheet', this.curId - 1);\n    }\n    initSheets(options) {\n        if (options == null || !(options.length > 0)) this.addGrid();\n        else for(let i = 0; i < options.length; i++)this.addGrid(options);\n    }\n}\n\n\ndocument.addEventListener(\"DOMContentLoaded\", (event)=>{\n    const grid = new (0, $926fdc6e551c4757$export$2e2bcd8739ae039)('grid-wrapper');\n});\n\n\n//# sourceMappingURL=gigaspreadsheet.a5d21c63.js.map\n","{\n  \"options\": {\n    \"syntax\": \"proto3\"\n  },\n  \"nested\": {\n    \"yaticker\": {\n      \"fields\": {\n        \"id\": {\n          \"type\": \"string\",\n          \"id\": 1\n        },\n        \"price\": {\n          \"type\": \"float\",\n          \"id\": 2\n        },\n        \"time\": {\n          \"type\": \"sint64\",\n          \"id\": 3\n        },\n        \"currency\": {\n          \"type\": \"string\",\n          \"id\": 4\n        },\n        \"exchange\": {\n          \"type\": \"string\",\n          \"id\": 5\n        },\n        \"quoteType\": {\n          \"type\": \"QuoteType\",\n          \"id\": 6\n        },\n        \"marketHours\": {\n          \"type\": \"MarketHoursType\",\n          \"id\": 7\n        },\n        \"changePercent\": {\n          \"type\": \"float\",\n          \"id\": 8\n        },\n        \"dayVolume\": {\n          \"type\": \"sint64\",\n          \"id\": 9\n        },\n        \"dayHigh\": {\n          \"type\": \"float\",\n          \"id\": 10\n        },\n        \"dayLow\": {\n          \"type\": \"float\",\n          \"id\": 11\n        },\n        \"change\": {\n          \"type\": \"float\",\n          \"id\": 12\n        },\n        \"shortName\": {\n          \"type\": \"string\",\n          \"id\": 13\n        },\n        \"expireDate\": {\n          \"type\": \"sint64\",\n          \"id\": 14\n        },\n        \"openPrice\": {\n          \"type\": \"float\",\n          \"id\": 15\n        },\n        \"previousClose\": {\n          \"type\": \"float\",\n          \"id\": 16\n        },\n        \"strikePrice\": {\n          \"type\": \"float\",\n          \"id\": 17\n        },\n        \"underlyingSymbol\": {\n          \"type\": \"string\",\n          \"id\": 18\n        },\n        \"openInterest\": {\n          \"type\": \"sint64\",\n          \"id\": 19\n        },\n        \"optionsType\": {\n          \"type\": \"OptionType\",\n          \"id\": 20\n        },\n        \"miniOption\": {\n          \"type\": \"sint64\",\n          \"id\": 21\n        },\n        \"lastSize\": {\n          \"type\": \"sint64\",\n          \"id\": 22\n        },\n        \"bid\": {\n          \"type\": \"float\",\n          \"id\": 23\n        },\n        \"bidSize\": {\n          \"type\": \"sint64\",\n          \"id\": 24\n        },\n        \"ask\": {\n          \"type\": \"float\",\n          \"id\": 25\n        },\n        \"askSize\": {\n          \"type\": \"sint64\",\n          \"id\": 26\n        },\n        \"priceHint\": {\n          \"type\": \"sint64\",\n          \"id\": 27\n        },\n        \"vol_24hr\": {\n          \"type\": \"sint64\",\n          \"id\": 28\n        },\n        \"volAllCurrencies\": {\n          \"type\": \"sint64\",\n          \"id\": 29\n        },\n        \"fromcurrency\": {\n          \"type\": \"string\",\n          \"id\": 30\n        },\n        \"lastMarket\": {\n          \"type\": \"string\",\n          \"id\": 31\n        },\n        \"circulatingSupply\": {\n          \"type\": \"double\",\n          \"id\": 32\n        },\n        \"marketcap\": {\n          \"type\": \"double\",\n          \"id\": 33\n        }\n      },\n      \"nested\": {\n        \"QuoteType\": {\n          \"values\": {\n            \"NONE\": 0,\n            \"ALTSYMBOL\": 5,\n            \"HEARTBEAT\": 7,\n            \"EQUITY\": 8,\n            \"INDEX\": 9,\n            \"MUTUALFUND\": 11,\n            \"MONEYMARKET\": 12,\n            \"OPTION\": 13,\n            \"CURRENCY\": 14,\n            \"WARRANT\": 15,\n            \"BOND\": 17,\n            \"FUTURE\": 18,\n            \"ETF\": 20,\n            \"COMMODITY\": 23,\n            \"ECNQUOTE\": 28,\n            \"CRYPTOCURRENCY\": 41,\n            \"INDICATOR\": 42,\n            \"INDUSTRY\": 1000\n          }\n        },\n        \"OptionType\": {\n          \"values\": {\n            \"CALL\": 0,\n            \"PUT\": 1\n          }\n        },\n        \"MarketHoursType\": {\n          \"values\": {\n            \"PRE_MARKET\": 0,\n            \"REGULAR_MARKET\": 1,\n            \"POST_MARKET\": 2,\n            \"EXTENDED_HOURS_MARKET\": 3\n          }\n        }\n      }\n    }\n  }\n}","import Giga from \"./giga\";\n\ndocument.addEventListener(\"DOMContentLoaded\", (event) => {\n    const grid = new Giga('grid-wrapper');\n});","// @ts-ignore\nimport { BottomBar } from 'src/sheet/components/bottomBar';\nimport Sheet from '../sheet';\n// import Sheet from \"src/sheet\";\n\nexport default class Giga {\n    wrapper: HTMLElement;\n    private _container: HTMLDivElement;\n    sheetsContainer: any;\n    addSheetButton: HTMLButtonElement;\n    activeGrids: Map<any, any>;\n    curId: number;\n    curActiveGridId: number;\n    bottomBar: any;\n    constructor(wrapperId: string, options?: any) {\n        this.curId = 1;\n        this.curActiveGridId = 1;\n        this.activeGrids = new Map();\n        this.wrapper = document.getElementById(wrapperId) || document.createElement('div');\n        const _container = document.createElement('div');\n        this._container = _container;\n        _container.style.width = '100%';\n        _container.style.height = '100%';\n        _container.style.display = 'flex';\n        _container.style.flexDirection = 'column';\n        _container.innerHTML = `\n            <div id=\"sheets-container\" class=\"sheets-container\" style=\"display:flex;flex:1;flex-direction:column;height:calc(100% - 40px);\">\n            </div>\n        `;\n        this.bottomBar = new BottomBar();\n        _container.appendChild(this.bottomBar.container);\n        this.wrapper.appendChild(_container);\n        this.addSheetButton = _container.querySelector('.gigasheet-icon-img.add')!;\n        this.sheetsContainer = _container.querySelector('.sheets-container');\n\n        this.initEventListeners();\n        this.initSheets(options);\n    }\n\n    initEventListeners() {\n        this.addSheetButton.onclick = (e) => {\n            e.preventDefault();\n            this.addGrid();\n        }\n        this.bottomBar.onTabClicked((tab: string) => {\n            this.switchTab(tab);\n        })\n    }\n\n    switchTab(tab: string) {\n        const grid = this.activeGrids.get(tab);\n        if (!grid) return;\n        for (let child of this.sheetsContainer.children) {\n            child.style.display = 'none';\n        }\n        grid._container.style.display = 'flex';\n    }\n\n    getDefaultOptions () {\n        return {\n            gridlinesOn: true,\n            // initialCells: [{row: 1, col: 1, text: 'foo'}]\n        };\n    }\n\n    addGrid(options?: any) {\n        for(let child of this.sheetsContainer.children) {\n            child.style.display = 'none';\n        }\n        this.activeGrids.set(String(this.curId++), new Sheet(\n            this.sheetsContainer, options || this.getDefaultOptions()\n        ));\n        this.bottomBar.addTab('Sheet', this.curId-1)\n    }\n\n    initSheets(options?: []) {\n        if (options == null || !(options.length > 0)) {\n            this.addGrid();\n        } else {\n            for(let i = 0; i < options.length; i++) {\n                this.addGrid(options);\n            }\n        }\n    }\n}","export class BottomBar {\n    container: HTMLDivElement;\n    tabCbs: Function[];\n    menu: HTMLElement;\n    active: string | number;\n    constructor() {\n        this.container = document.createElement('div');\n        this.container.className = 'gigasheet-bottombar';\n        this.container.innerHTML = `\n            <div class=\"gigasheet-contextmenu\" style=\"width: 160px; display: none; left: 271px; bottom: 41px;\">\n                <div class=\"gigasheet-item\">Delete</div>\n            </div>\n            <ul class=\"gigasheet-menu\">\n                <li class=\"\">\n                    <div class=\"gigasheet-icon\">\n                        <div class=\"gigasheet-icon-img add\"></div>\n                    </div><span class=\"\">\n                        <div class=\"gigasheet-dropdown top-left\">\n                            <div class=\"gigasheet-dropdown-header\">\n                                <div class=\"gigasheet-icon\">\n                                    <div class=\"gigasheet-icon-img ellipsis\"></div>\n                                </div>\n                            </div>\n                            <div class=\"gigasheet-dropdown-content\" style=\"width: auto; display: none;\">\n                                <div class=\"gigasheet-item\" style=\"width: 150px; font-weight: normal;\">Sheet1</div>\n                            </div>\n                        </div>\n                    </span>\n                </li>\n            </ul>\n        `\n        this.menu = this.container.querySelector('.gigasheet-menu')!;\n        this.active = 1;\n        this.tabCbs = [];\n        this.addListeners();\n    }\n    addListeners() {\n        this.menu.addEventListener('click', (e: any) => {\n            if (e.target.hasAttribute('data-tabid')) {\n                if (e.target.getAttribute('data-tabid') === String(this.active)) return;\n                this.setActive(e.target.getAttribute('data-tabid'));\n            }\n        })\n    }\n    setActive(id: string | number) {\n        const el = this.container.querySelector(`[data-tabid='${id}']`);\n        if (!el) return;\n        this.removeActive();\n        this.active = id;\n        el.classList.add('active');\n        this.emit(id)\n    }\n    emit(value: any) {\n        this.tabCbs.forEach(fn => {\n            fn(value);\n        })\n    }\n    onTabClicked(fn: Function) {\n        this.tabCbs.push(fn);\n    }\n    removeActive() {\n        const tabContainer = this.container.querySelector('.gigasheet-menu')!;\n        for (let tab of tabContainer.children) {\n            tab.classList.remove('active');\n        }\n    }\n    addTab(name: string, id: number) {\n        const container = this.container;\n        this.active = id;\n        const tabContainer = container.querySelector('.gigasheet-menu')!;\n        this.removeActive();\n        if (tabContainer.lastElementChild) {\n            tabContainer.lastElementChild!.insertAdjacentHTML(\n                'afterend',\n                `<li data-tabid=\"${id}\" class=\"active\">Sheet${id}</div>`\n            )\n        } else {\n            tabContainer.innerHTML = '<li data-tabid=\"1\" class=\"active gigasheet-bottom-tab\">Sheet1</li>'\n        }\n    }\n}","// @ts-ignore\nimport SparseGrid from 'packages/sparsegrid';\n// @ts-ignore\nimport ExpressionParser from 'packages/expressionparser';\n// @ts-ignore\nimport { launchFormatMenu } from './windows/format';\n// @ts-ignore\nimport { createLineChart } from './graphs/linechart.js';\n// @ts-ignore\nimport FinancialSubscriber from 'packages/financial/index';\n// @ts-ignore\nimport { dependencyTree, tickerReg, shiftDependenciesDown, shiftDependenciesRight, shiftDependenciesUp, shiftDependenciesLeft, removeDependents } from \"packages/dependencytracker\";\n\nimport { hasBorderStr } from \"./utils\";\nimport { shiftTextRefs } from \"./shiftops\";\nimport { header } from './templates';\nimport { Rect, GigaSheetTypeOptions, CellCoordsRect } from './interfaces';\nimport ContextMenu from './components/contextmenu';\n// \"noImplicitAny\": false\n\nexport default class Sheet {\n    wrapper: HTMLElement;\n    container: HTMLElement;\n    headerContainer: HTMLElement;\n    rowNumberContainer: HTMLElement;\n    cornerCell: HTMLElement;\n    selectionLayer: HTMLElement;\n    editInput: HTMLInputElement;\n    lastDevicePixelRatio: number;\n    lastBlockCanvases: number;\n    visibleStartRow: number;\n    visibleEndRow: number;\n    visibleStartCol: number;\n    visibleEndCol: number;\n    rowNumberWidth: number;\n    headerRowHeight: number;\n    cellHeight: number;\n    cellWidth: number;\n    blockRows: number;\n    blockCols: number;\n    paddingBlocks: number;\n    heightOverrides: any;\n    widthOverrides: any;\n    gridlinesOn: boolean;\n    padding: number; // number of adjacent blocks to render\n    readonly MAX_HISTORY_SIZE: number;\n\n    activeBlocks: Map<any, any>;\n    mergedCells: Rect[];\n    undoStack: any;\n    redoStack: any;\n    elRegistry: any;\n    heightAccum: any;\n    widthAccum: any;\n    data: any;\n    parser: any;\n    isResizing: boolean;\n    activeSelection: any;\n    resizeStart: any;\n    resizeInitialSize: any;\n    busy: boolean;\n    rqtimeout: any;\n\n    // Selection state\n    selectedCell: HTMLElement | null;\n    isSelecting: boolean;\n    selectionStart: {row: number, col: number} | null;\n    selectionEnd: { row: number, col: number } | null;\n    selectionHandle: HTMLElement | null;\n    selectedCols: Set<string|number>;\n    selectedRows: Set<string|number>;\n\n    draggingHeader: any;\n    draggingRow: any;\n    editingCell: any;\n    selectionBoundRect: any;\n    mergeButton: HTMLElement;\n    formatButton: HTMLElement;\n    _container: HTMLDivElement;\n    ctxmenu: ContextMenu;\n    constructor(wrapper: HTMLElement, options: GigaSheetTypeOptions | any, state?: any) {\n        this.wrapper = wrapper || document.createElement('div');\n        const _container = document.createElement('div');\n        this._container = _container;\n        _container.style.width = '100%';\n        _container.style.height = '100%';\n        _container.style.display = 'flex';\n        _container.style.flexDirection = 'column';\n        // _container.style.maxHeight = 'calc(100vh - 40px)';\n        _container.innerHTML = `\n        ${header}\n        <div id=\"grid-container\" class=\"grid-container\">\n            <div id=\"corner-cell\" class=\"corner-cell\"></div>\n            <div id=\"header-container\" class=\"header-container\"></div>\n            <div id=\"row-number-container\" class=\"row-number-container\"></div>\n            <div id=\"selection-layer\" class=\"selection-layer\"></div>\n        </div>\n        `;\n        this.container = _container.querySelector('.grid-container')!;\n        this.wrapper.appendChild(_container);\n        this.ctxmenu = new ContextMenu();\n        _container.append(this.ctxmenu.container)\n        // this.container.style.minHeight = '100%';\n        this.container.style.width = '100%';\n        // this.container.style.height = '100%';\n        this.container.style.position = 'relative';\n        this.container.style.overflow = 'auto';\n        this.container.scrollLeft = 0;\n        this.container.scrollTop = 0;\n        this.headerContainer = _container.querySelector('.header-container')!;\n        this.rowNumberContainer = _container.querySelector('.row-number-container')!;\n        this.cornerCell = _container.querySelector('.corner-cell')!;\n        this.selectionLayer = _container.querySelector('.selection-layer')!;\n        this.mergeButton = _container.querySelector('.merge-button')!;\n        this.formatButton = _container.querySelector('.format-button')!;\n        this.lastDevicePixelRatio = window.devicePixelRatio;\n        this.lastBlockCanvases = this.blockCanvases();\n        // const rect = this.container.getBoundingClientRect();\n        // this.cornerCell.style.top = `${rect.y}px`;\n\n        // Configuration\n        this.cellWidth = options.cellWidth ?? 64;\n        this.cellHeight = options.cellHeight ?? 20;\n        this.blockRows = options.blockRows ?? 28;  // Max rows per canvas block\n        this.blockCols = options.blockCols ?? 30;  // Max cols per canvas block\n        this.paddingBlocks = options.paddingBlocks ?? 1; // Extra blocks to render around visible area\n        this.padding = options.padding || 1; // number of adjacent blocks to render\n        this.MAX_HISTORY_SIZE = 100;\n        this.rowNumberWidth = 42;\n        this.headerRowHeight = this.cellHeight || 30;\n        // this.headerContainer.style.height = `${this.headerRowHeight}px`;\n        this.headerContainer.style.lineHeight = `${this.headerRowHeight}px`;\n        this.selectionLayer.style.top = `${this.headerRowHeight}px`;\n        this.selectionLayer.style.left = `${this.rowNumberWidth}px`;\n        this.rowNumberContainer.style.width = `${this.rowNumberWidth}px`;\n        this.rowNumberContainer.style.lineHeight = `${this.headerRowHeight}px`;\n        this.cornerCell.style.width = `${this.rowNumberWidth}px`;\n        this.cornerCell.style.height = `${this.headerRowHeight}px`;\n        this.cornerCell.style.marginTop = `-${this.headerRowHeight + 1}px`; // -1 for border\n        if (options.subscribeFinance) {\n            this.subscribeFinance();\n        }\n\n        // State\n        this.mergedCells = options.mergedCells || [];\n        this.heightOverrides = this.buildOverrides(options.heightOverrides);\n        this.widthOverrides = this.buildOverrides(options.widthOverrides);\n        this.gridlinesOn = options.gridlinesOn ?? true;\n        this.activeBlocks = new Map(); // Track active canvas blocks\n        // window.activeBlocks = this.activeBlocks;\n        // window.renderBlock = this.renderBlock.bind(this);\n        this.undoStack = [];\n        this.redoStack = [];\n        this.elRegistry = {};\n        this.heightAccum = [];\n        this.widthAccum = [];\n        this.isResizing = false;\n        this.resizeStart = null;\n        this.resizeInitialSize = null;\n        this.busy = false;\n\n        // Selection state\n        this.selectedCell = null;\n        this.isSelecting = false;\n        this.selectionStart = null;\n        this.selectionEnd = null;\n        this.selectionHandle = null;\n        this.draggingHeader = null;\n        this.selectedCols = new Set();\n        this.selectedRows = new Set();\n\n        // Metrics\n        this.visibleStartRow = 0;\n        this.visibleEndRow = 0;\n        this.visibleStartCol = 0;\n        this.visibleEndCol = 0;\n\n        // Initialize\n        this.initEventListeners();\n        this.createSelectionHandle();\n        this.addNewSelection();\n\n        // Add edit input element\n        this.editInput = document.createElement('input');\n        this.editInput.className = 'cell-edit-input';\n        this.editInput.style.position = 'absolute';\n        this.editInput.style.display = 'none';\n        this.container.appendChild(this.editInput);\n        this.initRender();\n        this.data = null;\n        this.parser = null;\n        // if (!this.restoreSave()) {\n            this.setData(new SparseGrid(), options.initialCells);\n        // }\n    }\n\n    initRender() {\n        this.updateGridDimensions();\n        this.renderHeaders();\n        this.renderRowNumbers();\n        this.updateVisibleGrid();\n    }\n\n    buildOverrides(overrides: any) {\n        if (!overrides) return [];\n        const _overrides: any = [];\n        for (let key in overrides) {\n            _overrides[key] = overrides[key];\n        }\n        return _overrides;\n    }\n\n    subscribeFinance() {\n        const f = new FinancialSubscriber();\n        f.listenYA([\"API\", \"^GSPC\", \"^DJI\", \"^IXIC\", \"^RUT\", \"CL=F\", \"GC=F\", \"NVDA\", \"GME\", \"RKT\", \"GAP\", \"BLD\", \"IBP\"]);\n        f.onTick((data: any) => {\n            const cells = tickerReg[data.id] || {};\n            for (let key in cells) {\n                const [row,col] = key.split(',');\n                this.renderCell(row,col);\n            }\n            console.log('gigasheet::ontick', data)\n        });\n    }\n\n    initEventListeners() {\n        this.container.addEventListener('scroll', () => {\n            requestAnimationFrame(() => this.handleScroll());\n        });\n\n        const resizeObserver = new ResizeObserver(() => {\n            this.updateGridDimensions();\n            this.updateVisibleGrid();\n            this.updateSelection();\n            this.updateRenderingQuality();\n            // this.contextMenu.style.width = `${130 * this.scaler()}px`;\n            // this.contextMenu.style.fontSize = `${14 * this.scaler()}px`;\n        });\n        resizeObserver.observe(this.container);\n\n        // Selection event listeners\n        this.container.addEventListener('mousedown', this.handleMouseDown.bind(this));\n        document.addEventListener('mousemove', this.handleMouseMove.bind(this));\n        document.addEventListener('mouseup', this.handleMouseUp.bind(this));\n        // Edit event listeners\n        this.container.addEventListener('dblclick', this.handleCellDblClick.bind(this));\n        document.addEventListener('keydown', this.handleKeyDown.bind(this));\n\n        // Copy selected cells to clipboard\n        document.addEventListener('copy', (e) => {\n            if (this.editingCell) return;\n            if (!this.selectionBoundRect) return;\n            const { startRow, startCol, endRow, endCol } = this.selectionBoundRect;\n\n            let clipboardData = '';\n            for (let row = startRow; row <= endRow; row++) {\n                for (let col = startCol; col <= endCol; col++) {\n                    const value = this.getCellText(row, col);\n                    clipboardData += value;\n                    if (col < endCol) clipboardData += '\\t';\n                }\n                if (row < endRow) clipboardData += '\\n';\n            }\n\n            e.clipboardData!.setData('text/plain', clipboardData);\n            e.preventDefault();\n        });\n\n        // Show context menu on right-click\n        this.container.addEventListener('contextmenu', (e: any) => {\n            if ((e.target as HTMLElement).closest('.row-number-container')) return;\n            if ((e.target as HTMLElement).closest('.header-container')) return;\n            if ((e.target as HTMLElement).closest('.corner-cell')) return;\n            if (e.target.closest('.cell-edit-input')) return;\n            e.preventDefault(); // Prevent the default browser context menu\n        });\n\n        this._container.querySelector('.align-button-group')?.addEventListener('click', (e: any) => {\n            // console.log('clicked align buttons', e.target?.getAttribute('data-align'))\n            const textAlign = e.target?.getAttribute('data-align');\n            const selectedCells = this.getSelectedCells();\n            this.setCells(selectedCells, 'textAlign', textAlign);\n        })\n        this._container.querySelector('.quick-text-actions-buttons')?.addEventListener('click', async (e: any) => {\n            // console.log('clicked align buttons', e.target?.getAttribute('data-align'))\n            const action = e.target?.getAttribute('data-action');\n            if (action === 'copy') {\n                document.execCommand('copy');\n            } else if (action === 'paste') {\n                const clipboardText = await navigator.clipboard.readText();\n                this.handlePaste(clipboardText);\n            } else if (action === 'cut') {\n                document.execCommand('copy');\n                this.clearSelectedCells();\n            }\n        })\n        document.addEventListener('paste', (e) => {\n            if (this.editingCell) return;\n            this.handlePaste(e.clipboardData!.getData('text/plain'));\n            e.preventDefault();\n        });\n\n        this.mergeButton.onclick = (e) => {\n            e.preventDefault();\n            this.mergeSelectedCells();\n        }\n        this.formatButton.onclick = (e) => {\n            e.preventDefault();\n            this.openFormatMenu();\n        }\n        this.ctxmenu.onClick(async (action: string) => {\n            if (action === 'copy') {\n                document.execCommand('copy');\n            } else if (action === 'cut') {\n                document.execCommand('copy');\n                this.clearSelectedCells();\n            } else if (action === 'paste') {\n                if (this.editingCell) return;\n                const clipboardText = await navigator.clipboard.readText();\n                this.handlePaste(clipboardText);\n            } else if (action === 'insert-row') {\n                this.insertRow();\n            } else if (action === 'insert-column') {\n                this.insertCol();\n            } else if (action === 'delete-row') {\n                this.deleteRow();\n            } else if (action === 'delete-column') {\n                this.deleteCol();\n            } else if (action === 'clear') {\n                this.clearSelectedCells();\n            } else if (action === 'toggle-gridlines') {\n                this.toggleGridlines();\n                this.forceRerender();\n            } else if (action === 'merge') {\n                this.mergeSelectedCells();\n            } else if (action === 'unmerge') {\n                this.unmergeSelectedCells();\n            }\n        })\n    }\n\n    showContextMenu(x: number, y: number, row: number, col: number) {\n        const rect = this.container.getBoundingClientRect();\n        this.ctxmenu.setPosition(x,y,rect)\n        if (!this.rowColInBounds(row, col, this.selectionBoundRect)) {\n            this.selectCell({ row, col });\n        }\n    }\n\n    deleteRow(row: any = null, record = true) {\n        row = row != null ? row : this.selectionStart?.row;\n        if (row == null) return;\n        const cellsNeedingShift = shiftDependenciesUp(row);\n        for (let [row, col] of cellsNeedingShift) {\n            const newText = shiftTextRefs(this.getCellText(row, col), 'up');\n            this.setText(parseInt(row), parseInt(col), newText)\n        }\n        const rowData = this.data.deleteRow(row);\n        this.mergedCells.forEach((merge: any) => {\n            if (merge.startRow >= row) {\n                merge.startRow--;\n                merge.endRow--;\n            }\n        });\n        const heightOverride = this.heightOverrides[row];\n        delete this.heightOverrides[row];\n        this.shiftHeightOverrides(row, -1);\n        this.updateHeightAccum();\n        this.renderRowNumbers();\n        record && this.recordChanges([{ changeKind: 'deleteEntireRow', row, rowData, heightOverride }]);\n        this.forceRerender();\n        this.selectionBoundRect = this.getBoundingRectCells(this.selectionBoundRect.startRow, this.selectionBoundRect.startCol, this.selectionBoundRect.endRow, this.selectionBoundRect.endCol);\n        this.updateSelection();\n    }\n\n    deleteCol(col: any = null, record = true) {\n        col = col != null ? col : this.selectionStart?.col;\n        if (col == null) return;\n        const cellsNeedingShift = shiftDependenciesLeft(col);\n        for (let [row, col] of cellsNeedingShift) {\n            const newText = shiftTextRefs(this.getCellText(row, col), 'left');\n            this.setText(parseInt(row), parseInt(col), newText)\n        }\n        const colData = this.data.deleteCol(col);\n        this.mergedCells.forEach((merge: any) => {\n            if (merge.startCol >= col) {\n                merge.startCol--;\n                merge.endCol--;\n            }\n        });\n        const widthOverride = this.widthOverrides[col];\n        delete this.widthOverrides[col];\n        this.shiftWidthOverrides(col, -1);\n        this.updateWidthAccum();\n        this.renderHeaders();\n        \n        record && this.recordChanges([{ changeKind: 'deleteEntireCol', col, colData, widthOverride }]);\n        this.forceRerender();\n        this.selectionBoundRect = this.getBoundingRectCells(this.selectionBoundRect.startRow, this.selectionBoundRect.startCol, this.selectionBoundRect.endRow, this.selectionBoundRect.endCol);\n        this.updateSelection();\n    }\n\n    shiftHeightOverrides(pivot: any, amount = 1) {\n        if (amount === -1) {\n            this.heightOverrides.splice(pivot, 1);\n        } else if (amount === 1) {\n            this.heightOverrides.splice(pivot, 0, undefined);\n            delete this.heightOverrides[pivot];\n        }\n    }\n\n    shiftWidthOverrides(pivot: any, amount = 1) {\n        if (amount === -1) {\n            this.widthOverrides.splice(pivot, 1);\n        } else if (amount === 1) {\n            this.widthOverrides.splice(pivot, 0, undefined);\n            delete this.widthOverrides[pivot];\n        }\n    }\n\n    insertRow(row: any = null, data = null, record = true, heightOverride = null) {\n        row = row != null ? row : this.selectionStart?.row;\n        if (row == null) return;\n        const cellsNeedingShift = shiftDependenciesDown(row);\n        for (let [row, col] of cellsNeedingShift) {\n            const newText = shiftTextRefs(this.getCellText(row, col), 'down');\n            this.setText(parseInt(row), parseInt(col), newText)\n        }\n        this.data.addRow(row, data);\n        this.mergedCells.forEach((merge: any) => {\n            if (merge.startRow >= row) {\n                merge.startRow++;\n                merge.endRow++;\n            }\n        });\n        this.shiftHeightOverrides(row, 1);\n        if (heightOverride != null) this.heightOverrides[row] = heightOverride;\n        this.updateHeightAccum();\n        this.renderRowNumbers();\n        record && this.recordChanges([{ changeKind: 'insertEntireRow', row }]);\n        this.forceRerender();\n        this.selectionBoundRect = this.getBoundingRectCells(this.selectionBoundRect.startRow, this.selectionBoundRect.startCol, this.selectionBoundRect.endRow, this.selectionBoundRect.endCol);\n        this.updateSelection();\n    }\n\n    insertCol(col: any = null, data = null, record = true, widthOverride = null) {\n        col = col != null ? col : this.selectionStart?.col;\n        if (col == null) return;\n        const cellsNeedingShift = shiftDependenciesRight(col);\n        for (let [row, col] of cellsNeedingShift) {\n            const newText = shiftTextRefs(this.getCellText(row, col), 'right');\n            this.setText(parseInt(row), parseInt(col), newText)\n        }\n        this.data.addCol(col, data);\n        this.mergedCells.forEach((merge: any) => {\n            if (merge.startCol >= col) {\n                merge.startCol++;\n                merge.endCol++;\n            }\n        });\n        this.shiftWidthOverrides(col, 1);\n        if (widthOverride != null) this.widthOverrides[col] = widthOverride;\n        this.updateWidthAccum();\n        this.renderHeaders();\n        \n        record && this.recordChanges([{ changeKind: 'insertEntireCol', col }]);\n        this.forceRerender();\n        this.selectionBoundRect = this.getBoundingRectCells(this.selectionBoundRect.startRow, this.selectionBoundRect.startCol, this.selectionBoundRect.endRow, this.selectionBoundRect.endCol);\n        this.updateSelection();\n    }\n\n    toggleGridlines() {\n        this.gridlinesOn = !this.gridlinesOn;\n        this.forceRerender();\n    }\n\n    scaler() {\n        return (devicePixelRatio < 1 ? (1 + (1 - devicePixelRatio)) * (1 + (1 - devicePixelRatio)) : 1);\n    }\n\n    // Modify the clearSelectedCells function to record changes\n    clearSelectedCells() {\n        if (!this.selectionBoundRect) return;\n        const { startRow, startCol, endRow, endCol } = this.selectionBoundRect;\n\n        const changes = [];\n        const deletions = [];\n        for (let row = startRow; row <= endRow; row++) {\n            for (let col = startCol; col <= endCol; col++) {\n                const obj = { row, col, previousValue: this.getCellText(row, col), newValue: '', changeKind: 'valchange' };\n                this.clearElRegistry(row, col);\n                deletions.push([row, col]);\n                changes.push(obj);\n            }\n        }\n        this.data.deleteCells(deletions);\n        this.recordChanges(changes);\n\n        for (let [row, col] of deletions) {\n            this.renderCell(row, col);\n        }\n    }\n\n    getColumnName(columnNumber: number) {\n        let columnName = '';\n        while (columnNumber >= 0) {\n            const remainder = columnNumber % 26;\n            columnName = String.fromCharCode(65 + remainder) + columnName;\n            columnNumber = Math.floor(columnNumber / 26) - 1;\n\n            if (columnNumber < 0) break;\n        }\n        return columnName;\n    }\n\n    handlePaste(text: string) {\n        if (!this.selectionBoundRect) return;\n        const { startRow, startCol } = this.selectionBoundRect;\n\n        const clipboardData = text;\n        const rowsData = clipboardData.split('\\n');\n        const changes = []; // To record changes for undo/redo\n\n        for (let i = 0; i < rowsData.length; i++) {\n            const rowData = rowsData[i].split('\\t');\n            for (let j = 0; j < rowData.length; j++) {\n                const row = startRow + i;\n                const col = startCol + j;\n                // if (row <= this.totalRowBounds && col <= this.totalColBounds) {\n                    changes.push({\n                        row,\n                        col,\n                        previousValue: this.getCellText(row, col),\n                        newValue: rowData[j],\n                        changeKind: 'valchange'\n                    });\n                    this.setText(row, col, rowData[j]);\n                    this.renderCell(row, col);\n                // }\n            }\n        }\n        // Record the changes in the undo stack\n        if (changes.length > 0) {\n            this.recordChanges(changes);\n        }\n    }\n\n    // Function to record a change in the history\n    recordChanges(changes: any) {\n        // Clear redo stack when a new change is made\n        this.redoStack = [];\n\n        // Add the change to the undo stack\n        this.undoStack.push(changes);\n\n        // Limit the size of the undo stack\n        if (this.undoStack.length > this.MAX_HISTORY_SIZE) {\n            this.undoStack.shift(); // Remove the oldest change\n        }\n    }\n\n    setWidthOverride(col: any, width: any) {\n        if (width == null) {\n            delete this.widthOverrides[col];\n        } else {\n            this.widthOverrides[col] = width;\n        }\n    }\n\n    setHeightOverride(row: any, height: any) {\n        if (height == null) {\n            delete this.heightOverrides[row];\n        } else {\n            this.heightOverrides[row] = height;\n        }\n    }\n\n    // Function to undo the last change\n    undo() {\n        if (this.undoStack.length === 0) return; // Nothing to undo\n\n        const changes: any = this.undoStack.pop(); // Get the last change\n        const redoChanges = [];\n        const updatedCells = [];\n        let rerender = false;\n        for (const change of changes) {\n            const { row, col, previousValue, changeKind } = change;\n            if (changeKind === 'merge') {\n                this.unmergeSelectedCells(change.bounds, false); rerender = true;\n                redoChanges.push({ changeKind: 'unmerge', bounds: change.bounds });\n            } else if (changeKind === 'unmerge') {\n                this.mergeSelectedCells(change.bounds, false); rerender = true;\n                redoChanges.push({ changeKind: 'merge', bounds: change.bounds });\n            } else if (changeKind === 'deleteEntireRow') {\n                this.insertRow(change.row, change.rowData, false, change.heightOverride); rerender = true;\n                // this.data.addRow(change.row, change.rowData);\n                redoChanges.push({ changeKind: 'deleteEntireRow', row: change.row, rowData: change.rowData, heightOverride: change.heightOverride });\n            } else if (changeKind === 'deleteEntireCol') {\n                this.insertCol(change.col, change.colData, false, change.widthOverride); rerender = true;\n                redoChanges.push({ changeKind: 'deleteEntireCol', col: change.col, colData: change.colData, widthOverride: change.widthOverride });\n            } else if (changeKind === 'insertEntireRow') {\n                this.deleteRow(change.row, false); rerender = true;\n                redoChanges.push({ changeKind: 'insertEntireRow', row: change.row });\n            } else if (changeKind === 'insertEntireCol') {\n                this.deleteCol(change.col, false); rerender = true;\n                redoChanges.push({ changeKind: 'insertEntireCol', col: change.col });\n            } else if (changeKind === 'widthOverrideUpdate') {\n                const prev = this.widthOverrides[change.col];\n                this.setWidthOverride(change.col, change.value);\n                this.updateWidthAccum();\n                this.renderHeaders();\n                rerender = true;\n                redoChanges.push({ changeKind: 'widthOverrideUpdate', col: change.col, value: prev });\n            } else if (changeKind === 'heightOverrideUpdate') {\n                const prev = this.heightOverrides[change.row];\n                this.setHeightOverride(change.row, change.value);\n                this.updateHeightAccum();\n                this.renderRowNumbers();\n                rerender = true;\n                redoChanges.push({ changeKind: 'heightOverrideUpdate', row: change.row, value: prev });\n            } else if (changeKind === 'valchange') {\n                // Record the current value for redo\n                redoChanges.push({ row, col, previousValue: this.getCellText(row, col), newValue: previousValue, changeKind: 'valchange' });\n                // Revert the cell to its previous value\n                this.setCell(row, col, 'text', previousValue);\n                updatedCells.push([row, col]);\n            } else {\n                console.log('UNHANDLED UNDO:', changeKind)\n            }\n        }\n        this.redoStack.push(redoChanges);\n\n        if (rerender) {\n            this.forceRerender();\n        } else {\n            this.rerenderCells(updatedCells);\n        }\n        this.updateSelection();\n    }\n\n    rerenderCells(arr: any = []) {\n        for (let [row, col] of arr) {\n            this.renderCell(row, col);\n        }\n        this.rerenderMerges(arr);\n    }\n    rerenderMerges(arr: any = []) {\n        const mergeSet = new Set();\n        for (let [row, col] of arr) {\n            const merge = this.getMerge(row, col);\n            if (!merge) continue;\n            mergeSet.add(merge);\n            for (let block of this.getBlocksInMerge(merge)) {\n                this.renderCell(merge.startRow, merge.startCol, block);\n            }\n        }\n    }\n\n    // Function to redo the last undone change\n    redo() {\n        if (this.redoStack.length === 0) return; // Nothing to redo\n\n        const changes = this.redoStack.pop(); // Get the last undone change\n        const undoChanges = [];\n        const updatedCells = [];\n        let rerender = false;\n        for (const change of changes) {\n            const { row, col, newValue, previousValue, changeKind } = change;\n            if (changeKind === 'unmerge') {\n                this.mergeSelectedCells(change.bounds, false); rerender = true;\n                undoChanges.push({ changeKind: 'merge', bounds: change.bounds });\n            } else if (changeKind === 'merge') {\n                this.unmergeSelectedCells(change.bounds, false); rerender = true;\n                undoChanges.push({ changeKind: 'unmerge', bounds: change.bounds });\n            } else if (changeKind === 'deleteEntireRow') {\n                this.deleteRow(change.row, false); rerender = true;\n                undoChanges.push({ changeKind: 'deleteEntireRow', row: change.row, rowData: change.rowData, heightOverride: change.heightOverride });\n            } else if (changeKind === 'deleteEntireCol') {\n                this.deleteCol(change.col, false); rerender = true;\n                undoChanges.push({ changeKind: 'deleteEntireCol', col: change.col, colData: change.colData, widthOverride: change.widthOverride });\n            } else if (changeKind === 'insertEntireRow') {\n                this.insertRow(change.row, null, false); rerender = true;\n                undoChanges.push({ changeKind: 'insertEntireRow', row: change.row });\n            } else if (changeKind === 'insertEntireCol') {\n                this.insertCol(change.col, null, false); rerender = true;\n                undoChanges.push({ changeKind: 'insertEntireCol', col: change.col });\n            } else if (changeKind === 'widthOverrideUpdate') {\n                const prev = this.widthOverrides[change.col];\n                this.setWidthOverride(change.col, change.value);\n                this.updateWidthAccum();\n                this.renderHeaders();\n                rerender = true;\n                undoChanges.push({ changeKind: 'widthOverrideUpdate', col: change.col, value: prev });\n            } else if (changeKind === 'heightOverrideUpdate') {\n                const prev = this.heightOverrides[change.row];\n                this.setHeightOverride(change.row, change.value);\n                this.updateHeightAccum();\n                this.renderRowNumbers();\n                rerender = true;\n                undoChanges.push({ changeKind: 'heightOverrideUpdate', row: change.row, value: prev });\n            } else if (changeKind === 'valchange') {\n                // Record the current value for undo\n                undoChanges.push({ row, col, previousValue: this.getCellText(row, col), newValue, changeKind: 'valchange' });\n                // Apply the new value to the cell\n                this.setCell(row, col, 'text', previousValue);\n                updatedCells.push([row, col]);\n            } else {\n                console.log('UNHANDLED REDO:', changeKind)\n            }\n        }\n        this.undoStack.push(undoChanges);\n\n        if (rerender) {\n            this.forceRerender();\n        } else {\n            this.rerenderCells(updatedCells);\n        }\n        this.updateSelection();\n    }\n\n    rowColInBounds(row: number, col: number, bounds: any) {\n        if (bounds == null) return false;\n        return (\n            row <= bounds.endRow &&\n            row >= bounds.startRow &&\n            col <= bounds.endCol &&\n            col >= bounds.startCol\n        );\n    }\n\n    // Function to hide the context menu\n    hideContextMenu() {\n        this.ctxmenu.hide();\n    }\n\n    handleCellDblClick(e: any) {\n        if (e.target === this.editInput) return;\n        const { row, col } = this.getCellFromEvent(e);\n        if (row === -1 || col === -1) return;\n        this.startCellEdit(row, col);\n    }\n\n    openFormatMenu() {\n        const { win, addListener } = launchFormatMenu();\n        addListener((type: string, value: string) => {\n            const selectedCells = this.getSelectedCells();\n            this.setCells(selectedCells, type, value);\n        });\n    }\n\n    forceRerender() {\n        this.updateVisibleGrid(true);\n    }\n\n    handleKeyDown(e: any) {\n        const key = e.key.toLowerCase();\n        if ((key === 'f2') && this.selectionStart) {\n            e.preventDefault();\n            if (this.editingCell) return;\n            this.startCellEdit(this.selectionStart.row, this.selectionStart.col);\n        }\n        else if (key === 'f3') {\n            if (this.editingCell) return;\n            this.openFormatMenu();\n            e.preventDefault();\n        }\n        // Escape key to cancel editing\n        else if (key === 'escape' && this.editInput.style.display !== 'none') {\n            this.cancelCellEdit();\n        }\n        else if (key === 'delete') {\n            if (this.editingCell) return;\n            this.clearSelectedCells();\n        }\n        else if (key === 'x' && e.ctrlKey) {\n            if (this.editingCell) return;\n            document.execCommand('copy');\n            this.clearSelectedCells();\n        }\n        else if (key === 's' && e.ctrlKey) {\n            if (this.editingCell) return;\n            const data = this.data.save();\n            const save = {\n                mergedCells: this.mergedCells,\n                heightOverrides: this.heightOverrides,\n                widthOverrides: this.widthOverrides,\n                gridlinesOn: this.gridlinesOn,\n                data\n            }\n            // localStorage.setItem('data-save', data)\n            localStorage.setItem('sheet-state', JSON.stringify(save))\n            e.preventDefault();\n        }\n        else if (key === 'l' && e.ctrlKey) {\n            if (this.editingCell) return;\n            this.restoreSave();\n            e.preventDefault();\n        }\n        else if (e.ctrlKey || e.metaKey) { // Check for Ctrl (Windows/Linux) or Cmd (Mac)\n            if (this.editingCell) return;\n            if (key === 'y' || (e.shiftKey && key === 'z')) {\n                e.preventDefault(); // Prevent default behavior\n                this.redo();\n            } else if (key === 'z') {\n                e.preventDefault(); // Prevent default behavior (e.g., browser undo)\n                this.undo();\n            }\n        } else if (key === 'arrowup' || key === 'arrowdown' || key === 'arrowleft' || key === 'arrowright' || key === 'enter') {\n            if (!this.selectionEnd || this.editingCell) return;\n            e.preventDefault();\n            this.handleArrowKeyDown(e);\n        } else if (this.selectionStart && e.key?.length === 1) {\n            if (this.editingCell) return;\n            this.startCellEdit(this.selectionStart.row, this.selectionStart.col, e.key);\n        }\n    }\n    restoreSave() {\n        let save: any = localStorage.getItem('sheet-state');\n        if (save) {\n            try {\n                save = JSON.parse(save);\n                if (!save) return false;\n            } catch {\n                return false;\n            }\n            this.widthOverrides = save.widthOverrides;\n            this.heightOverrides = save.heightOverrides;\n            this.mergedCells = save.mergedCells;\n            this.gridlinesOn = save.gridlinesOn;\n            const g = new SparseGrid();\n            g.restore(save.data);\n            this.setData(g);\n            this.updateSelection();\n            return true;\n        }\n        return false;\n    }\n    handleArrowKeyDown(e: any) {\n        if (!this.selectionEnd || !this.selectionStart) return;\n        const deltas: any = {\n            'ArrowUp': [-1, 0], 'ArrowDown': [1, 0], 'ArrowLeft': [0, -1], 'ArrowRight': [0, 1], 'Enter': e.shiftKey ? [-1, 0] : [1,0]\n        }\n        const curMerge = this.getMerge(this.selectionEnd.row, this.selectionEnd.col);\n        let row = this.selectionEnd.row + deltas[e.key][0];\n        let col = this.selectionEnd.col + deltas[e.key][1];\n        const merge = this.getMerge(row, col);\n        if (e.shiftKey) {\n            // TODO: do in less bruteforce way\n            const prevRect = JSON.stringify(this.selectionBoundRect);\n            if (e.key === 'ArrowUp' || (e.key === 'Enter' && e.shiftKey)) {\n                let curRect;\n                while (row > 0) {\n                    curRect = this.getBoundingRectCells(this.selectionStart.row, this.selectionStart.col, row, col);\n                    if (prevRect !== JSON.stringify(curRect)) break;\n                    row--;\n                }\n            }\n            else if (e.key === 'ArrowDown' || (e.key === 'Enter' && !e.shiftKey)) {\n                let curRect;\n                while (row < this.getTotalRows()) {\n                    curRect = this.getBoundingRectCells(this.selectionStart.row, this.selectionStart.col, row, col);\n                    if (prevRect !== JSON.stringify(curRect)) break;\n                    row++;\n                }\n            }\n            else if (e.key === 'ArrowLeft') {\n                let curRect;\n                while (col > 0) {\n                    curRect = this.getBoundingRectCells(this.selectionStart.row, this.selectionStart.col, row, col);\n                    if (prevRect !== JSON.stringify(curRect)) break;\n                    col--;\n                }\n            }\n            else if (e.key === 'ArrowRight') {\n                let curRect;\n                while (col < this.getTotalCols()) {\n                    curRect = this.getBoundingRectCells(this.selectionStart.row, this.selectionStart.col, row, col);\n                    if (prevRect !== JSON.stringify(curRect)) break;\n                    col++;\n                }\n            }\n        } else if (merge && merge === curMerge) {\n            if (e.key === 'ArrowUp') { row = merge.startRow - 1; }\n            else if (e.key === 'ArrowDown' || e.key === 'Enter') { row = merge.endRow + 1; }\n            else if (e.key === 'ArrowLeft') { col = merge.startCol - 1; }\n            else if (e.key === 'ArrowRight') { col = merge.endCol + 1; }\n        }\n        row = Math.max(0, row); row = Math.min(row, this.totalRowBounds-1);\n        col = Math.max(0, col); col = Math.min(col, this.totalColBounds-1);\n        if (e.shiftKey && e.key !== 'Enter') this.selectionEnd = { row, col };\n        this.selectCell({ row, col, continuation: e.shiftKey && e.key !== 'Enter' });\n    }\n    inVisibleBounds(row: number, col: number) {\n        const { row: visStartRow, col: visStartCol } = this.getTopLeftBounds();\n        const { row: visEndRow, col: visEndCol } = this.getBottomRightBounds();\n        return row >= visStartCol && row <= visEndRow &&\n            col >= visStartCol && col <= visEndCol;\n    }\n    scrollTo(row: number, col: number, delta: string) {\n        if (row < 0 || row >= this.totalRows || col < 0 || col >= this.totalCols) return;\n        const merge = this.getMerge(row, col);\n        let left, top, width, height, value;\n        if (merge) {\n            left = this.getWidthOffset(merge.startCol, true);\n            top = this.getHeightOffset(merge.startRow, true);\n            width = this.getMergeWidth(merge);\n            height = this.getMergeHeight(merge);\n            value = this.getCellText(merge.startRow, merge.startCol);\n        } else {\n            left = this.getWidthOffset(col, true);\n            top = this.getHeightOffset(row, true);\n            width = this.getCellWidth(row, col);\n            height = this.rowHeight(row);\n            value = this.getCellText(row, col);\n        }\n        if (delta === 'ArrowUp') {\n            this.container.scrollTo({\n                top: top - 100,\n                behavior: 'smooth'\n            });\n\n        } else if (delta === 'ArrowDown') {\n            this.container.scrollTo({\n                // top: top + 100,\n                top,\n                behavior: 'smooth'\n            });\n        } else if (delta == 'ArrowLeft') {\n            this.container.scrollTo({\n                // left: left - 100,\n                left,\n                behavior: 'smooth'\n            });\n        } else if (delta === 'ArrowRight') {\n            this.container.scrollTo({\n                // left: left + width,\n                left: left - this.container.clientWidth - width,\n                behavior: 'smooth'\n            });\n        }\n    }\n    getSelectedCells() {\n        if (!this.selectionBoundRect) return [];\n        const { startRow, startCol, endRow, endCol } = this.selectionBoundRect;\n        const cells = this.data.getCellsForce(startRow, startCol, endRow, endCol).filter((cell: {row:number,col:number}) => this.isValid(cell.row, cell.col));\n        return cells;\n    }\n    isValid(row:number,col:number) {\n        const merge = this.getMerge(row,col);\n        if (!merge) return true;\n        return merge.startRow == row && merge.startCol == col;\n    }\n    getTotalRows() {\n        return this.totalRows;\n    }\n    getTotalCols() {\n        return this.totalCols;\n    }\n    get totalRows() {\n        return Math.max(this.data?.rowCount || 0, this.blockRows) + (this.blockRows * this.padding);\n    }\n    get totalCols() {\n        return Math.max(this.data?.colCount || 0, this.blockCols) + (this.blockCols * this.padding);\n    }\n    getMerge(row: number, col: number) {\n        // Check if the cell is part of a merged range\n        return this.mergedCells.find((merged: any) =>\n            row >= merged.startRow &&\n            row <= merged.endRow &&\n            col >= merged.startCol &&\n            col <= merged.endCol\n        );\n    }\n\n    getMergeWidth(merge: any) {\n        return this.getWidthBetweenColumns(merge.startCol, merge.endCol+1);\n    }\n    getMergeHeight(merge: any) {\n        return this.getHeightBetweenRows(merge.startRow, merge.endRow+1);\n    }\n    startCellEdit(row: number, col: number, startingValue?: string) {\n        if (row < 0 || row > this.totalRowBounds || col < 0 || col > this.totalColBounds) return;\n        const merge = this.getMerge(row, col);\n        let left, top, width, height, value;\n        if (merge) {\n            left = this.getWidthOffset(merge.startCol, true);\n            top = this.getHeightOffset(merge.startRow, true);\n            width = this.getMergeWidth(merge);\n            height = this.getMergeHeight(merge);\n            value = startingValue != null ? '' : this.getCellText(merge.startRow, merge.startCol);\n            row = merge.startRow, col = merge.startCol;\n        } else {\n            left = this.getWidthOffset(col, true);\n            top = this.getHeightOffset(row, true);\n            width = this.getCellWidth(row, col);\n            height = this.rowHeight(row);\n            value = startingValue != null ? '' : this.getCellText(row, col);\n        }\n\n        // Set up edit input\n        this.editInput.value = value;\n        this.editInput.style.left = `${left}px`;\n        this.editInput.style.top = `${top}px`;\n        this.editInput.style.minWidth = `${width}px`;\n        this.editInput.style.width = (value.length + 1) + \"ch\";\n        this.editInput.style.height = `${height}px`;\n        this.editInput.style.display = 'block';\n        this.editInput.focus();\n\n        // Store edit state\n        this.editingCell = { row, col };\n        this.editInput.onblur = this.finishCellEdit.bind(this);\n        this.editInput.onkeydown = (e) => {\n            if (e.key === 'Enter') {\n                this.finishCellEdit();\n            } else {\n                this.editInput.style.width = (this.editInput.value.length + 1) + \"ch\";\n            }\n        };\n    }\n\n    setText(row: number, col: number, text: string) {\n        this.setCell(row,col,'text',text)\n        // this.data?.setCellProperty(row, col, 'text', text);\n    }\n    setCell(row: number, col: number, field: string, value: any) {\n        const cell = this.getCell(row, col);\n        if (!cell) return;\n        cell[field] = value;\n        if (!this.data.has(row, col)) {\n            this.data.set(row, col, cell);\n        }\n    }\n    setCells(cells: any, field: string, value: any) {\n        for (let cell of cells) {\n            this.setCell(cell.row, cell.col, field, value);\n            this.renderCell(cell.row, cell.col);\n        }\n        if (field === 'cellType') {\n            console.log('forcing rerender')\n            this.forceRerender();\n        }\n    }\n    // mergeInCell(row: number, col: number, data: any) {\n    //     const cell = this.getCell(row, col);\n    //     if (!cell) return;\n    //     Object.assign(cell, data);\n    // }\n    finishCellEdit() {\n        if (!this.editingCell) return;\n\n        const { row, col } = this.editingCell;\n        if (this.editInput.value === this.getCellText(row, col)) {\n            this.cancelCellEdit();\n            return;\n        }\n        this.recordChanges([{ row, col, previousValue: this.getCellText(row, col), newValue: this.editInput.value, changeKind: 'valchange' }]);\n        this.setText(row, col, this.editInput.value);\n        // Hide input and redraw cell\n        this.cancelCellEdit();\n        const merge = this.getMerge(row,col);\n        if (merge) {\n            for (let block of this.getBlocksInMerge(merge)) {\n                this.renderCell(merge.startRow,merge.startCol,block);\n            }\n        } else {\n            this.renderCell(row, col);\n        }\n    }\n\n    getBlocksInMerge(merge: any): Set<any> {\n        const blockSet = new Set();\n        for (let i = merge.startRow; i <= merge.endRow; i++) {\n            for (let j = merge.startCol; j <= merge.endCol; j++) {\n                const block = this.getBlockOrSubBlock(i, j);\n                if (!block) continue;\n                if (blockSet.has(block)) continue;\n                blockSet.add(block);\n            }\n        }\n        return blockSet;\n    }\n\n    cancelCellEdit() {\n        this.editInput.style.display = 'none';\n        this.editingCell = null;\n        this.editInput.onblur = null;\n        this.editInput.onkeydown = null;\n    }\n\n    updateRenderingQuality() {\n        if (\n            this.lastBlockCanvases !== this.blockCanvases()\n        ) {\n            console.log(\"RESIZE\");\n            this.lastBlockCanvases = this.blockCanvases();\n            this.forceRerender();\n        } else if (Math.abs(window.devicePixelRatio - this.lastDevicePixelRatio) > 0.00) {\n            // Only update if scale changed significantly\n            this.lastDevicePixelRatio = window.devicePixelRatio;\n            console.log('update render quality')\n            requestAnimationFrame(() => {\n                if (this.busy) return;\n                const createTimeout = () =>\n                    setTimeout(() => {\n                        this.busy = true;\n                        this.activeBlocks.forEach(block => {\n                            if (block.subBlocks.length < 2) {\n                                this.renderBlock(block, true);\n                            } else {\n                                block.subBlocks.forEach((subBlock: any) => {\n                                    this.renderBlock(subBlock, true);\n                                })\n                            }\n                        });\n                        this.busy = false;\n                        this.rqtimeout = null;\n                    }, 200);\n                if (this.rqtimeout) clearTimeout(this.rqtimeout);\n                this.rqtimeout = createTimeout();\n            })\n        }\n    }\n\n    createSelectionHandle() {\n        this.selectionHandle = document.createElement('div');\n        this.selectionHandle.className = 'selection-handle bottom-right';\n        this.selectionHandle.style.display = 'none';\n        this.selectionLayer.appendChild(this.selectionHandle);\n\n        // Add drag event for the handle\n        this.selectionHandle.addEventListener('mousedown', (e) => {\n            e.stopPropagation();\n            if (!this.selectedCell) return;\n            this.isResizing = true;\n            this.resizeStart = { x: e.clientX, y: e.clientY };\n            this.resizeInitialSize = {\n                width: this.selectedCell.offsetWidth,\n                height: this.selectedCell.offsetHeight\n            };\n        });\n    }\n\n    handleMouseDown(e: any) { // handle dragging select cell logic\n        if (e.target.closest('.header-cell') ||\n            e.target.closest('.row-number-container') ||\n            e.target.closest('.corner-cell')) {\n                this.hideContextMenu();\n                return;\n            }\n        if (e.target === this.container) return;\n        if (e.target === this.editInput) return;\n        if (this.draggingHeader) return;\n        if (e.target !== this.ctxmenu.container && !this.ctxmenu.container.contains(e.target)) {\n            this.hideContextMenu();\n        }\n        if (e.button === 2) {\n            const x = e.clientX;\n            const y = e.clientY;\n            const { row, col } = this.getCellFromEvent(e);\n            this.showContextMenu(x, y, row, col);\n            return;\n        }\n        if (e.button !== 0) return;\n        this.handleSelectionMouseDown(e);\n    }\n\n    handleSelectionMouseDown(e: any) {\n        const { row, col }: {row: number, col: number} = this.getCellFromEvent(e);\n        if (e.ctrlKey && this.selectionStart) { // start new selection keep old one\n            this.selectionStart = null;\n            this.selectionEnd = null;\n            this.selectionBoundRect = null;\n            this.isSelecting = true;\n            this.addNewSelection();\n            this.selectCell({ row, col });\n        } else if (e.shiftKey && this.selectionStart) { // continue old selection\n            this.isSelecting = true;\n            this.selectCell({ row, col, continuation: true }); // kill old selections start new\n        } else {\n            this.isSelecting = true;\n            this.selectCell({ row, col, clear: true });\n        }\n    }\n\n    selectCell({ row, col, continuation = false, clear = false }: any) {\n        if (row === -1 || col === -1) return;\n        if (clear) {\n            this.selectionLayer.innerHTML = '';\n            this.addNewSelection();\n        }\n        if (!this.activeSelection) this.addNewSelection();\n        if (!continuation) this.selectionStart = { row, col };\n        this.selectionEnd = { row, col };\n        if (!this.selectionStart) return;\n        this.selectionBoundRect = this.getBoundingRectCells(this.selectionStart.row, this.selectionStart.col, row, col);\n        this.updateSelection();\n\n        // this.forceRerender(); // debug purposes, remove\n    }\n\n    getCellsInRange(startRow: number, startCol: number, endRow: number, endCol: number) {\n        const cells: any = [];\n        for (let i = startRow; i <= endRow; i++) {\n            for (let j = startCol; j <= endCol; j++) {\n                cells.push(this.getCell(i, j));\n            }\n        }\n        return cells;\n    }\n\n    getMergesInRange({ startRow, startCol, endRow, endCol }: Rect): Rect[] {\n        const merges: Set<Rect> = new Set();\n        for (let i = startRow; i <= endRow; i++) {\n            for (let j = startCol; j <= endCol; j++) {\n                const merge = this.getMerge(i, j);\n                if (merge) {\n                    merges.add(merge);\n                }\n            }\n        }\n        return [...merges.values()];\n    }\n\n    normalizeCoordinates({ startRow, startCol, endRow, endCol }: { startRow: number, startCol: number, endRow: number, endCol: number }) {\n        const _startRow = Math.min(startRow, endRow)\n        const _endRow = Math.max(startRow, endRow);\n        const _startCol = Math.min(startCol, endCol);\n        const _endCol = Math.max(startCol, endCol);\n        return { startRow: _startRow, startCol: _startCol, endRow: _endRow, endCol: _endCol };\n    }\n\n    getBoundingRectCells(startRow: number, startCol: number, endRow: number, endCol: number) {\n        ({ startRow, startCol, endRow, endCol } = this.normalizeCoordinates({ startRow, startCol, endRow, endCol }))\n        const merges: any = this.getMergesInRange({ startRow, startCol, endRow, endCol });\n        if (merges.length === 0) return { startRow, startCol, endRow, endCol };\n        for (const merge of merges) {\n            startRow = Math.min(startRow, merge.startRow);\n            startCol = Math.min(startCol, merge.startCol);\n            endRow = Math.max(endRow, merge.endRow);\n            endCol = Math.max(endCol, merge.endCol);\n        }\n        return { startRow, startCol, endRow, endCol };\n    }\n\n    handleMouseMove(e: any) {\n        if (this.draggingHeader) {\n            const scrollLeft = this.container.scrollLeft;\n            this.draggingHeader.el.style.left = `${scrollLeft + e.clientX - 8}px`;\n        } else if (this.draggingRow) {\n            const scrollTop = this.container.scrollTop;\n            const rect = this.container.getBoundingClientRect();\n            this.draggingRow.el.style.top = `${scrollTop + e.clientY - this.headerRowHeight - rect.y - 5}px`;\n        } else if (this.isSelecting) {\n            const { row, col } = this.getCellFromEvent(e);\n            if (row !== -1 && col !== -1) {\n                this.selectionEnd = { row, col };\n                if (!this.selectionStart) return;\n                this.selectionBoundRect = this.getBoundingRectCells(this.selectionStart.row, this.selectionStart.col, row, col);\n                this.updateSelection();\n            }\n        } else if (this.isResizing) {\n            const dx = e.clientX - this.resizeStart.x;\n            const dy = e.clientY - this.resizeStart.y;\n\n            const newWidth = Math.max(this.cellWidth, this.resizeInitialSize.width + dx);\n            const newHeight = Math.max(this.cellHeight, this.resizeInitialSize.height + dy);\n\n            if (!this.selectedCell) return;\n            this.selectedCell.style.width = `${newWidth}px`;\n            this.selectedCell.style.height = `${newHeight}px`;\n\n            // Position the handle\n            this.positionSelectionHandle();\n        }\n    }\n\n    handleMouseUp(e: any) {\n        if (this.isSelecting) {\n            this.isSelecting = false;\n            const { row, col } = this.getCellFromEvent(e);\n            if (row !== -1 && col !== -1) {\n                if (!this.selectionStart) return;\n                this.selectionEnd = { row, col };\n                const rect = this.getBoundingRectCells(this.selectionStart.row, this.selectionStart.col, row, col);\n                this.updateSelection();\n            }\n        } else if (this.isResizing) {\n            this.isResizing = false;\n        } else if (this.draggingHeader) {\n            const draggingHeader = this.draggingHeader;\n            const col = this.draggingHeader.col;\n            this.draggingHeader = null;\n            const scrollLeft = this.container.scrollLeft;\n            const diff = (scrollLeft + e.clientX) - this.getWidthOffset(col + 1, true);\n\n            \n            const prevOverride = this.widthOverrides[col];\n            const change = this.widthOverrides[col] ? this.widthOverrides[col] + diff : this.getCellWidth(col) + diff;\n            if (change <= 1) {\n                draggingHeader.el.style.left = draggingHeader.origLeft;\n                return;\n            }\n            this.setWidthOverride(col, change);\n            this.recordChanges([{ changeKind: 'widthOverrideUpdate', col, value: prevOverride }]);\n            this.updateWidthAccum();\n            this.renderHeaders();\n            this.forceRerender();\n            this.updateSelection();\n            e.stopPropagation();\n        } else if (this.draggingRow) {\n            const draggingRow = this.draggingRow;\n            const row = this.draggingRow.row;\n            this.draggingRow = null;\n            const scrollTop = this.container.scrollTop;\n            const rect = this.container.getBoundingClientRect();\n            const diff = (scrollTop + e.clientY - rect.y) - this.getHeightOffset(row + 1, true);\n            const prevOverride = this.heightOverrides[row];\n            const change = this.heightOverrides[row] ? this.heightOverrides[row] + diff : this.getCellHeight(row) + diff;\n            if (change <= 1) {\n                draggingRow.el.style.top = draggingRow.origTop;\n                return;\n            }\n            this.setHeightOverride(row, change);\n            this.recordChanges([{ changeKind: 'heightOverrideUpdate', row, value: prevOverride }]);\n            this.updateHeightAccum();\n            this.renderRowNumbers();\n            this.forceRerender();\n            this.updateSelection();\n            e.stopPropagation();\n        }\n    }\n\n    getColWidth(col: any) {\n        return this.widthOverrides[col] ?? this.cellWidth;\n    }\n\n    getTopLeftBounds() {\n        const rect = this.container.getBoundingClientRect();\n        const scrollLeft = this.container.scrollLeft;\n        const scrollTop = this.container.scrollTop;\n        // Adjust for header and row numbers\n        const x = Math.max(0, (this.rowNumberWidth + 8) - scrollLeft) - rect.left + scrollLeft - this.rowNumberWidth; // 50 for row numbers\n        const y = (this.headerRowHeight + 8) - rect.top + scrollTop - this.headerRowHeight;\n\n        if (x < 0 || y < 0) return { row: -1, col: -1 };\n\n        // Find column\n        let col = this.bsearch(this.widthAccum, x + this.rowNumberWidth) - 1;\n\n\n        // Find row\n        const row = this.bsearch(this.heightAccum, y + this.headerRowHeight) - 1;\n\n        return {\n            row: Math.min(row, this.totalRowBounds - 1),\n            col: Math.min(col, this.totalColBounds - 1)\n        };\n    }\n\n    getBottomRightBounds() {\n        const rect = this.container.getBoundingClientRect();\n        const scrollLeft = this.container.scrollLeft;\n        const scrollTop = this.container.scrollTop;\n        // Adjust for header and row numbers\n        const x = rect.right - rect.left + scrollLeft - (this.rowNumberWidth + 8);\n        const y = rect.bottom - rect.top + scrollTop - this.headerRowHeight;\n\n        if (x < 0 || y < 0) return { row: -1, col: -1 };\n\n        // Find column\n        let col = this.bsearch(this.widthAccum, x + this.rowNumberWidth) - 1;\n\n        // Find row\n        const row = this.bsearch(this.heightAccum, y + this.headerRowHeight) - 1;\n\n        return {\n            row: Math.min(row, this.totalRowBounds - 1),\n            col: Math.min(col, this.totalColBounds - 1)\n        };\n    }\n\n    bsearch(arr: any, target: number) {\n        function condition(i: number) {\n            return target < arr[i];\n        }\n        let left = 0;\n        let right = arr.length - 1;\n\n        while (left < right) {\n            let mid = Math.floor(left + (right - left) / 2);\n            if (condition(mid)) {\n                right = mid\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left\n    }\n\n    getCellFromEvent(e: any) {\n        const rect = this.container.getBoundingClientRect();\n        const scrollLeft = this.container.scrollLeft;\n        const scrollTop = this.container.scrollTop;\n        // Adjust for header and row numbers\n        const x = e.clientX - rect.left + scrollLeft - this.rowNumberWidth;\n        const y = e.clientY - rect.top + scrollTop - this.headerRowHeight; // 30 for header\n\n        if (x < 0 || y < 0) return { row: -1, col: -1 };\n\n        let col = this.bsearch(this.widthAccum, x + this.rowNumberWidth) - 1;\n        let row = this.bsearch(this.heightAccum, y + this.headerRowHeight) - 1;\n        return {\n            row: Math.min(row, this.totalRowBounds - 1),\n            col: Math.min(col, this.totalColBounds - 1)\n        };\n    }\n\n    mergeSelectedCells(bounds: any = null, recordChanges = true) {\n        if (!this.selectionStart || !this.selectionEnd) return;\n        let sr = this.selectionStart.row, sc = this.selectionStart.col,\n            er = this.selectionEnd.row, ec = this.selectionEnd.col;\n        if (bounds) {\n            sr = bounds.startRow, sc = bounds.startCol,\n                er = bounds.endRow, ec = bounds.endCol\n        }\n\n        // Normalize selection coordinates\n        const startRow = Math.min(sr, er);\n        const endRow = Math.max(sr, er);\n        const startCol = Math.min(sc, ec);\n        const endCol = Math.max(sc, ec);\n\n        // Check if the selected range overlaps with existing merged cells\n        for (const merged of this.mergedCells) {\n            if (\n                startRow <= merged.endRow &&\n                endRow >= merged.startRow &&\n                startCol <= merged.endCol &&\n                endCol >= merged.startCol\n            ) {\n                alert('Cannot merge cells that overlap with existing merged cells.');\n                return;\n            }\n        }\n\n        // Add the merged range to the list\n        this.mergedCells.push({ startRow, endRow, startCol, endCol });\n        recordChanges && this.recordChanges([{ changeKind: 'merge', bounds: { startRow, endRow, startCol, endCol } }]);\n\n        recordChanges && this.forceRerender();\n    }\n\n    unmergeSelectedCells(bounds: any = null, recordChanges = true) {\n        if (!this.selectionStart || !this.selectionEnd) return;\n        let sr = this.selectionStart.row, sc = this.selectionStart.col,\n            er = this.selectionEnd.row, ec = this.selectionEnd.col;\n        if (bounds) {\n            sr = bounds.startRow, sc = bounds.startCol,\n                er = bounds.endRow, ec = bounds.endCol\n        }\n\n        // Normalize selection coordinates\n        const startRow = Math.min(sr, er);\n        const endRow = Math.max(sr, er);\n        const startCol = Math.min(sc, ec);\n        const endCol = Math.max(sc, ec);\n        let merged;\n        for (let i = 0; i < this.mergedCells.length; i++) {\n            merged = this.mergedCells[i];\n            if (\n                startRow <= merged.endRow &&\n                endRow >= merged.startRow &&\n                startCol <= merged.endCol &&\n                endCol >= merged.startCol\n            ) {\n                this.mergedCells.splice(i, 1);\n            }\n        }\n        if (!merged) return;\n        recordChanges && this.recordChanges([{\n            changeKind: 'unmerge', bounds: { startRow: merged.startRow, endRow: merged.endRow, startCol: merged.startCol, endCol: merged.endCol }\n        }])\n        recordChanges && this.forceRerender();\n    }\n\n    addNewSelection() {\n        const newSelection = document.createElement('div');\n        this.selectionLayer.appendChild(newSelection);\n        this.activeSelection = newSelection;\n        return newSelection;\n    }\n\n    updateSelection() {\n        if (!this.activeSelection) return;\n        // Clear previous selection\n        this.activeSelection.innerHTML = '';\n        if (!this.selectionHandle) return;\n        this.selectionHandle.style.display = 'none';\n\n        if (!this.selectionBoundRect) return;\n\n        const { startRow, startCol, endRow, endCol } = this.selectionBoundRect;\n\n        let left = this.getWidthOffset(startCol);\n        let width = this.getWidthBetweenColumns(startCol, endCol+1);\n\n        const top = this.getHeightOffset(startRow); // Below header\n        const height = this.getHeightBetweenRows(startRow, endRow+1);\n\n        // Create selection element\n        this.selectedCell = document.createElement('div');\n        this.selectedCell.className = 'selected-cell';\n        this.selectedCell.style.left = `${left}px`;\n        this.selectedCell.style.top = `${top}px`;\n        this.selectedCell.style.width = `${width+1}px`;\n        this.selectedCell.style.height = `${height+1}px`;\n\n        this.activeSelection.appendChild(this.selectedCell);\n\n        // Add resize handle\n        this.positionSelectionHandle();\n        this.selectionHandle.style.display = 'block';\n\n        for(let col of this.selectedCols) {\n            if (col < startCol || col > endCol) {\n                this.selectedCols.delete(col);\n                const el: HTMLDivElement | null = this.headerContainer.querySelector(`[data-hccol='${col}']`);\n                if (!el) continue;\n                el.classList.remove('col-selected');\n                const handle: any = el.nextSibling;\n                if (handle) handle.classList.remove('handle-col-selected');\n            }\n        }\n        for(let i = startCol; i <= endCol; i++) {\n            if (i in this.selectedCols) {\n                continue;\n            }\n            this.selectedCols.add(i);\n            const el: HTMLDivElement | null = this.headerContainer.querySelector(`[data-hccol='${i}']`);\n            if (!el) continue;\n            el.classList.add('col-selected');\n            const handle: any = el.nextSibling;\n            if (handle) handle.classList.add('handle-col-selected');\n        }\n        for (let row of this.selectedRows) {\n            if (row < startRow || row > endRow) {\n                this.selectedRows.delete(row);\n                const el: HTMLDivElement | null = this.rowNumberContainer.querySelector(`[data-rnrow='${row}']`);\n                if (!el) continue;\n                el.classList.remove('row-selected');\n                const handle: any = el.nextSibling;\n                if (handle) handle.classList.remove('handle-row-selected');\n            }\n        }\n        for (let i = startRow; i <= endRow; i++) {\n            if (i in this.selectedRows) {\n                continue;\n            }\n            this.selectedRows.add(i);\n            const el: HTMLDivElement | null = this.rowNumberContainer.querySelector(`[data-rnrow='${i}']`);\n            if (!el) continue;\n            el.classList.add('row-selected');\n            const handle: any = el.nextSibling;\n            if (handle) handle.classList.add('handle-row-selected');\n        }\n    }\n\n    positionSelectionHandle() {\n        if (!this.selectedCell || !this.selectionHandle) return;\n\n        const rect = this.selectedCell.getBoundingClientRect();\n        const containerRect = this.container.getBoundingClientRect();\n\n        this.selectionHandle.style.left = `${rect.right - containerRect.left - 3}px`;\n        this.selectionHandle.style.top = `${rect.bottom - containerRect.top - 3}px`;\n    }\n\n    setData(data: any = null, initialData: any = null) {\n        data = data || new SparseGrid();\n        if (initialData) {\n            initialData.forEach(((cell: any) => {\n                data.set(cell.row, cell.col, cell);\n            }))\n        }\n        // for (let i = 0; i < 2000; i++) {\n        //     for (let j = 0; j < 2000; j++) {\n        //         data.set(i, j, { text: (Math.random() * 1000).toFixed(2), _id: uuid() })\n        //     }\n        // }\n        this.parser = new ExpressionParser(data);\n        this.data = data;\n\n        this.updateGridDimensions();\n        this.renderHeaders();\n        this.renderRowNumbers();\n        this.updateVisibleGrid(true);\n    }\n\n    renderHeaders() {\n        this.headerContainer.innerHTML = `<div class=\"header-cell\" style=\"width:${this.rowNumberWidth}px;\"></div>`;\n        this.headerContainer.onmousedown = (e: any) => {\n            if (e.button !== 0) return;\n            if (e.target.getAttribute('data-col') != null) {\n                this.draggingHeader = { origLeft: e.target.style.left, el: e.target, col: parseInt(e.target.getAttribute('data-col')) };\n            }\n        }\n\n        // Calculate total width needed for columns\n        let totalWidth = this.rowNumberWidth;\n        for (let col: any = 0; col <= this.totalColBounds; col++) {\n            const width = this.getColWidth(col);\n            totalWidth += width;\n\n            const headerCell = document.createElement('div');\n            headerCell.className = 'header-cell';\n            headerCell.setAttribute('data-hccol', col);\n            headerCell.textContent = this.getColumnName(col);\n            headerCell.style.width = `${width}px`;\n\n            const headerHandle = document.createElement('div');\n            headerHandle.className = 'header-handle';\n            headerHandle.style.height = `${this.headerRowHeight}px`;\n            headerHandle.setAttribute('data-col', col);\n            headerHandle.style.left = `${totalWidth - 8}px`;\n\n            this.headerContainer.appendChild(headerCell);\n            this.headerContainer.appendChild(headerHandle);\n        };\n\n        this.headerContainer.style.width = `${totalWidth + 10}px`;\n    }\n\n    createRowNumber(label: string) {\n        const el = document.createElement('div');\n        el.className = 'row-number';\n        // el.textContent = label;\n        el.innerHTML = `<div>${label}</div>`\n        return el;\n    }\n\n    renderRowNumbers() {\n        this.rowNumberContainer.innerHTML = '';\n        this.rowNumberContainer.onmousedown = (e: any) => {\n            if (e.button !== 0) return;\n            if (e.target.getAttribute('data-row') != null) {\n                this.draggingRow = { origTop: e.target.style.top, el: e.target, row: parseInt(e.target.getAttribute('data-row')) };\n            }\n        }\n\n        // Create or reuse row numbers for visible rows\n        // let totalHeight = 0;\n        let totalHeight = 0;\n        for (let row: any = 0; row <= this.totalRowBounds; row++) {\n            // if (row >= this.totalRows) break;\n\n            const rowNumberEl: any = this.createRowNumber(row + 1);\n            // rowNumberEl.textContent = row + 1;\n            totalHeight += this.rowHeight(row);\n            rowNumberEl.style.height = `${this.rowHeight(row)}px`;\n            rowNumberEl.style.lineHeight = `${this.rowHeight(row)}px`;\n            rowNumberEl.setAttribute('data-rnrow', row);\n            this.rowNumberContainer.appendChild(rowNumberEl);\n\n            const rowNumberHandle = document.createElement('div');\n            rowNumberHandle.className = 'row-handle';\n            rowNumberHandle.setAttribute('data-row', row);\n            rowNumberHandle.style.top = `${totalHeight - 5}px`;\n            this.rowNumberContainer.appendChild(rowNumberHandle);\n        }\n        // this.totalHeight = totalHeight;\n        this.rowNumberContainer.style.height = `${totalHeight + 20}px`; // extra pixels fixes slight alignment issue on scroll\n    }\n\n    get totalRowBounds() {\n        return this.heightAccum?.length || this.blockRows;\n    }\n    get totalColBounds() {\n        return this.widthAccum?.length || this.blockCols;\n    }\n    get totalYBounds() {\n        return this.heightAccum[this.heightAccum.length - 1];\n    }\n    get totalXBounds() {\n        return this.widthAccum[this.widthAccum.length - 1];\n    }\n\n    updateHeightAccum() {\n        let prevRowBounds = this.totalRowBounds;\n        const oldHeight = this.heightAccum.length;\n        this.heightAccum = [this.headerRowHeight];\n        let heightSum = this.headerRowHeight;\n        const updateVisHeight = (this.container.clientHeight + this.container.scrollTop) >= (this.container.scrollHeight - 150);\n        for (let row = 0; row < oldHeight - 1 || row % this.blockRows !== 0 || row < this.totalRows || (updateVisHeight && row < (prevRowBounds + this.blockRows)); row++) {\n            this.heightAccum.push(heightSum += this.heightOverrides[row] ?? this.cellHeight);\n        }\n    }\n\n    updateWidthAccum() {\n        let prevColBounds = this.totalColBounds;\n        const oldWidth = this.widthAccum.length;\n        this.widthAccum = [this.rowNumberWidth];\n        let widthSum = this.rowNumberWidth;\n        const updateVisWidth = (this.container.clientWidth + this.container.scrollLeft) >= (this.container.scrollWidth - 150);\n        for (let col = 0; col < oldWidth - 1 || col % this.blockCols !== 0 || col < this.totalCols || (updateVisWidth && col < (prevColBounds + this.blockCols)); col++) {\n            this.widthAccum.push(widthSum += this.getColWidth(col));\n        }\n    }\n\n    updateGridDimensions() {\n        this.updateHeightAccum();\n        this.updateWidthAccum();\n    }\n\n    handleScroll() {\n        const updateVisHeight = (this.container.clientHeight + this.container.scrollTop) >= (this.container.scrollHeight - 150);\n        const updateVisWidth = (this.container.clientWidth + this.container.scrollLeft) >= (this.container.scrollWidth - 150);\n        if (updateVisHeight || updateVisWidth) {\n            console.log('SCROLL UPDATE VIS HEIGHT OR WIDTH')\n            this.updateGridDimensions();\n            this.renderRowNumbers();\n            this.renderHeaders();\n            this.forceRerender();\n        } else {\n            this.updateVisibleGrid();\n        }\n        this.updateSelection();\n    }\n\n    calculateVisibleRange() {\n        const { row: visStartRow, col: visStartCol } = this.getTopLeftBounds();\n        const { row: visEndRow, col: visEndCol } = this.getBottomRightBounds();\n        this.visibleStartRow = visStartRow;\n        this.visibleStartCol = visStartCol;\n        this.visibleEndRow = visEndRow;\n        this.visibleEndCol = visEndCol;\n    }\n\n    updateVisibleGrid(force = false) {\n\n        const padding = this.padding;\n        const maxBlockRows = Math.floor(this.totalRowBounds / this.blockRows);\n        const maxBlockCols = Math.floor(this.totalColBounds / this.blockCols);\n\n        this.calculateVisibleRange();\n\n        // Determine which blocks we need to render\n        const neededBlocks = new Set();\n        const startBlockRow = Math.max(0, Math.floor(this.visibleStartRow / this.blockRows) - padding);\n        const endBlockRow = Math.min(maxBlockRows, Math.floor((this.visibleEndRow - 1) / this.blockRows));\n        const startBlockCol = Math.max(0, Math.floor(this.visibleStartCol / this.blockCols) - padding);\n        const endBlockCol = Math.min(maxBlockCols, Math.floor((this.visibleEndCol - 1) / this.blockCols));\n\n        // console.log('visible blocks', [startBlockRow, startBlockCol], 'through', [endBlockRow, endBlockCol])\n\n        for (let blockRow = startBlockRow; blockRow <= endBlockRow; blockRow++) {\n            for (let blockCol = startBlockCol; blockCol <= endBlockCol; blockCol++) {\n                neededBlocks.add(`${blockRow},${blockCol}`);\n            }\n        }\n\n        // Remove blocks that are no longer needed\n        const toRemove: any = [];\n        this.activeBlocks.forEach((block, key) => {\n            if (force || !neededBlocks.has(key)) {\n                toRemove.push(key);\n                this.releaseBlock(block);\n            }\n        });\n\n        toRemove.forEach((key: any) => this.activeBlocks.delete(key));\n        // this.updatePlaceholders();\n\n        // TODO: when zoom is >= 170%, subdivide blocks\n        requestAnimationFrame(() => {\n            // Add new blocks that are needed\n            neededBlocks.forEach((key: any) => {\n                if (!this.activeBlocks.has(key)) {\n                    const [blockRow, blockCol] = key.split(',').map(Number);\n                    const block = this.createBlock(blockRow, blockCol);\n                } else {\n                    // Ensure existing blocks are properly positioned\n                    const block = this.activeBlocks.get(key);\n                    this.positionBlock(block);\n                }\n            });\n        })\n    }\n\n    blockCanvases() {\n        if (devicePixelRatio >= 1.875) {\n            return 4;\n        } if (devicePixelRatio > 1.7) {\n            return 2;\n        } else {\n            return 1;\n        }\n    }\n\n    positionBlock(block: any) {\n        // Calculate horizontal position (left)\n        let left = this.rowNumberWidth; // Account for row numbers column\n        for (let col = 0; col < block.startCol; col++) {\n            left += this.getColWidth(col);\n        }\n\n        // Calculate vertical position (top)\n\n        const top = this.heightAccum[block.startRow];\n\n        block.blockContainer.style.left = `${left}px`;\n        block.blockContainer.style.top = `${top}px`;\n        block.blockContainer.style.display = 'block';\n\n        // block.left = left;\n    }\n\n    positionSubBlock(block: any, i: number) {\n        if (i === 0) return;\n\n        // Calculate vertical position (top)\n        if (i === 1 || i === 3) {\n            block.canvas.style.left = `${block.parentBlock.subBlocks[0].styleWidth}px`;\n        }\n        if (i >= 2) {\n            block.canvas.style.top = `${block.parentBlock.subBlocks[0].styleHeight}px`;\n        }\n    }\n\n    createBlock(blockRow: number, blockCol: number) {\n        // Calculate block boundaries\n        const startRow = blockRow * this.blockRows;\n        const endRow = Math.min(startRow + this.blockRows);\n        const startCol = blockCol * this.blockCols;\n        const endCol = Math.min(startCol + this.blockCols);\n\n        const blockContainer = document.createElement('div');\n        blockContainer.id = `${blockRow},${blockCol}`;\n        blockContainer.className = 'canvas-block-container';\n\n        const createCanvas = (idx: number | null = null) => {\n            // const canvas = this.pool.pop() || document.createElement('canvas');\n            const canvas = document.createElement('canvas');\n            canvas.className = 'canvas-block';\n            canvas.id = `canvas-${blockRow},${blockCol}${idx != null ? '__' + idx : ''}`;\n            return canvas;\n        }\n\n        const block: any = {\n            startRow,\n            endRow,\n            startCol,\n            endCol,\n            blockRow,\n            blockCol,\n            blockContainer,\n            canvas: null,\n            subBlocks: []\n        };\n        const key = `${blockRow},${blockCol}`;\n        this.activeBlocks.set(key, block);\n\n        // const subBlockTemplate = () => {\n        //     return { startRow, startCol, endRow, endCol, canvas: createCanvas(), parentBlock: block, isSubBlock: true, index: 0 };\n        // }\n\n        this.calculateBlockDimensionsContainer(block);\n        this.positionBlock(block);\n\n        // Add to DOM if not already present\n        if (!blockContainer.parentNode) {\n            this.container.appendChild(blockContainer);\n        }\n        if (this.blockCanvases() === 1) {\n            block.canvas = createCanvas();\n            blockContainer.appendChild(block.canvas)\n            this.calculateBlockDimensions(block);\n            this.renderBlock(block);\n        } else {\n            if (this.blockCanvases() === 2) {\n                block.subBlocks.push(\n                    { startRow, startCol, endRow, endCol: Math.floor((startCol + endCol) / 2), canvas: createCanvas(0), parentBlock: block, isSubBlock: true, index: 0 }, // left half\n                    { startRow, startCol: Math.floor((startCol + endCol) / 2), endRow, endCol, canvas: createCanvas(1), parentBlock: block, isSubBlock: true, index: 1 }, // right half\n                )\n            } else { // 4\n                block.subBlocks.push(\n                    { startRow, startCol, endRow: Math.floor((startRow + endRow) / 2), endCol: Math.floor((startCol + endCol) / 2), canvas: createCanvas(0), parentBlock: block, isSubBlock: true, index: 0 }, // top left\n                    { startRow, startCol: Math.floor((startCol + endCol) / 2), endRow: Math.floor((startRow + endRow) / 2), endCol, canvas: createCanvas(1), parentBlock: block, isSubBlock: true, index: 1 }, // top right\n                    { startRow: Math.floor((startRow + endRow) / 2), startCol, endRow, endCol: Math.floor((startCol + endCol) / 2), canvas: createCanvas(2), parentBlock: block, isSubBlock: true, index: 2 }, // bottom left\n                    { startRow: Math.floor((startRow + endRow) / 2), startCol: Math.floor((startCol + endCol) / 2), endRow, endCol, canvas: createCanvas(3), parentBlock: block, isSubBlock: true, index: 3 }, // bottom right\n                )\n            }\n            for (let i = 0; i < this.blockCanvases(); i++) {\n                blockContainer.appendChild(block.subBlocks[i].canvas);\n                this.calculateBlockDimensions(block.subBlocks[i]);\n                this.positionSubBlock(block.subBlocks[i], i);\n                this.renderBlock(block.subBlocks[i]);\n            }\n        }\n\n        return block;\n    }\n\n    calculateBlockDimensions(block: any) {\n        let scaleFactor = this.effectiveDevicePixelRatio();\n        block.width = 0;\n        let styleWidth = 0;\n        for (let col = block.startCol; col < block.endCol; col++) {\n            block.width += this.getColWidth(col) * scaleFactor;\n        }\n        block.width = Math.round(block.width);\n        styleWidth = block.width / scaleFactor;\n\n        // Calculate block height based on rows\n        block.height = (this.heightAccum[block.endRow] - this.heightAccum[block.startRow]) * scaleFactor;\n        block.height = Math.round(block.height)\n        let styleHeight = block.height / scaleFactor;\n\n        // Set canvas dimensions\n        block.canvas.width = block.width;\n        block.canvas.height = block.height;\n        block.canvas.style.width = `${styleWidth}px`;\n        block.canvas.style.height = `${styleHeight}px`;\n\n        const ctx = block.canvas.getContext('2d', { alpha: false });\n        block.styleHeight = styleHeight;\n        block.styleWidth = styleWidth;\n        ctx.scale(1,1);\n    }\n\n    calculateBlockDimensionsContainer(block: any) {\n        const scaleFactor = this.effectiveDevicePixelRatio();\n        // Calculate block width based on columns\n        block.width = 0;\n        for (let col = block.startCol; col < block.endCol; col++) {\n            block.width += this.getColWidth(col) * scaleFactor;\n        }\n        block.width = Math.round(block.width);\n        block.width = block.width / scaleFactor;\n\n        // Calculate block height based on rows\n        block.height = (this.heightAccum[block.endRow] - this.heightAccum[block.startRow]) * scaleFactor;\n        block.height = Math.round(block.height)\n        block.height = block.height / scaleFactor;\n        // block.height = (block.endRow - block.startRow) * this.cellHeight;\n        block.blockContainer.style.width = `${block.width}px`;\n        block.blockContainer.style.height = `${block.height}px`;\n        block.styleWidth = block.width;\n        block.styleHeight = block.height;\n    }\n\n    effectiveDevicePixelRatio() {\n        return devicePixelRatio;\n        // return devicePixelRatio * devicePixelRatio;\n        if (this.blockCanvases() > 2) {\n            return Math.min(window.devicePixelRatio || 1, 4);\n            // return Math.min(window.devicePixelRatio || 1, 3.6);\n        }\n        if (this.blockCanvases() == 2) {\n            return Math.min(window.devicePixelRatio || 1, 3);\n        }\n        return Math.min(window.devicePixelRatio || 1, 1.4);\n    }\n\n    blockKey(block: any) {\n        return `${block.blockRow},${block.blockCol}`;\n    }\n\n    rowHeight(row: any) {\n        return this.heightOverrides[row] ?? this.cellHeight;\n    }\n\n    leftBlock(block: any) {\n        if (block.isSubBlock) {\n            if (block.index === 0) {\n                const leftBlock = this.getBlock(block.parentBlock.blockRow, block.parentBlock.blockCol - 1);\n                if (!leftBlock) return;\n                return leftBlock.subBlocks?.[1];\n            } else if (block.index === 1) {\n                return block.parentBlock.subBlocks?.[0];\n            } else if (block.index === 2) {\n                const leftBlock = this.getBlock(block.parentBlock.blockRow, block.parentBlock.blockCol - 1);\n                if (!leftBlock) return;\n                return leftBlock.subBlocks?.[leftBlock.subBlocks?.length - 1];\n            } else if (block.index === 3) {\n                return block.parentBlock.subBlocks?.[2];\n            }\n            return null;\n        } else {\n            return this.getBlock(block.blockRow, block.blockCol - 1)\n        }\n    }\n\n    blockFromRc(row: number, col: number) {\n        const blockRow = Math.floor(row / 34);\n        const blockCol = Math.floor(col / 34);\n        const block = this.getBlock(blockRow, blockCol);\n        if (!block) return null; // todo: left block might be pruned because not in view\n        if (block.subBlocks.length === 0) return block;\n        for (let subBlock of block.subBlocks) {\n            if (row >= subBlock.startRow && row <= subBlock.endRow && col >= subBlock.startCol && col <= subBlock.endCol) {\n                return subBlock;\n            }\n        }\n        return null;\n    }\n\n    getKey(row: number, col: number) {\n        return `${row},${col}`;\n    }\n\n    getWidthHeight(row: number, col: number) {\n        const merged = this.getMerge(row, col);\n        let width, height;\n        if (merged) {\n            width = this.getWidthBetweenColumns(merged.startCol, merged.endCol+1), height = this.getHeightBetweenRows(merged.startRow, merged.endRow+1)\n        } else {\n            width = this.getCellWidth(row, col), height = this.getHeight(row, col);\n        }\n        return { width, height }\n    }\n\n    // getBlock(blockRow: number, blockCol: number) {\n    //     return this.activeBlocks.get(this.blockKey({ blockRow, blockCol }));\n    // }\n\n    getBlock(row: number, col: number) {\n        const blockRow = Math.floor(row / this.blockRows);\n        const blockCol = Math.floor(col / this.blockCols);\n        const key = this.getKey(blockRow, blockCol);\n        if (this.activeBlocks.has(key)) {\n            return this.activeBlocks.get(key);\n        }\n        return null;\n    }\n\n    getBlockOrSubBlock(row: number, col: number) {\n        const parentBlock = this.getBlock(row, col);\n        if (!parentBlock) return null;\n        if (parentBlock.subBlocks.length === 0) {\n            return parentBlock;\n        }\n        if (parentBlock.subBlocks.length === 2) {\n            let ncol = col % this.blockCols;\n            const subBlockCols = Math.floor(this.blockCols / 2);\n            let idx = ncol >= subBlockCols ? 1 : 0;\n            return parentBlock.subBlocks[idx];\n        }\n        if (parentBlock.subBlocks.length === 4) {\n            let ncol = col % this.blockCols;\n            const subBlockCols = Math.floor(this.blockCols / 2);\n            let right = ncol >= subBlockCols;\n\n            let nrow = row % this.blockRows;\n            const subBlockRows = Math.floor(this.blockRows / 2);\n            let bottom = nrow >= subBlockRows;\n\n            let i = 0;\n            if (!right && !bottom) i = 0;\n            else if (right && !bottom) i = 1;\n            else if (!right && bottom) i = 2;\n            else if (right && bottom) i = 3;\n\n            return parentBlock.subBlocks[i];\n        }\n        return null;\n    }\n\n    getCellCoordsContainer(row: number, col: number): CellCoordsRect {\n        const merge = this.getMerge(row, col);\n        let left, top, width, height, value;\n        if (merge) {\n            left = this.getWidthOffset(merge.startCol, true);\n            top = this.getHeightOffset(merge.startRow, true);\n            width = this.getMergeWidth(merge);\n            height = this.getMergeHeight(merge);\n            row = merge.startRow, col = merge.startCol;\n        } else {\n            left = this.getWidthOffset(col, true);\n            top = this.getHeightOffset(row, true);\n            width = this.getCellWidth(row, col);\n            height = this.rowHeight(row);\n        }\n        return { left, top, width, height, row, col };\n    }\n    getCellCoordsCanvas(row: number, col: number): CellCoordsRect {\n        const block = this.getBlockOrSubBlock(row, col);\n        // if (!block) return null;\n        const merge = this.getMerge(row, col);\n        let left, top, width, height;\n        if (merge) {\n            left = this.getWidthBetweenColumns(block.startCol, merge.startCol);\n            top = this.getHeightBetweenRows(block.startRow, merge.startRow);\n            width = this.getMergeWidth(merge);\n            height = this.getMergeHeight(merge);\n            row = merge.startRow, col = merge.startCol;\n        } else {\n            left = this.getWidthBetweenColumns(block.startCol, col);\n            top = this.getHeightBetweenRows(block.startRow, row);\n            width = this.getCellWidth(row, col);\n            height = this.rowHeight(row);\n        }\n        return { left, top, width, height, row, col };\n    }\n    renderBorders(ctx: any, row: any, col: any) {\n        if (!this.getCell(row,col)?.border) return;\n        const border = this.getCell(row, col)?.border;\n        ctx.save();\n        ctx.strokeStyle = 'red';\n\n        // left border\n        if (hasBorderStr(border, 'left')) {\n            ctx.beginPath();\n            ctx.moveTo(this.getWidthOffset(col) * devicePixelRatio, this.getHeightOffset(row) * devicePixelRatio);\n            ctx.lineTo(this.getWidthOffset(col) * devicePixelRatio, (this.getHeightOffset(row) + this.getCellHeight(row)) * devicePixelRatio);\n            ctx.stroke();\n        }\n\n        // top border\n        if (hasBorderStr(border, 'top')) {\n            ctx.beginPath();\n            ctx.moveTo(this.getWidthOffset(col) * devicePixelRatio, this.getHeightOffset(row) * devicePixelRatio);\n            ctx.lineTo((this.getWidthOffset(col) + this.getCellWidth(col)) * devicePixelRatio, this.getHeightOffset(row) * devicePixelRatio);\n            ctx.stroke();\n        }\n\n        // right border\n        if (hasBorderStr(border, 'right')) {\n            ctx.beginPath();\n            ctx.moveTo((this.getWidthOffset(col) + this.getCellWidth(col)) * devicePixelRatio, this.getHeightOffset(row) * devicePixelRatio);\n            ctx.lineTo((this.getWidthOffset(col) + this.getCellWidth(col)) * devicePixelRatio, (this.getHeightOffset(row) + this.getCellHeight(row)) * devicePixelRatio);\n            ctx.stroke();\n        }\n\n        // bottom border\n        if (hasBorderStr(border, 'bottom')) {\n            ctx.beginPath();\n            ctx.moveTo(this.getWidthOffset(col) * devicePixelRatio, (this.getHeightOffset(row) + this.getCellHeight(row)) * devicePixelRatio);\n            ctx.lineTo((this.getWidthOffset(col) + this.getCellWidth(col)) * devicePixelRatio, (this.getHeightOffset(row) + this.getCellHeight(row)) * devicePixelRatio);\n            ctx.stroke();\n        }\n\n        ctx.restore();\n    }\n\n    renderCell(row: any, col: any, srcblock?: any, ctx?: any) {\n        // if (this.getMerge(row, col)) {\n        //     // this.forceRerender();\n        //     return;\n        // }\n        if (!ctx) {\n            let block = srcblock;\n            if (!block) block = this.getBlockOrSubBlock(row,col);\n            if (block) {\n                ctx = block.canvas.getContext('2d', { alpha: false });\n            }\n        } \n        let { left, top, width, height }: any = this.getCellCoordsCanvas(row, col);\n        if (ctx) ctx.fillStyle = '#ffffff';\n        if (!srcblock || this.rowColInBounds(row,col,srcblock)) {\n            // console.log('inbounds::', row,col)\n            ctx && ctx.fillRect((left + 1)*devicePixelRatio, (top + 1)*devicePixelRatio, (width - 2)*devicePixelRatio, (height - 2)*devicePixelRatio);\n        } else {\n            const ssr = srcblock.startRow, sec = srcblock.endCol;\n            const merge = this.getMerge(row,col);\n            if (!merge) return;\n            row = merge.startRow, col = merge.startCol;\n            const _width = this.getWidthBetweenColumns(srcblock.startCol,merge.endCol+1);\n            const _height = this.getHeightBetweenRows(srcblock.startRow,merge.endRow+1);\n            left = _width - width;\n            top = _height - height;\n            ctx && ctx.fillRect((left + 1)*devicePixelRatio, (top + 1)*devicePixelRatio, (width - 2)*devicePixelRatio, (height - 2)*devicePixelRatio);\n        }\n        if (ctx) ctx.fillStyle = '#333333';\n        this.renderBorders(ctx,row,col);\n        if (this.getCell(row, col).cellType === 'button') {\n            const button = this.getButton(row, col).el;\n            ({ left, top, width, height } = this.getCellCoordsContainer(row, col));\n            this.positionElement(button, left, top, width, height);\n        } else if (this.getCell(row, col).cellType === 'linechart') {\n            const lineChart = this.getLineChart(row, col)?.el;\n            ({ left, top, width, height } = this.getCellCoordsContainer(row, col));\n            this.positionElement(lineChart, left, top, width, height);\n        } else {\n            this.clearElRegistry(row,col);\n            this.renderCellText(ctx, left, top, width, row, col);\n            if (dependencyTree[row]?.[col]) {\n                for (let childRow in dependencyTree[row][col]) {\n                    for (let childCol in dependencyTree[row][col][childRow]) {\n                        this.renderCell(childRow, childCol)\n                    }\n                }\n            }\n        }\n    }\n\n    scalerZoom() {\n        return devicePixelRatio;\n    }\n\n    renderBlock(block: any, calcDimensions = false) {\n        if (calcDimensions) {\n            this.calculateBlockDimensions(block);\n        }\n        const ctx = block.canvas.getContext('2d', { alpha: false });\n        ctx.fillStyle = '#ffffff';\n        ctx.fillRect(0, 0, block.canvas.width, block.canvas.height);\n\n        // Set rendering quality based on zoom\n        this.applyRenderingQuality(ctx);\n\n        // Draw cells\n        let x = 0;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        ctx.fillStyle = '#333333';\n        const scaler = 88;\n        ctx.strokeStyle = `hsl(0,0%,${scaler}%)`;\n        ctx.lineWidth = 1;\n        ctx.font = this.getFontString();\n\n        ctx.translate(0.5, 0.5); // thick gridlines fix\n\n        // draw row gridlines\n        let y;\n        if (this.gridlinesOn && this.quality() !== 'performance') {\n            for (let row = block.startRow; row < block.endRow; row++) {\n                y = Math.round((this.heightAccum[row] - this.heightAccum[block.startRow])*devicePixelRatio);\n                ctx.beginPath();\n                ctx.moveTo(0, y);\n                ctx.lineTo(block.canvas.width, y);\n                ctx.stroke();\n            }\n        }\n        // draw col grid lines\n        if (this.gridlinesOn && this.quality() !== 'performance') {\n            for (let col = block.startCol; col < block.endCol; col++) {\n                const colWidth = this.getColWidth(col);\n                // draw col gridlines\n                ctx.beginPath();\n                ctx.moveTo(Math.round(x * devicePixelRatio), 0);\n                ctx.lineTo(Math.round(x * devicePixelRatio), block.canvas.height);\n                ctx.stroke();\n                x += colWidth;\n            }\n        }\n        x = 0;\n        const seenMerges = new Set();\n        for (let col = block.startCol; col < block.endCol; col++) {\n            const colWidth = this.getColWidth(col);\n\n            for (let row = block.startRow; row < block.endRow; row++) {\n                if (!this.getCell(row, col)) continue;\n                // Check if the cell is part of a merged range\n                const merged = this.getMerge(row, col);\n                if (merged) continue;\n                const y = this.heightAccum[row] - this.heightAccum[block.startRow];\n\n                // Skip rendering if the cell is part of a merged range (except the top-left cell)\n\n                const renderWidth = colWidth;\n\n                if (this.getCell(row, col).cellType === 'button') {\n                    if (!merged) {\n                        const button = this.getButton(row, col).el;\n                        this.positionElement(button, this.widthAccum[col], this.heightAccum[row], renderWidth, this.rowHeight(row));\n                    }\n                } else if (this.getCell(row, col).cellType === 'linechart') {\n                    const lineChart = this.getLineChart(row, col)?.el;\n                    this.positionElement(lineChart, this.widthAccum[col], this.heightAccum[row], renderWidth, this.rowHeight(row));\n                } else {\n                    this.renderBorders(ctx,row,col);\n                    this.renderCellText(ctx, x, y, renderWidth, row, col);\n                }\n            }\n\n            x += colWidth;\n        }\n\n        this.renderMergesOnBlock(block, ctx);\n    }\n    renderMergesOnBlock(block: any, ctx: any) {\n        const merges: Array<Rect> = this.getMergesInRange(block);\n        for(let merge of merges) {\n            const row = merge.startRow, col = merge.startCol;\n            this.renderCell(row,col,block,ctx);\n        }\n    }\n    clearElRegistry(row: number, col: number) {\n        const _id = this.getCellId(row, col);\n        if (this.elRegistry[_id]) {\n            this.elRegistry[_id].el.parentNode?.removeChild(this.elRegistry[_id].el);\n        }\n    }\n    isSelectStart(row: number, col: number) {\n        if (!this.selectionStart) return;\n        return this.selectionStart.row === row && this.selectionStart.col === col;\n    }\n    isSelectEnd(row: number, col: number) {\n        if (!this.selectionEnd) return;\n        return this.selectionEnd.row === row && this.selectionEnd.col === col;\n    }\n    positionElement(el: any, x: number, y: number, width: number, height: number, append = true) {\n        el.style.top = `${y}px`;\n        el.style.left = `${x}px`;\n        el.style.width = `${width}px`;\n        el.style.height = `${height}px`;\n        append && this.container.appendChild(el);\n    }\n    getCellId(row: number, col: number) {\n        return this.getCell(row, col)?._id;\n    }\n    getButton(row: number, col: number) {\n        const _id = this.getCellId(row, col);\n        if (this.elRegistry[_id] && this.elRegistry[_id].type === 'button') {\n            return this.elRegistry[_id];\n        } else if (this.elRegistry[_id] && this.elRegistry.type !== 'button') {\n            this.elRegistry[_id].el.parentNode?.removeChild(this.elRegistry[_id].el);\n        }\n        const button: any = document.createElement('button');\n        button.textContent = this.getCellText(row, col);\n        button.onclick = (e: any) => e.stopPropagation();\n        button.ondblclick = (e: any) => e.stopPropagation();\n        button.style.zIndex = 1;\n        button.style.position = 'absolute';\n        button.style.overflow = 'hidden';\n        button.style.userSelect = 'none';\n        this.elRegistry[_id] = { type: 'button', el: button };\n        return this.elRegistry[_id];\n    }\n    getLineChart(row: number, col: number) {\n        const _id = this.getCellId(row, col);\n        if (this.elRegistry[_id] && this.elRegistry[_id].type === 'lineChart') {\n            const data = this.elRegistry[_id].data;\n            const { width, height } = this.getWidthHeight(row, col);\n            this.elRegistry[_id].lineChart.render(data, width, height);\n            return this.elRegistry[_id];\n        } else if (this.elRegistry[_id] && this.elRegistry[_id].type !== 'lineChart') {\n            this.elRegistry[_id].el.parentNode?.removeChild(this.elRegistry[_id].el);\n        }\n        const data = [\n            [\"10\", \"2023-01-01\"],\n            [\"15\", \"2023-01-02\"],\n            [\"12\", \"2023-01-03\"],\n            [\"20\", \"2023-01-04\"],\n            [\"18\", \"2023-01-05\"],\n            [\"25\", \"2023-01-06\"],\n            [\"22\", \"2023-01-07\"]\n        ];\n        const wrapper: any = document.createElement('div');\n        // wrapper.appendChild(lineChart.container);\n        wrapper.onclick = (e: any) => e.stopPropagation();\n        wrapper.ondblclick = (e: any) => e.stopPropagation();\n        wrapper.style.zIndex = 1;\n        wrapper.style.position = 'absolute';\n        wrapper.style.overflow = 'hidden';\n        wrapper.style.height = '100%';\n        wrapper.style.width = '100%';\n        const { width, height } = this.getWidthHeight(row, col);\n        const lineChart = createLineChart(data, wrapper, width, height);\n        this.elRegistry[_id] = { el: wrapper, lineChart, data, type: 'lineChart' };\n        return this.elRegistry[_id];\n    }\n    getWidthOffset(col: number, withStickyLeftBar = false) {\n        return this.widthAccum[col] - (withStickyLeftBar ? 0 : this.rowNumberWidth);\n    }\n    getHeightOffset(row: number, withStickyHeader = false) {\n        return this.heightAccum[row] - (withStickyHeader ? 0 : this.headerRowHeight);\n    }\n    getCellWidth(a: any, b: any = null) {\n        let col = a;\n        if (typeof b === 'number') {\n            col = b;\n        }\n        return this.getColWidth(col);\n    }\n    getCellHeight(row: number, col = null) {\n        return this.rowHeight(row);\n    }\n    getHeight(row: number, col: number | null = null) {\n        return this.rowHeight(row);\n    }\n    getWidthBetweenColumns(col1: number, col2: number) {\n        let accumulatedWidth = 0;\n        for (let _col = col1; _col < col2; _col++) {\n            const colWidth = this.getColWidth(_col);\n            accumulatedWidth += colWidth;\n        }\n        return accumulatedWidth;\n    }\n    getHeightBetweenRows(startRow: number, endRow: number) {\n        if (endRow < startRow) { let tmp = endRow; endRow = startRow; startRow = tmp; }\n        return this.heightAccum[endRow] - this.heightAccum[startRow];\n    }\n    quality() {\n        const devicePixelRatio = window.devicePixelRatio;\n        if (devicePixelRatio < 0.5) {\n            return 'performance';\n        } else if (devicePixelRatio < 1) {\n            return 'balance';\n        } else {\n            return 'max';\n        }\n    }\n    applyRenderingQuality(ctx: any) {\n        switch (this.quality()) {\n            case 'performance':\n                ctx.textRendering = 'optimizeSpeed';\n                ctx.imageSmoothingEnabled = false;\n                break;\n            case 'balance':\n                ctx.textRendering = 'geometricPrecision';\n                ctx.imageSmoothingEnabled = true;\n                break;\n            case 'max':\n            default:\n                ctx.textRendering = 'geometricPrecision';\n                ctx.imageSmoothingEnabled = true;\n        }\n    }\n\n    getCell(row: number, col: number) {\n        if (!this.data) return { row, col };\n        return this.data.get(row, col)\n    }\n    getCellText(row: number, col: number) {\n        return this.getCell(row, col)?.text || '';\n    }\n    getCellTextAlign(row: number, col: number) {\n        return this.getCell(row, col)?.textAlign;\n    }\n\n    renderCellText(ctx: any, x: number, y: number, width: number, row: number, col: number, _text = '') {\n        const value = this.getCellText(row, col);\n        let text = value !== undefined && value !== null ? String(value) : '';\n        if (_text !== '') text = _text;\n        // if (text === '') return;\n        try {\n            removeDependents(row,col);\n            text = this.parser.evaluateExpression(text, [row,col]);\n        } catch (e) {\n            console.warn(e);\n            text = text;\n        }\n        if (text === '') return;\n        ctx.save(); // Save the current state\n        if (this.getCellColor(row, col)) {\n            ctx.fillStyle = this.getCellColor(row, col);\n        }\n        if (this.getCell(row, col)?.fontSize != null) {\n            ctx.font = this.getFontString(row, col);\n        }\n        if (this.getCell(row, col)?.textBaseline != null) {\n            ctx.textBaseline = this.getCell(row, col).textBaseline;\n        }\n        ctx.beginPath();\n        if (this.getCellTextAlign(row, col)) ctx.textAlign = this.getCellTextAlign(row, col);\n        ctx.rect(x * devicePixelRatio, y * devicePixelRatio, width * devicePixelRatio, this.rowHeight(row) * devicePixelRatio); // Adjust y position based on your text baseline\n        ctx.clip();\n        ctx.fillText(text, (x + 4) * devicePixelRatio, (y + this.rowHeight(row) / 2) * devicePixelRatio);\n        ctx.restore(); // Restore the state to remove clipping\n    }\n\n    getCellColor(row: number, col: number) {\n        return this.getCell(row, col)?.color ?? '';\n    }\n\n    getAbbreviatedText(text: string) {\n        if (text.length > 8) {\n            return text.substring(0, 5) + '...';\n        }\n        return text;\n    }\n\n    getFontString(row: number | null = null, col: number | null = null) {\n        let fontSize = 12*devicePixelRatio;\n        if (row != null && col != null && this.getCell(row, col).fontSize != null) {\n            fontSize = this.getCell(row, col).fontSize;\n        }\n        let fontString = `${fontSize}px Arial`;\n\n        if (this.quality() === 'max' && devicePixelRatio >= 1) {\n            // Only use subpixel rendering when not zoomed out\n            fontString += ', sans-serif';\n        }\n\n        return fontString;\n    }\n\n    releaseBlock(block: any) {\n        if (block.subBlocks.length > 1) {\n            while (block.subBlocks.length > 1) {\n                block.subBlocks.pop();\n            }\n        }\n        block.blockContainer.innerHTML = '';\n        block.blockContainer.parentNode.removeChild(block.blockContainer);\n    }\n}","function createUuid() {\n    let _id = 1;\n    return function () {\n        return _id++;\n    }\n}\nconst uuid = createUuid();\nexport default class SparseGrid {\n    constructor() {\n        this._data = [];           // {row: {col: value}}\n        this._colCounts = [];      // {col: count}\n        this._topRow = Infinity;\n        this._bottomRow = -Infinity;\n        this._leftCol = Infinity;\n        this._rightCol = -Infinity;\n        this._totalValues = 0;\n        this._totalRows = 0;       // Track distinct rows with data\n        this._totalCols = 0;       // Track distinct columns with data\n        this._valueCount = 0;\n    }\n\n    save() {\n        const state = {\n            // Store data as arrays for compactness\n            d: Object.keys(this._data).map(row => [\n                Number(row),\n                Object.keys(this._data[row]).map(col => [\n                    col === 'count' ? col : Number(col),\n                    this._data[row][col]\n                ])\n            ]),\n            // Store counts as arrays for compactness\n            cc: Object.entries(this._colCounts).map(([col, count]) => [Number(col), count]),\n            // Store boundaries\n            tr: this._topRow,\n            br: this._bottomRow,\n            lc: this._leftCol,\n            rc: this._rightCol,\n            // Store totals\n            tv: this._totalValues,\n            trow: this._totalRows,\n            tcol: this._totalCols\n        };\n        return JSON.stringify(state);\n    }\n\n    restore(json) {\n        const state = JSON.parse(json);\n\n        // Clear current state\n        this.clear();\n\n        // Rebuild data structure\n        state.d.forEach(([row, cols]) => {\n            this._data[row] = [];\n            cols.forEach(([col, value]) => {\n                this._data[row][col] = value;\n            });\n        });\n\n        state.cc.forEach(([col, count]) => {\n            this._colCounts[col] = count;\n        });\n\n        // Restore boundaries and totals\n        this._topRow = state.tr;\n        this._bottomRow = state.br;\n        this._leftCol = state.lc;\n        this._rightCol = state.rc;\n        this._totalValues = state.tv;\n        this._totalRows = state.trow;\n        this._totalCols = state.tcol;\n\n        return this;\n    }\n\n    // Set a value at a specific row and column\n    setCellProperty(row, col, property, value) {\n        const cell = this.get(row, col);\n        if (!cell._id) cell._id = uuid();\n        cell[property] = value;\n        this.set(row, col, cell);\n    }\n\n    setRowSize(row, size) {\n        if (!this._data[row]) return;\n        this._data[row].size = size;\n    }\n    incrementRowSize(row) {\n        if (!this._data[row]) return;\n        this._data[row].size++;\n    }\n    decrementRowSize(row) {\n        if (!this._data[row]) return;\n        this._data[row].size--;\n    }\n    set(row, col, value) {\n        if (!Number.isInteger(row) || !Number.isInteger(col)) {\n            throw new Error('Coordinates must be integers');\n        }\n\n        const isNewRow = !this._data[row];\n        const isNewCell = isNewRow || !Object.hasOwn(this._data[row], col);\n        const isNewCol = isNewCell && !this._colCounts[col];\n\n        if (isNewRow) {\n            this._data[row] = [];\n            this.setRowSize(row, 0);\n            this._totalRows++;\n\n            // Update row boundaries\n            if (row < this._topRow) this._topRow = row;\n            if (row > this._bottomRow) this._bottomRow = row;\n        }\n\n        if (isNewCell) {\n            this.incrementRowSize(row);\n            this._totalValues++;\n\n            if (isNewCol) {\n                this._colCounts[col] = 0;\n                this._totalCols++;\n            }\n            this._colCounts[col]++;\n\n            // Update column boundaries\n            if (col < this._leftCol) this._leftCol = col;\n            if (col > this._rightCol) this._rightCol = col;\n        }\n\n        this._data[row][col] = value;\n        if (!value._id) value._id = uuid();\n        return isNewCell;\n    }\n\n    decrementColSize(col) {\n        this._colCounts[col]--;\n        if (this._colCounts[col] <= 0) delete this._colCounts[col];\n    }\n    incrementColSize(col) {\n        if (!this._colCounts[col]) this._colCounts[col] = 0;\n        this._colCounts[col]++;\n    }\n\n    deleteRow(row) {\n        const rowObj = this._data[row];\n        if (rowObj) {\n            for (let col in rowObj) {\n                this.decrementColSize(col);\n            }\n            this._totalRows--;\n        };\n        this._data.splice(row, 1);\n        this._recalculateBoundaries();\n        return rowObj;\n    }\n\n    addRow(row, data = []) {\n        data = data || [];\n        for (let col in data) {\n            this.incrementColSize(col);\n        }\n        if (data.length > 0) this._totalRows++;\n        this._data.splice(row, 0, data);\n        this._recalculateBoundaries();\n        return null;\n    }\n\n    addCol(col, data = []) {\n        data = data || [];\n        for (let row in this._data) {\n            if (row === 'count') continue;\n            this._data[row].splice(col, 0, undefined);\n            delete this._data[row][col];\n            if (row in data) {\n                this._data[row][col] = data[row];\n                this.incrementRowSize(row);\n            }\n        }\n        if (data.length > 0) this._totalCols++;\n        this._recalculateBoundaries();\n        return null;\n    }\n\n    getCol(col) {\n        const colData = [];\n        for (let row in this._data) {\n            if (row === 'count') continue;\n            if (col in this._data[row]) {\n                colData[row] = this._data[row][col];\n            }\n        }\n        return colData;\n    }\n\n    deleteCol(col) {\n        const colData = this.getCol(col);\n        const colCount = this._colCounts[col];\n        colData.size = colCount;\n        if (this._colCounts[col]) {\n            this._totalCols--;\n        }\n        for (let row in this._data) {\n            if (row === 'count') continue;\n            if (this.has(row, col)) {\n                this.decrementColSize(col);\n            }\n            this._data[row].splice(col, 1);\n        }\n        this._colCounts.splice(col, 1); // shift colcounts\n        this._recalculateBoundaries();\n        return colData;\n    }\n\n    delete(row, col) {\n        if (!this.has(row, col)) {\n            return false;\n        }\n\n        delete this._data[row][col];\n        this.decrementRowSize(row);\n        this._colCounts[col]--;\n        this._totalValues--;\n\n        // Check if row became empty\n        if (this._data[row].size === 0) {\n            delete this._data[row];\n            this._totalRows--;\n        }\n\n        // Check if column became empty\n        if (this._colCounts[col] === 0) {\n            delete this._colCounts[col];\n            this._totalCols--;\n        }\n\n        let boundariesChanged = false;\n        if (row === this._topRow || row === this._bottomRow) {\n            boundariesChanged = true;\n        }\n        if (col === this._leftCol || col === this._rightCol) {\n            boundariesChanged = true;\n        }\n\n        if (boundariesChanged) {\n            this._recalculateBoundaries();\n        }\n\n        return true;\n    }\n\n    _recalculateBoundaries() {\n        if (this.totalRows === 0) {\n            this._topRow = Infinity;\n            this._bottomRow = -Infinity;\n            this._leftCol = Infinity;\n            this._rightCol = -Infinity;\n            return;\n        }\n\n        let minRow = Infinity;\n        let maxRow = -Infinity;\n        let minCol = Infinity;\n        let maxCol = -Infinity;\n\n        for (let row in this._data) {\n            row = parseInt(row);\n            if (row < minRow) minRow = row;\n            if (row > maxRow) maxRow = row;\n            for (let col in this._data[row]) {\n                col = parseInt(col);\n                if (col < minCol) minCol = col;\n                if (col > maxCol) maxCol = col;\n            }\n        }\n\n        this._topRow = minRow;\n        this._bottomRow = maxRow;\n        this._leftCol = minCol;\n        this._rightCol = maxCol;\n    }\n\n    get(row, col) {\n        if (!this._data[row] || !Object.hasOwn(this._data[row], col)) {\n            return { row, col };\n        }\n        return this._data[row][col];\n    }\n\n    has(row, col = null) {\n        if (col == null) return Object.hasOwn(this._data, row);\n        return Object.hasOwn(this._data, row) && Object.hasOwn(this._data[row], col);\n    }\n\n    deleteCells(coordinates) {\n        let deletedCount = 0;\n        let boundaryChanged = false;\n        const affectedRows = {};\n\n        // First pass: perform deletions\n        for (const [row, col] of coordinates) {\n            if (!Number.isInteger(row) || !Number.isInteger(col)) continue;\n\n            if (this.has(row, col)) {\n                delete this._data[row][col];\n                this.decrementRowSize(row);\n                this._colCounts[col]--;\n                deletedCount++;\n                affectedRows[row] = true;\n\n                if (col === this._leftCol || col === this._rightCol) {\n                    boundaryChanged = true;\n                }\n            }\n        }\n\n        // Second pass: clean empty rows\n        for (const row in affectedRows) {\n            if (this._data[row].size === 0) {\n                delete this._data[row];\n                const numRow = Number(row);\n                if (numRow === this._topRow || numRow === this._bottomRow) {\n                    boundaryChanged = true;\n                }\n            }\n        }\n\n        this._totalValues -= deletedCount;\n        if (boundaryChanged) {\n            this._recalculateBoundaries();\n        }\n\n        return deletedCount;\n    }\n\n    // Get count of cells in a specific row\n    getRowCount(row) {\n        return this._data[row].size || 0;\n    }\n\n    // Get all non-empty rows with their counts\n    getRowCounts() {\n        return Object.fromEntries(\n            Object.entries(this._data).map(([row, data]) => [Number(row), data.size])\n        );\n    }\n\n    deleteCellsArea(startRow, startCol, endRow, endCol) {\n        const [minRow, maxRow] = [Math.min(startRow, endRow), Math.max(startRow, endRow)];\n        const [minCol, maxCol] = [Math.min(startCol, endCol), Math.max(startCol, endCol)];\n        let deletedCount = 0;\n        let boundariesChanged = false;\n\n        // We need to collect rows first to avoid modifying while iterating\n        const rowsToProcess = [];\n        for (const row in this._rows) {\n            if (row >= minRow && row <= maxRow) {\n                rowsToProcess.push(row);\n            }\n        }\n\n        for (const row of rowsToProcess) {\n            const rowArr = this._rows[row];\n\n            // Collect columns to delete\n            const colsToDelete = [];\n            for (const col in rowArr) {\n                if (col >= minCol && col <= maxCol) {\n                    colsToDelete.push(col);\n                }\n            }\n\n            // Delete the collected columns\n            for (const col of colsToDelete) {\n                delete rowArr[col];\n                this.decrementRowSize(row);\n                this._colCounts[col]--;\n                deletedCount++;\n\n                if (col == this._leftCol || col == this._rightCol) {\n                    boundariesChanged = true;\n                }\n            }\n\n            // Clean empty rows\n            if (this._data[row].size === 0) {\n                delete this._data[row];\n                this._totalRows--;\n                boundariesChanged = true;\n            }\n        }\n\n        this._valueCount -= deletedCount;\n        if (boundariesChanged) {\n            this._recalculateBoundaries();\n        }\n\n        return deletedCount;\n    }\n\n    getCells(startRow, startCol, endRow, endCol) {\n        const cells = [];\n        const [minRow, maxRow] = [Math.min(startRow, endRow), Math.max(startRow, endRow)];\n        const [minCol, maxCol] = [Math.min(startCol, endCol), Math.max(startCol, endCol)];\n\n        // Get and sort rows in range\n        const rows = Object.keys(this._data)\n            .map(Number)\n            .filter(row => row >= minRow && row <= maxRow)\n\n        for (const row of rows) {\n            // Get and sort columns in range\n            const cols = Object.keys(this._data[row])\n                .map(Number)\n                .filter(col => col >= minCol && col <= maxCol)\n\n            for (const col of cols) {\n                cells.push({\n                    row,\n                    col,\n                    value: this._data[row][col]\n                });\n            }\n        }\n\n        return cells;\n    }\n    getCellsForce(startRow, startCol, endRow, endCol) {\n        const cells = [];\n        for (let row = startRow; row <= endRow; row++) {\n            for(let col = startCol; col <= endCol; col++) {\n                cells.push({\n                    row,\n                    col,\n                });\n            }\n        }\n\n        return cells;\n    }\n\n    // Accessors\n    get topRow() { return this._topRow === Infinity ? null : this._topRow; }\n    get bottomRow() { return this._bottomRow === -Infinity ? null : this._bottomRow; }\n    get leftCol() { return this._leftCol === Infinity ? null : this._leftCol; }\n    get rightCol() { return this._rightCol === -Infinity ? null : this._rightCol; }\n    get totalRows() { return this._totalRows; }       // Rows with at least one cell\n    get totalColumns() { return this._totalCols; }    // Columns with at least one cell\n    get totalValues() { return this._totalValues; }\n    get rowCount() {\n        return this._topRow !== Infinity && this._bottomRow !== -Infinity\n            ? this._bottomRow - this._topRow + 1\n            : 0;\n    }\n    get colCount() {\n        return this._leftCol !== Infinity && this._rightCol !== -Infinity\n            ? this._rightCol - this._leftCol + 1\n            : 0;\n    }\n    get valueCount() { return this._valueCount; }\n\n    get allDimensions() {\n        return {\n            topRow: this.topRow,\n            bottomRow: this.bottomRow,\n            leftCol: this.leftCol,\n            rightCol: this.rightCol,\n            rowCount: this.rowCount,\n            colCount: this.colCount,\n            totalValues: this.totalValues\n        }\n    }\n\n    clear() {\n        this._data = [];\n        this._topRow = Infinity;\n        this._bottomRow = -Infinity;\n        this._leftCol = Infinity;\n        this._rightCol = -Infinity;\n        this._valueCount = 0;\n    }\n\n    forEach(callback) {\n        let counter = 0;\n        for (let row in this._data) {\n            if (row === 'count') continue;\n            for (let col in this._data[row]) {\n                callback(this._data[row][col], row, col, counter++);\n            }\n        }\n    }\n}","import FinData from \"./financial/FinData\";\nimport { dependencyTree, reverseDependencyTree, tickerReg } from \"./dependencytracker\";\n\nexport default class ExpressionParser {\n    constructor(data) {\n        this.data = data; // Spreadsheet data\n        this.finData = new FinData();\n    }\n\n    // Add a dependency relationship\n    addDependency(source, target) {\n        const sr = source[0], sc = source[1];\n        const tr = target[0], tc = target[1];\n        if (!dependencyTree[tr]) dependencyTree[tr] = {};\n        if (!dependencyTree[tr][tc]) dependencyTree[tr][tc] = {};\n        if (!dependencyTree[tr][tc][sr]) dependencyTree[tr][tc][sr] = {};\n        dependencyTree[tr][tc][sr][sc] = true;\n\n        if (!reverseDependencyTree[sr]) reverseDependencyTree[sr] = {};\n        if (!reverseDependencyTree[sr][sc]) reverseDependencyTree[sr][sc] = {};\n        if (!reverseDependencyTree[sr][sc][tr]) reverseDependencyTree[sr][sc][tr] = {};\n        reverseDependencyTree[sr][sc][tr][tc] = true;\n    }\n\n    // Tokenize the input expression\n    tokenize(expression) {\n        // Remove leading '=' if present\n        if (expression.startsWith('=')) {\n            expression = expression.slice(1);\n        }\n\n        const tokens = [];\n        const regex = /\\s*(=>|[-+*/^()]|[A-Za-z_]\\w*|\\d*\\.?\\d+|\\S)\\s*/g;\n        let match;\n        while ((match = regex.exec(expression)) !== null) {\n            tokens.push(match[1]);\n        }\n        return tokens;\n    }\n\n    static tokenizeWithIndex(expression) {\n        // Remove leading '=' if present\n        if (expression.startsWith('=')) {\n            expression = expression.slice(1);\n        }\n\n        const tokens = [];\n        const regex = /\\s*(=>|[-+*/^()]|[A-Za-z_]\\w*|\\d*\\.?\\d+|\\S)\\s*/dg;\n        let match;\n        while ((match = regex.exec(expression)) !== null) {\n            tokens.push([match[1], match.indices[1]]);\n        }\n        return tokens;\n    }\n\n    // Parse the tokens into an AST\n    parse(tokens) {\n        let index = 0;\n\n        const parseExpression = () => {\n            let left = parseTerm();\n            while (index < tokens.length && (tokens[index] === '+' || tokens[index] === '-')) {\n                const operator = tokens[index];\n                index++;\n                const right = parseTerm();\n                left = { type: 'BinaryExpression', operator, left, right };\n            }\n            return left;\n        };\n\n        const parseTerm = () => {\n            let left = parseFactor();\n            while (index < tokens.length && (tokens[index] === '*' || tokens[index] === '/')) {\n                const operator = tokens[index];\n                index++;\n                const right = parseFactor();\n                left = { type: 'BinaryExpression', operator, left, right };\n            }\n            return left;\n        };\n\n        const parseFactor = () => {\n            if (tokens[index] === '(') {\n                index++;\n                const expr = parseExpression();\n                if (tokens[index] !== ')') {\n                    throw new Error('Expected closing parenthesis');\n                }\n                index++;\n                return expr;\n            } else if (/^\\d+$/.test(tokens[index])) {\n                return { type: 'Number', value: parseFloat(tokens[index++]) };\n            } else if (tokens[index] === ':') {\n                return { type: 'RangeReference', value: tokens[index++] };\n            } else if (/^[A-Za-z]+\\d+$/.test(tokens[index])) {\n                if (tokens[index + 1] === ':') {\n                    return { type: 'RangeReference', value: `${tokens[index++]}${tokens[index++]}${tokens[index++]}` };\n                }\n                return { type: 'CellReference', value: tokens[index++] };\n            } else if (/^[A-Za-z_]\\w*$/.test(tokens[index])) {\n                return { type: 'Function', name: tokens[index++], args: parseArguments() };\n            } else {\n                throw new Error(`Unexpected token: ${tokens[index]}`);\n            }\n        };\n\n        const parseArguments = () => {\n            const args = [];\n            if (tokens[index] === '(') {\n                index++;\n                while (tokens[index] !== ')') {\n                    args.push(parseExpression());\n                    if (tokens[index] === ',') {\n                        index++;\n                    }\n                }\n                index++;\n            }\n            return args;\n        };\n\n        return parseExpression();\n    }\n\n    // Evaluate the AST\n    evaluate(ast, source) {\n        // if (source) {\n        //     // Remove old dependencies before evaluating\n        //     this.removeDependencies(source);\n        // }\n        switch (ast.type) {\n            case 'Number':\n                return ast.value;\n            case 'CellReference':\n                if (source) {\n                    const { row, col } = this.parseCellReference(ast.value);\n                    this.addDependency(source, [row, col]);\n                }\n                return this.getCellValue(ast.value);\n            case 'RangeReference':\n                if (source) {\n                    const [startCell, endCell] = ast.value.split(':');\n                    const start = this.parseCellReference(startCell);\n                    const end = this.parseCellReference(endCell);\n\n                    for (let row = start.row; row <= end.row; row++) {\n                        for (let col = start.col; col <= end.col; col++) {\n                            this.addDependency(source, [row, col]);\n                        }\n                    }\n                }\n                return this.getRangeValues(ast.value);\n            case 'BinaryExpression':\n                return this.evaluateBinaryExpression(ast, source);\n            case 'Function':\n                return this.evaluateFunction(ast, source);\n            default:\n                throw new Error(`Unknown AST node type: ${ast.type}`);\n        }\n    }\n\n    // Evaluate binary expressions (e.g., +, -, *, /, ^)\n    evaluateBinaryExpression(ast, source) {\n        const left = this.evaluate(ast.left, source);\n        const right = this.evaluate(ast.right, source);\n        switch (ast.operator) {\n            case '+':\n                return left + right;\n            case '-':\n                return left - right;\n            case '*':\n                return left * right;\n            case '/':\n                return left / right;\n            case '^':\n                return Math.pow(left, right);\n            default:\n                throw new Error(`Unknown operator: ${ast.operator}`);\n        }\n    }\n\n    // Evaluate functions (e.g., SUM, AVERAGE)\n    evaluateFunction(ast, source) {\n        const args = ast.args.map(arg => this.evaluate(arg));\n        switch (ast.name.toUpperCase()) {\n            case 'SUM':\n                return args.flat().reduce((sum, val) => sum + val, 0);\n            case 'AVERAGE':\n                const values = args.flat();\n                return values.reduce((sum, val) => sum + val, 0) / values.length;\n            case 'ERROR':\n                return 'ERROR';\n            case 'REFERROR':\n                return 'REFERROR';\n            default:\n                // tickerReg[source[0]]\n                console.log('subbing', ast.name)\n                if (!tickerReg[ast.name]) tickerReg[ast.name] = {};\n                tickerReg[ast.name][`${source[0]},${source[1]}`] = true;\n                if (this.finData.get('YA', ast.name)) {\n                    return this.finData.get('YA', ast.name).price;\n                } else {\n                    return '';\n                }\n                // throw new Error(`Unknown function: ${ast.name}`);\n        }\n    }\n\n    getCellText(row, col) {\n        return this.data.get(row, col)?.text ?? '';\n    }\n\n    // Get the value of a cell reference (e.g., A1, B2)\n    getCellValue(cellRef) {\n        const { row, col } = this.parseCellReference(cellRef);\n        if (row < 0 || row > this.bottomRow || col < 0 || col > this.data.rightCol) {\n            return '';\n            throw new Error(`Invalid cell reference: ${cellRef}`);\n        }\n        const value = this.getCellText(row, col);\n\n        // If the cell value is a formula (starts with '='), evaluate it recursively\n        if (typeof value === 'string' && value.startsWith('=')) {\n            return this.evaluateExpression(value, [row, col]);\n        }\n\n        // Otherwise, treat it as a literal value\n        return typeof value === 'number' ? value : parseFloat(value) || 0;\n    }\n\n    // Get the values of a range reference (e.g., A1:B2)\n    getRangeValues(rangeRef) {\n        const [startCell, endCell] = rangeRef.split(':');\n        const start = this.parseCellReference(startCell);\n        const end = this.parseCellReference(endCell);\n\n        const values = [];\n        for (let row = start.row; row <= end.row; row++) {\n            for (let col = start.col; col <= end.col; col++) {\n                if (row < 0 || row >= this.data.bottomRow || col < 0 || col >= this.rightCol) {\n                    throw new Error(`Invalid cell in range: ${rangeRef}`);\n                }\n                const value = this.getCellText(row, col);\n\n                // If the cell value is a formula (starts with '='), evaluate it recursively\n                if (typeof value === 'string' && value.startsWith('=')) {\n                    values.push(this.evaluateExpression(value, [row,col]));\n                } else {\n                    values.push(typeof value === 'number' ? value : parseFloat(value) || 0);\n                }\n            }\n        }\n\n        return values;\n    }\n\n    // Parse a cell reference (e.g., A1 => { row: 0, col: 0 })\n    parseCellReference(cellRef) {\n        const colLetter = cellRef.match(/[A-Za-z]+/)?.[0];\n        const rowNumber = cellRef.match(/\\d+/)?.[0];\n\n        if (!colLetter || !rowNumber) {\n            throw new Error(`Invalid cell reference: ${cellRef}`);\n        }\n\n        const col = colLetter.split('').reduce((acc, char) => acc * 26 + (char.toUpperCase().charCodeAt(0) - 64), 0) - 1;\n        const row = parseInt(rowNumber, 10) - 1;\n\n        return { row, col };\n    }\n\n    static parseCellReference(cellRef) {\n        const colLetter = cellRef.match(/[A-Za-z]+/)?.[0];\n        const rowNumber = cellRef.match(/\\d+/)?.[0];\n\n        if (!colLetter || !rowNumber) {\n            throw new Error(`Invalid cell reference: ${cellRef}`);\n        }\n\n        const col = colLetter.split('').reduce((acc, char) => acc * 26 + (char.toUpperCase().charCodeAt(0) - 64), 0) - 1;\n        const row = parseInt(rowNumber, 10) - 1;\n\n        return { row, col };\n    }\n\n    getAst(expression) {\n        if (expression.startsWith('=')) {\n            const tokens = this.tokenize(expression);\n            return this.parse(tokens);\n        }\n        return null;\n    }\n\n    // Main function to parse and evaluate an expression\n    evaluateExpression(expression, source) {\n        if (typeof expression !== 'string') {\n            return expression; // Return non-string values as-is\n        }\n\n        // If the expression starts with '=', parse and evaluate it\n        if (expression.startsWith('=')) {\n            const tokens = this.tokenize(expression);\n            const ast = this.parse(tokens);\n            return this.evaluate(ast, source);\n        }\n\n        // If the expression does not start with '=', treat it as a literal value\n        return parseFloat(expression) || expression;\n    }\n}","export default class FinData {\n    static _instance: any;\n    _data: Object;\n    constructor() {\n        if (FinData._instance) {\n            return FinData._instance\n        }\n        FinData._instance = this;\n        this._data = {};\n    }\n    store(namespace: string, key: string, value: any) {\n        if (!this._data[namespace]) this._data[namespace] = {};\n        this._data[namespace][key] = value;\n    }\n    get(namespace: string, key: string) {\n        if (!this._data[namespace]) return null;\n        if (!Object.hasOwn(this._data[namespace], key)) return null;\n        return this._data[namespace][key];\n    }\n}","export const dependencyTree = {\n\n};\n\nexport const reverseDependencyTree = {\n\n};\n\nexport const tickerReg = {\n\n};\n\nfunction isEmpty(obj) {\n    for(let i in obj) {\n        if (Object.hasOwn(obj,i)) return false;\n    }\n    return true;\n}\n\nexport function shiftDependenciesUp(pivotRow) {\n    const cellsToUpdate = [];\n    function helper(tree, depth = 0, didShift = false) {\n        const newDeps = {};\n        if (depth === 2) {\n            for (let row in tree) {\n                let tmp = tree[row];\n                if (row > pivotRow) {\n                    newDeps[parseInt(row) - 1] = tree[row];\n                    delete tree[row];\n                }\n                if (didShift) {\n                    for (let col in tmp) {\n                        cellsToUpdate.push([row, col]);\n                    }\n\n                }\n            }\n        } else if (depth === 0) {\n            for (let row in tree) {\n                if (row == pivotRow) {\n                    helper(tree[row], 1,true);\n                    delete tree[row];\n                } else if (row > pivotRow) {\n                    newDeps[parseInt(row) - 1] = helper(tree[row], 1, true);\n                    delete tree[row];\n                } else {\n                    helper(tree[row], 1);\n                }\n            }\n        } else if (depth === 1) {\n            for (let col in tree) {\n                helper(tree[col], 2, didShift);\n            }\n        }\n        for (let rowOrCol in newDeps) { // in place update\n            tree[rowOrCol] = newDeps[rowOrCol];\n        }\n        return tree;\n    }\n    helper(dependencyTree);\n    return cellsToUpdate;\n}\nexport function shiftDependenciesDown(pivotRow) {\n    const cellsToUpdate = [];\n    function helper(tree, depth = 0,didShift=false) {\n        const newDeps = {};\n        if (depth === 2) {\n            for (let row in tree) {\n                let tmp = tree[row];\n                if (row >= pivotRow) {\n                    newDeps[parseInt(row) + 1] = tree[row];\n                    delete tree[row];\n                }\n                if (didShift) {\n                    for (let col in tmp) {\n                        cellsToUpdate.push([row, col]);\n                    }\n\n                }\n            }\n        } else if (depth === 0) {\n            for (let row in tree) {\n                if (row >= pivotRow) {\n                    newDeps[parseInt(row) + 1] = helper(tree[row], 1,true);\n                    delete tree[row];\n                } else {\n                    helper(tree[row], 1);\n                }\n            }\n        } else if (depth === 1) {\n            for (let col in tree) {\n                helper(tree[col], 2,didShift);\n            }\n        }\n        for (let rowOrCol in newDeps) { // in place update\n            tree[rowOrCol] = newDeps[rowOrCol];\n        }\n        return tree;\n    }\n    helper(dependencyTree);\n    return cellsToUpdate;\n}\nexport function shiftDependenciesRight(pivotCol) {\n    const cellsToUpdate = [];\n    function helper(tree, depth = 0, didshift, _row) {\n        const newDeps = {};\n        if (depth === 0 || depth === 2) {\n            for (let row in tree) {\n                helper(tree[row], depth + 1, didshift, row);\n            }\n        }\n        else if (depth === 1) {\n            for (let col in tree) {\n                if (col >= pivotCol) {\n                    newDeps[parseInt(col) + 1] = helper(tree[col], 2,true, null);\n                    delete tree[col];\n                } else {\n                    helper(tree[col], 2);\n                }\n            }\n        } else if (depth === 3) {\n            for (let col in tree) {\n                if (col >= pivotCol) {\n                    newDeps[parseInt(col) + 1] = true;\n                    delete tree[col];\n                }\n                if (didshift) {\n                    cellsToUpdate.push([_row, col]);\n                }\n            }\n        }\n        for (let rowOrCol in newDeps) { // in place update\n            tree[rowOrCol] = newDeps[rowOrCol];\n        }\n        return tree;\n    }\n    helper(dependencyTree);\n    return cellsToUpdate;\n}\nexport function shiftDependenciesLeft(pivotCol) {\n    const cellsToUpdate = [];\n    function helper(tree, depth = 0, didshift, _row) {\n        const newDeps = {};\n        if (depth === 0 || depth === 2) {\n            for (let row in tree) {\n                helper(tree[row], depth + 1, didshift, row);\n            }\n        }\n        else if (depth === 1) {\n            for (let col in tree) {\n                if (col == pivotCol) {\n                    helper(tree[col], 2, true);\n                    delete tree[col];\n                } else if (col >= pivotCol) {\n                    newDeps[parseInt(col) - 1] = helper(tree[col], 2,true, null);\n                    delete tree[col];\n                } else {\n                    helper(tree[col], 2);\n                }\n            }\n        } else if (depth === 3) {\n            for (let col in tree) {\n                if (col >= pivotCol) {\n                    newDeps[parseInt(col) - 1] = true;\n                    delete tree[col];\n                }\n                if (didshift) {\n                    cellsToUpdate.push([_row, col]);\n                }\n            }\n        }\n        for (let rowOrCol in newDeps) { // in place update\n            tree[rowOrCol] = newDeps[rowOrCol];\n        }\n        return tree;\n    }\n    helper(dependencyTree);\n    return cellsToUpdate;\n}\n\nexport function removeDependents(deptRow, deptCol) {\n    const dependencies = getDependencies(deptRow, deptCol);\n    for(const [drow, dcol] of dependencies) {\n        const dcell = dependencyTree[drow]?.[dcol];\n        if (!dcell) continue;\n        if (dcell[deptRow]?.[deptCol]) {\n            delete dcell[deptRow][deptCol];\n            if (isEmpty(dcell[deptRow])) {\n                delete dcell[deptRow];\n            }\n        }\n    }\n    removeDependencies(deptRow, deptCol);\n}\nexport function getDependencies(row,col) {\n    const deps = [];\n    const t = reverseDependencyTree;\n    const cell = t[row]?.[col];\n    if (!cell) return [];\n    for(let drow in cell) {\n        for(let dcol in cell[drow]) {\n            deps.push([drow,dcol]);\n        }\n    }\n    return deps;\n}\nexport function removeDependencies(row, col) {\n    const t = reverseDependencyTree;\n    if (!t[row]?.[col]) return;\n    delete t[row][col];\n    if (isEmpty(t[row])) delete t[row];\n}","export function launchFormatMenu() {\n    const formatWindow = window.open('', 'target=_blank', 'width=190,height=400');\n    formatWindow.document.body.innerHTML = `\n        <style>\n            .format-menu {\n                font-family: Arial, sans-serif;\n                width: 220px;\n                padding: 12px;\n                background: #f8f8f8;\n                border: 1px solid #999999;\n                border-radius: 4px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n            }\n            .menu-section {\n                margin-bottom: 12px;\n            }\n            .menu-title {\n                font-weight: bold;\n                margin-bottom: 6px;\n                color: #555;\n                font-size: 13px;\n            }\n            select, input {\n                width: 100%;\n                padding: 6px;\n                border: 1px solid #ccc;\n                border-radius: 3px;\n                margin-bottom: 8px;\n            }\n            .color-options {\n                display: flex;\n                gap: 4px;\n                margin-top: 6px;\n            }\n            .color-option {\n                width: 20px;\n                height: 20px;\n                border-radius: 3px;\n                cursor: pointer;\n                border: 1px solid #999999;\n            }\n            .format-btn {\n                flex: 1;\n                padding: 6px;\n                background: white;\n                border: 1px solid #ccc;\n                border-radius: 3px;\n                cursor: pointer;\n                text-align: center;\n                font-size: 12px;\n            }\n            .format-btn:hover {\n                background: #f0f0f0;\n            }\n            .format-btn.active {\n                background: #999999;\n                border-color: #999;\n            }\n            .color-option:hover {\n                border-color: #999;\n            }\n            .alignment-options,.border-options {\n                display: flex;\n                gap: 4px;\n            }\n            .alignment-btn,.border-btn {\n                flex: 1;\n                padding: 6px;\n                background: white;\n                border: 1px solid #ccc;\n                border-radius: 3px;\n                cursor: pointer;\n                text-align: center;\n            }\n            .alignment-btn:hover,.border-btn:hover {\n                background: #f0f0f0;\n            }\n            .alignment-btn.active,.border-btn.active {\n                background: #999999;\n                border-color: #999;\n            }\n            .baseline-visual {\n                display: inline-block;\n                width: 100%;\n                height: 40px;\n                position: relative;\n                margin-top: 8px;\n                border: 1px solid #eee;\n                background: repeating-linear-gradient(\n                    to bottom,\n                    #f8f8f8,\n                    #f8f8f8 1px,\n                    #fff 1px,\n                    #fff 10px\n                );\n            }\n            .baseline-line {\n                position: absolute;\n                left: 0;\n                right: 0;\n                height: 1px;\n                background-color: red;\n            }\n            .baseline-text {\n                position: absolute;\n                left: 50%;\n                transform: translateX(-50%);\n                white-space: nowrap;\n            }\n        </style>\n        <div class=\"format-menu\">\n            <div class=\"menu-section\">\n                <div class=\"menu-title\">Cell Type</div>\n                <select id=\"cellType\">\n                    <option value=\"text\" selected>Text</option>\n                    <option value=\"button\">Button</option>\n                    <option value=\"linechart\">Line Chart</option>\n                </select>\n            </div>\n            <div class=\"menu-section\">\n                <div class=\"menu-title\">Font Size</div>\n                <select id=\"fontSize\">\n                    <option value=\"8\">8</option>\n                    <option value=\"10\" selected>10</option>\n                    <option value=\"12\">12</option>\n                    <option value=\"14\">14</option>\n                    <option value=\"16\">16</option>\n                    <option value=\"18\">18</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"24\">24</option>\n                </select>\n            </div>\n            <div class=\"menu-section\">\n                <div class=\"menu-title\">Font Color</div>\n                <input type=\"color\" id=\"fontColor\" value=\"#000000\">\n                <div class=\"color-options\">\n                    <div class=\"color-option\" style=\"background: #000000;\" data-color=\"#000000\"></div>\n                    <div class=\"color-option\" style=\"background: #ff0000;\" data-color=\"#ff0000\"></div>\n                    <div class=\"color-option\" style=\"background: #00aa00;\" data-color=\"#00aa00\"></div>\n                    <div class=\"color-option\" style=\"background: #0000ff;\" data-color=\"#0000ff\"></div>\n                    <div class=\"color-option\" style=\"background: #ff9900;\" data-color=\"#ff9900\"></div>\n                </div>\n            </div>\n            <div class=\"menu-section\">\n                <div class=\"menu-title\">Text Alignment</div>\n                <div class=\"alignment-options\">\n                    <div class=\"alignment-btn\" data-align=\"left\" title=\"Align Left\">⎡</div>\n                    <div class=\"alignment-btn\" data-align=\"center\" title=\"Align Center\">⎢</div>\n                    <div class=\"alignment-btn\" data-align=\"right\" title=\"Align Right\">⎣</div>\n                </div>\n            </div>\n            <div class=\"menu-section\">\n                <div class=\"menu-title\">Borders</div>\n                <div class=\"border-options\">\n                    <div class=\"border-btn\" data-border=\"${(1 << 1)}\" title=\"Border Left\">Left</div>\n                    <div class=\"border-btn\" data-border=\"${(1 << 2)}\" title=\"Border Top\">Top</div>\n                    <div class=\"border-btn\" data-border=\"${(1 << 3)}\" title=\"Border Right\">Right</div>\n                    <div class=\"border-btn\" data-border=\"${(1 << 4)}\" title=\"Border Bottom\">Bottom</div>\n                </div>\n            </div>\n            <div class=\"menu-section\">\n            <div class=\"menu-title\">Text Baseline</div>\n                <div class=\"option-group\">\n                    <div class=\"format-btn\" data-baseline=\"alphabetic\" title=\"Alphabetic\">A</div>\n                    <div class=\"format-btn\" data-baseline=\"top\" title=\"Top\">Top</div>\n                    <div class=\"format-btn\" data-baseline=\"middle\" title=\"Middle\">Mid</div>\n                    <div class=\"format-btn\" data-baseline=\"bottom\" title=\"Bottom\">Bot</div>\n                </div>\n                <div class=\"baseline-visual\" id=\"baselineDemo\">\n                    <div class=\"baseline-line\" id=\"baselineIndicator\"></div>\n                    <div class=\"baseline-text\" id=\"baselineText\">Text</div>\n                </div>\n            </div>\n        </div>\n    `;\n    const cbs = [];\n    function onChange(type, value) {\n        for(let cb of cbs) {\n            cb(type,value);\n        }\n    }\n    formatWindow.document.title = 'Format Menu';\n    formatWindow.document.getElementById('fontSize').addEventListener('change', function () {\n        onChange('fontSize', this.value);\n    });\n    formatWindow.document.getElementById('cellType').addEventListener('change', function () {\n        onChange('cellType', this.value);\n    });\n    formatWindow.document.getElementById('fontColor').addEventListener('input', function () {\n        onChange('color', this.value);\n    });\n    // Quick color options\n    formatWindow.document.querySelectorAll('.color-option').forEach(option => {\n        option.addEventListener('click', function () {\n            const color = this.getAttribute('data-color');\n            formatWindow.document.getElementById('fontColor').value = color;\n            onChange('color', color);\n        });\n    });\n    // Alignment buttons\n    formatWindow.document.querySelectorAll('.alignment-btn').forEach(function (btn) {\n        btn.addEventListener('click', function () {\n            // Remove active class from all buttons\n            formatWindow.document.querySelectorAll('.alignment-btn').forEach(function (b) {\n                b.classList.remove('active');\n            });\n            // Add active class to clicked button\n            this.classList.add('active');\n            const alignment = this.getAttribute('data-align');\n            onChange('textAlign', alignment);\n        });\n    });\n    // Border buttons\n    formatWindow.document.querySelectorAll('.border-btn').forEach(function (btn) {\n        btn.addEventListener('click', function () {\n            this.classList.toggle('active');\n            let border = 0;\n            formatWindow.document.querySelectorAll('.border-btn.active').forEach(function (b) {\n                const databorder = b.getAttribute('data-border');\n                border |= databorder;\n            });\n            // Remove active class from all buttons\n            // const border = this.getAttribute('data-border');\n            onChange('border', border);\n        });\n    });\n    // Baseline buttons\n    formatWindow.document.querySelectorAll('[data-baseline]').forEach(function (btn) {\n        // Update baseline visual demonstration\n        const baselineOptions = {\n            'alphabetic': { position: 30, description: 'Normal text baseline' },\n            'top': { position: 5, description: 'Top of the em square' },\n            'middle': { position: 20, description: 'Middle of the em square' },\n            'bottom': { position: 35, description: 'Bottom of the em square' },\n            'hanging': { position: 5, description: 'Hanging baseline (like Hindi)' },\n            'ideographic': { position: 35, description: 'Ideographic baseline (like CJK)' }\n        };\n        function updateBaselineVisual(baseline) {\n            const demo = formatWindow.document.getElementById('baselineDemo');\n            const indicator = formatWindow.document.getElementById('baselineIndicator');\n            const text = formatWindow.document.getElementById('baselineText');\n            if (baselineOptions[baseline]) {\n                const pos = baselineOptions[baseline].position;\n                indicator.style.top = `${pos}px`;\n                text.style.top = `${pos}px`;\n                text.textContent = baseline;\n            }\n        }\n        btn.addEventListener('click', function () {\n            formatWindow.document.querySelectorAll('[data-baseline]').forEach(b => b.classList.remove('active'));\n            this.classList.add('active');\n            const baseline = this.getAttribute('data-baseline');\n            updateBaselineVisual(baseline);\n            onChange('textBaseline', baseline);\n        });\n    });\n    return {win: formatWindow, addListener: (fn) => cbs.push(fn)};\n}","export function createLineChart(data, container, width, height) {\n    console.log('createlinecahrt?')\n    function render(data, width, height) {\n        container.innerHTML = '';\n        container.innerHTML = `\n                    <div class=\"chart-container\">\n                        <div class=\"chart\"></div>\n                    </div>\n                    <div class=\"tooltip\"></div>\n                `;\n        const chart = container.querySelector('.chart');\n        const tooltip = container.querySelector('.tooltip');\n        const parsedData = data.map(item => ({\n            value: parseFloat(item[0]),\n            date: item[1]\n        }));\n\n        // Get dimensions\n        // const width = chart.offsetWidth;\n        // const height = chart.offsetHeight;\n        const margin = { top: 20, right: 50, bottom: 50, left: 50 };\n        const chartWidth = width - margin.left - margin.right;\n        const chartHeight = height - margin.top - margin.bottom;\n\n        // Create SVG\n        const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        svg.setAttribute(\"width\", width);\n        svg.setAttribute(\"height\", height);\n        svg.style.overflow = 'visible';\n        chart.appendChild(svg);\n\n        // Create chart group\n        const chartGroup = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n        chartGroup.setAttribute(\"transform\", `translate(${margin.left}, ${margin.top})`);\n        svg.appendChild(chartGroup);\n\n        // Calculate scales\n        const xScale = (date, index) => {\n            const totalPoints = parsedData.length;\n            // Add slight padding to the sides\n            const padding = 0.02 * chartWidth;\n            return padding + (index / (totalPoints - 1)) * (chartWidth - 2 * padding);\n        };\n\n        const maxValue = Math.max(...parsedData.map(d => d.value));\n        const yScale = (value) => {\n            return chartHeight - (value / maxValue) * chartHeight;\n        };\n\n        // Create line\n        const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n        let pathData = \"M\";\n\n        parsedData.forEach((d, i) => {\n            const x = xScale(d.date, i);\n            const y = yScale(d.value);\n\n            pathData += `${x},${y} `;\n\n            if (i < parsedData.length - 1) {\n                pathData += \"L\";\n            }\n\n            // Add points\n            const point = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n            point.setAttribute(\"class\", \"point\");\n            point.setAttribute(\"cx\", x);\n            point.setAttribute(\"cy\", y);\n            point.setAttribute(\"r\", 4);\n            point.setAttribute(\"data-value\", d.value);\n            point.setAttribute(\"data-date\", d.date);\n\n            // Add hover events\n            point.addEventListener('mouseover', (e) => {\n                tooltip.style.display = 'block';\n                tooltip.innerHTML = `Date: ${d.date}<br>Value: ${d.value}`;\n                tooltip.style.left = (e.pageX + 10) + 'px';\n                tooltip.style.top = (e.pageY - 10) + 'px';\n            });\n\n            point.addEventListener('mouseout', () => {\n                tooltip.style.display = 'none';\n            });\n\n            chartGroup.appendChild(point);\n        });\n\n        path.setAttribute(\"class\", \"line\");\n        path.setAttribute(\"d\", pathData);\n        chartGroup.appendChild(path);\n\n        // Add x-axis labels (dates)\n        const labelPadding = 5; // Additional padding for labels\n        parsedData.forEach((d, i) => {\n            if (i % Math.ceil(parsedData.length / 5) === 0 || i === parsedData.length - 1) {\n                const xPos = xScale(d.date, i);\n\n                // Only draw label if it fits within bounds\n                if (xPos >= 0 && xPos <= chartWidth) {\n                    const label = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n                    label.setAttribute(\"class\", \"x-axis\");\n                    label.setAttribute(\"x\", xPos);\n                    label.setAttribute(\"y\", chartHeight + 20);\n                    label.setAttribute(\"text-anchor\", \"middle\");\n\n                    // Shorten date format if needed\n                    const labelText = d.date.length > 10 ? d.date.substring(5) : d.date;\n                    label.textContent = labelText;\n\n                    // Check if label would extend beyond right edge\n                    const textLength = labelText.length * 6; // Approximate width\n                    if (xPos + textLength / 2 > chartWidth) {\n                        label.setAttribute(\"text-anchor\", \"end\");\n                        label.setAttribute(\"x\", chartWidth - labelPadding);\n                    }\n                    // Check if label would extend beyond left edge\n                    else if (xPos - textLength / 2 < 0) {\n                        label.setAttribute(\"text-anchor\", \"start\");\n                        label.setAttribute(\"x\", labelPadding);\n                    }\n\n                    chartGroup.appendChild(label);\n                }\n            }\n        });\n\n        // Add y-axis labels (values)\n        for (let i = 0; i <= 5; i++) {\n            const value = (maxValue / 5) * i;\n            const label = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n            label.setAttribute(\"class\", \"y-axis\");\n            label.setAttribute(\"x\", -10);\n            label.setAttribute(\"y\", yScale(value));\n            label.setAttribute(\"text-anchor\", \"end\");\n            label.setAttribute(\"dy\", \"0.35em\");\n            label.textContent = value.toFixed(1);\n            chartGroup.appendChild(label);\n\n            // Add grid line\n            const gridLine = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n            gridLine.setAttribute(\"x1\", 0);\n            gridLine.setAttribute(\"y1\", yScale(value));\n            gridLine.setAttribute(\"x2\", chartWidth);\n            gridLine.setAttribute(\"y2\", yScale(value));\n            gridLine.setAttribute(\"stroke\", \"#eee\");\n            gridLine.setAttribute(\"stroke-dasharray\", \"2,2\");\n            chartGroup.insertBefore(gridLine, chartGroup.firstChild);\n        }\n\n        // Add axis titles\n        const xAxisTitle = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        xAxisTitle.setAttribute(\"class\", \"x-axis\");\n        xAxisTitle.setAttribute(\"x\", chartWidth / 2);\n        xAxisTitle.setAttribute(\"y\", chartHeight + 40);\n        xAxisTitle.setAttribute(\"text-anchor\", \"middle\");\n        xAxisTitle.textContent = \"Date\";\n        chartGroup.appendChild(xAxisTitle);\n\n        const yAxisTitle = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        yAxisTitle.setAttribute(\"class\", \"y-axis\");\n        yAxisTitle.setAttribute(\"transform\", \"rotate(-90)\");\n        yAxisTitle.setAttribute(\"x\", -chartHeight / 2);\n        yAxisTitle.setAttribute(\"y\", -40); // Adjusted to not overlap with labels\n        yAxisTitle.setAttribute(\"text-anchor\", \"middle\");\n        yAxisTitle.textContent = \"Value\";\n        chartGroup.appendChild(yAxisTitle);\n    }\n    function update() {\n        container.innerHTML = '';\n    }\n    function destroy() {\n        container.innerHTML = '';\n    }\n    render(data, width, height);\n    return { container, update, destroy, render };\n}","import YA from './ya';\n\nexport default class FinancialSubscriber {\n    ya: any;\n    tickListeners: Function[];\n    static _instance: any;\n    constructor() {\n        if (FinancialSubscriber._instance) {\n            return FinancialSubscriber._instance\n        }\n        FinancialSubscriber._instance = this;\n        this.ya = new YA();\n        this.tickListeners = [];\n        this.ya.addListener((data) => {\n            for(let listener of this.tickListeners) {\n                listener(data);\n            }\n        })\n    }\n    listenYA(tickers: []) {\n        this.ya.addSubs(tickers);\n    }\n    onTick(fn) {\n        this.tickListeners.push(fn);\n    }\n}","import FinData from \"./FinData\";\n\ndeclare var protobuf: any;\ndeclare var require: any;\n\n\nexport default class YA {\n    tickers: Set<any>;\n    connection: WebSocket | null;\n    data: FinData;\n    root: any;\n    Yaticker: any;\n    isOpen: boolean;\n    cbs: Function[];\n    constructor() {\n        this.tickers = new Set();\n        this.connection = null;\n        this.data = new FinData();\n        this.isOpen = false;\n        this.root = protobuf.Root.fromJSON(require(\"./YADATA.json\"));\n        this.Yaticker = this.root?.lookupType(\"yaticker\");\n        this.cbs = [];\n        // setInterval(() => {\n        //     const dummydata = { id: 'GME', price: Math.random() * 100 };\n        //     this.data.store('YA', dummydata.id, dummydata);\n        //     this.updateListeners(dummydata)\n        // }, 1000)\n    }\n    /**\n     * @returns something like '{\"subscribe\":[\"API\",\"^GSPC\",\"^DJI\",\"^IXIC\",\"^RUT\",\"CL=F\",\"GC=F\",\"NVDA\",\"GME\",\"RKT\",\"GAP\",\"BLD\",\"IBP\"]}'\n     */\n    getSubString() {\n        return JSON.stringify({\n            subscribe: [...this.tickers]\n        });\n    }\n    hasSubs() {\n        return this.tickers.size > 0;\n    }\n    addListener(cb) {\n        this.cbs.push(cb);\n    }\n    updateSubs() {\n        if (this.connection) {\n            if (this.hasSubs()) {\n                this.connection!.send(this.getSubString());\n            }\n        } else {\n            this.connection = new WebSocket(atob(\"d3NzOi8vc3RyZWFtZXIuZmluYW5jZS55YWhvby5jb20v\"));\n            this.connection.onopen = () => {\n                this.isOpen = true;\n                if (this.hasSubs()) {\n                    this.connection!.send(this.getSubString());\n                }\n            }\n            this.connection.onmessage = this.onmessage;\n        }\n        return this.connection;\n    }\n    updateListeners(data) {\n        for(let cb of this.cbs) {\n            cb(data);\n        }\n    }\n    onmessage = (event: any) => {\n        try {\n            const messageData = event.data;\n            const data: any = this.Yaticker?.decode(\n                new Uint8Array(\n                    atob(messageData)\n                        .split(\"\")\n                        .map((c) => c.charCodeAt(0)),\n                ),\n            );\n            if (data.id.startsWith('^')) {\n                data._id = data.id;\n                data.id = data.id.slice(1);\n            }\n            this.data.store('YA', data.id, data);\n            console.log('tick data:', data);\n            this.updateListeners(data);\n        } catch (e) {\n            console.log(e)\n        }\n    }\n    async fetchTicker(symbol) {\n\n    }\n    addSubs(subs: string[]) {\n        for(let symbol of subs) {\n            if (!this.tickers.has(symbol)) {\n                this.fetchTicker(symbol);\n            }\n            this.tickers.add(symbol);\n        }\n        if (this.hasSubs()) {\n            this.updateSubs();\n        }\n    }\n}","export const borderLeft = (1 << 1);\nexport const borderTop = (1 << 2);\nexport const borderRight = (1 << 3);\nexport const borderBottom = (1 << 4);\n\nexport function addBorder(curBorder: number | null, border: number) {\n    if (!curBorder) return border;\n    return curBorder | border;\n}\n\nexport function removeBorder(curBorder: number | null, border: number) {\n    if (!curBorder) return 0;\n    return border ^ curBorder;\n}\nexport function hasBorder(curBorder: number | null, border: number) {\n    if (!curBorder) return false;\n    return border === (border&curBorder);\n}\nexport function hasBorderStr(curBorder: number | null, borderStr: string) {\n    if (!curBorder) return false;\n    let border: number;\n    if (borderStr === 'left') border = borderLeft;\n    else if (borderStr === 'top') border = borderTop;\n    else if (borderStr === 'right') border = borderRight;\n    else if (borderStr === 'bottom') border = borderBottom;\n    else { return 0 };\n    return border === (border&curBorder);\n}\nexport function mkel(tag='div', className='', children?: string) {\n    const el = document.createElement(tag);\n    el.className = className;\n    if (children) {\n        el.innerHTML = children;\n    }\n    return el;\n}","// @ts-ignore\nimport ExpressionParser from 'packages/expressionparser';\n\nfunction rowColToRef(row: number, col: number) {\n    // Validate inputs\n    if (row < 0 || col < 0 || !Number.isInteger(row) || !Number.isInteger(col)) {\n        return '';\n        // throw new Error('Row and column must be non-negative integers');\n    }\n\n    // Convert column index to letters (0 = A, 1 = B, ..., 25 = Z, 26 = AA, etc.)\n    let colLetters = '';\n    let remaining = col + 1; // Convert to 1-based for calculation\n\n    while (remaining > 0) {\n        const remainder = (remaining - 1) % 26;\n        colLetters = String.fromCharCode(65 + remainder) + colLetters;\n        remaining = Math.floor((remaining - 1) / 26);\n    }\n\n    // Convert row index to 1-based number\n    const rowNumber = row + 1;\n\n    return colLetters + rowNumber;\n}\n\nexport function shiftTextRefs(text: string, dir: string) {\n    const deltas: any = {\n        up: [-1, 0], down: [1, 0], left: [0, -1], right: [0, 1]\n    }\n    const delta = deltas[dir];\n    text = text.slice(1); // strip =\n    const tokens = ExpressionParser.tokenizeWithIndex(text);\n    tokens.reverse();\n    let str = '=';\n    for (let i = 0; i < text.length; i++) {\n        while (tokens.length > 0 && !/^[A-Za-z]+\\d+$/.test(tokens[tokens.length - 1][0])) {\n            tokens.pop();\n        }\n        const [token, indexes] = (tokens[tokens.length - 1] || ['', []]);\n        if (i === indexes[0]) {\n            const cell = ExpressionParser.parseCellReference(token);\n            const newRef = rowColToRef(cell.row+delta[0], cell.col+delta[1]);\n            if (!newRef) {\n                str += 'REFERROR'\n            } else {\n                str += newRef;\n            }\n            tokens.pop();\n            i = indexes[1] - 1;\n        } else {\n            str += text[i];\n        }\n    }\n    return str;\n}","export const header = `\n<style>\n    .header-bar {\n        font-family: Arial, sans-serif;\n        background-color: #f3f3f3;\n        padding: 5px;\n        border-bottom: 1px solid #d4d4d4;\n        display: flex;\n        flex-wrap: wrap;\n        z-index: 300;\n    }\n\n    .tab-group {\n        display: flex;\n        margin-right: 15px;\n    }\n\n    .button-group {\n        display: flex;\n        border-right: 1px solid #d4d4d4;\n        padding: 3px 10px 3px 3px;\n        align-items: center;\n    }\n\n    .button {\n        background: none;\n        border: none;\n        padding: 5px 8px;\n        margin: 0 2px;\n        cursor: pointer;\n        border-radius: 3px;\n    }\n\n    .button:hover {\n        background-color: #e0e0e0;\n    }\n\n    .button img {\n        width: 16px;\n        height: 16px;\n    }\n\n    .separator {\n        width: 1px;\n        background-color: #d4d4d4;\n        margin: 0 5px;\n        height: 30px;\n    }\n\n    .dropdown {\n        position: relative;\n        display: inline-block;\n    }\n\n    .dropdown-content {\n        display: none;\n        position: absolute;\n        background-color: #f9f9f9;\n        min-width: 130px;\n        box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\n        z-index: 1;\n        font-size: 14px;\n        border: 1px solid #d4d4d4;\n    }\n    .dropdown-content > div {\n        border-bottom: 1px solid #d4d4d4;\n        padding: 2px;\n        cursor: pointer;\n    }\n\n    .dropdown-content > div:last-child {\n        border-bottom: none;\n    }\n\n    .dropdown:hover .dropdown-content {\n        display: block;\n        z-index: 300;\n    }\n</style>\n<div class=\"header-bar\">\n    <!-- Clipboard Group -->\n    <div class=\"button-group quick-text-actions-buttons\">\n        <button class=\"button\" data-action=\"paste\" title=\"Paste\">📋</button>\n        <button class=\"button\" data-action=\"cut\" title=\"Cut\">✂️</button>\n        <button class=\"button\" data-action=\"copy\" title=\"Copy\">📄</button>\n        <div class=\"separator\"></div>\n        <div class=\"dropdown\">\n            <button id=\"format-button\" class=\"button format-button\" title=\"Format Painter\">🖌️</button>\n        </div>\n    </div>\n\n    <!-- Font Group -->\n    <div class=\"button-group\">\n        <div class=\"dropdown\">\n            <button class=\"button\" title=\"Font\">Arial ▼</button>\n            <div class=\"dropdown-content\">\n                <div>Arial</div>\n                <div>Calibri</div>\n                <div>Times New Roman</div>\n            </div>\n        </div>\n        <div class=\"dropdown\">\n            <button class=\"button\" title=\"Font Size\">11 ▼</button>\n        </div>\n        <button class=\"button\" title=\"Bold\">B</button>\n        <button class=\"button\" title=\"Italic\">I</button>\n        <button class=\"button\" title=\"Underline\">U</button>\n        <div class=\"separator\"></div>\n        <button class=\"button\" title=\"Border\">⧉</button>\n        <div class=\"dropdown\">\n            <button class=\"button\" title=\"Fill Color\">▣</button>\n        </div>\n        <div class=\"dropdown\">\n            <button class=\"button\" title=\"Font Color\">A</button>\n        </div>\n    </div>\n\n    <!-- Alignment Group -->\n    <div class=\"button-group align-button-group\">\n        <button class=\"button\" data-align=\"left\" title=\"Align Left\">≡</button>\n        <button class=\"button\" data-align=\"center\" title=\"Align Center\">≡</button>\n        <button class=\"button\" data-align=\"right\" title=\"Align Right\">≡</button>\n        <div class=\"separator\"></div>\n        <button class=\"button merge-button\" title=\"Merge & Center\" id=\"merge-button\">⧉ M</button>\n    </div>\n\n    <!-- Editing Group -->\n    <div class=\"button-group\">\n        <div class=\"dropdown\">\n            <button class=\"button\" title=\"Insert\">⊕ Insert</button>\n        </div>\n        <div class=\"dropdown\">\n            <button class=\"button\" title=\"Delete\">⊖ Delete</button>\n        </div>\n        <div class=\"separator\"></div>\n        <div class=\"dropdown\">\n            <button class=\"button\" title=\"Conditional Formatting\">☰ Format</button>\n        </div>\n    </div>\n</div>\n`","import { mkel } from \"../utils\";\n\nconst menuItems = [\n    { key: 'copy', title: 'Copy', label: 'Ctrl+C' },\n    { key: 'cut', title: 'Cut', label: 'Ctrl+X' },\n    { key: 'paste', title: 'Paste', label: 'Ctrl+V' },\n    { key: 'paste-value', title: 'Paste values only', label: 'Ctrl+Shift+V' },\n    { key: 'paste-format', title: 'Paste format only', label: 'Ctrl+Alt+V' },\n    { key: 'divider' },\n    { key: 'insert-row', title: 'Insert row' },\n    { key: 'insert-column', title: 'Insert column' },\n    { key: 'divider' },\n    { key: 'merge', title: 'Merge' },\n    { key: 'unmerge', title: 'Unmerge' },\n    { key: 'divider' },\n    { key: 'delete-row', title: 'Delete row' },\n    { key: 'delete-column', title: 'Delete column' },\n    { key: 'delete-cell-text', title: 'Delete cell text' },\n    { key: 'clear', title: 'Clear Contents', label: '' },\n    { key: 'divider' },\n    { key: 'toggle-gridlines', title: 'Toggle Gridlines' },\n];\n\nfunction buildMenuItem(item: any) {\n    if (item.key === 'divider') {\n        return mkel('div', `gigasheet-item divider`);\n    }\n    const el = mkel('div', `gigasheet-item`, `\n        ${item.title}\n        <div class=\"label\">${item.label||''}</div>\n    `);\n    el.setAttribute('data-key', item.key);\n    return el;\n}\n\nfunction buildMenu(menuItems: any) {\n    return menuItems.map((it: any) => buildMenuItem(it));\n}\n\nexport default class ContextMenu {\n    menuItems: any;\n    container: any;\n    clickCb: Function | undefined;\n    constructor() {\n        this.menuItems = buildMenu(menuItems);\n        this.container = mkel('div', 'gigasheet-contextmenu');\n        this.container.oncontextmenu = ((e:any)=> e.preventDefault());\n        this.container.style.display = 'none';\n        for (let child of this.menuItems) {\n            this.container.appendChild(child);\n        }\n        this.container.onclick = (e: any) => {\n            if (e.target.hasAttribute('data-key')) {\n                const action = e.target.getAttribute('data-key');\n                if (this.clickCb) this.clickCb(action);\n                this.hide();\n            }\n        }\n    }\n\n    onClick(fn: Function) {\n        this.clickCb = fn;\n    }\n\n\n    hide() {\n        this.container.style.display = 'none';\n    }\n\n    setPosition(x: number, y: number, containerRect: any) {\n        const {width, height} = containerRect;\n        const ctxrect = this.container.getBoundingClientRect();\n        const ctxwidth = ctxrect.width;\n        const vhf = height / 2;\n        let left = x;\n        if (width - x <= ctxwidth) {\n            left -= ctxwidth;\n        }\n        this.container.style.left = `${left}px`;\n        if (y > vhf) {\n            this.container.style.bottom = `${height-y}px`;\n            this.container.style.maxHeight = `${y}px`;\n            this.container.style.top = 'auto';\n        } else {\n            this.container.style.top = `${y}px`;\n            this.container.style.maxHeight = `${height - y}px`;\n            this.container.style.bottom = 'auto';\n        }\n\n        this.container.style.display = '';\n    }\n}\n"],"names":["_id","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","JSON","parse","$5740ee1f8f0a81d9$export$baad9f01dbfd9b39","constructor","container","document","createElement","className","innerHTML","menu","querySelector","active","tabCbs","addListeners","addEventListener","e","target","hasAttribute","getAttribute","String","setActive","el","removeActive","classList","add","emit","value","forEach","fn","onTabClicked","push","tab","tabContainer","children","remove","addTab","name","lastElementChild","insertAdjacentHTML","$9da0d049db75c76f$var$uuid","$9da0d049db75c76f$export$2e2bcd8739ae039","_data","_colCounts","_topRow","Infinity","_bottomRow","_leftCol","_rightCol","_totalValues","_totalRows","_totalCols","_valueCount","save","stringify","d","Object","keys","map","row","Number","col","cc","entries","count","tr","br","lc","rc","tv","trow","tcol","restore","json","state","clear","cols","setCellProperty","property","cell","get","set","setRowSize","size","incrementRowSize","decrementRowSize","isInteger","isNewRow","isNewCell","hasOwn","isNewCol","decrementColSize","incrementColSize","deleteRow","rowObj","splice","_recalculateBoundaries","addRow","data","length","addCol","undefined","getCol","colData","deleteCol","has","delete","boundariesChanged","totalRows","minRow","maxRow","minCol","maxCol","parseInt","deleteCells","coordinates","deletedCount","boundaryChanged","affectedRows","numRow","getRowCount","getRowCounts","fromEntries","deleteCellsArea","startRow","startCol","endRow","endCol","Math","min","max","rowsToProcess","_rows","rowArr","colsToDelete","getCells","cells","filter","getCellsForce","topRow","bottomRow","leftCol","rightCol","totalColumns","totalValues","rowCount","colCount","valueCount","allDimensions","callback","counter","$5055501275aadc06$export$2e2bcd8739ae039","_instance","store","namespace","key","$c8587485a8b03077$export$a4bd3681e1db52ef","$c8587485a8b03077$export$19212157ca66f33d","$c8587485a8b03077$export$f93e88ee62922d93","$c8587485a8b03077$var$isEmpty","obj","i","$5aadb708f388d983$export$2e2bcd8739ae039","finData","addDependency","source","sr","sc","tc","tokenize","expression","match","startsWith","slice","tokens","regex","exec","tokenizeWithIndex","indices","index","parseExpression","left","parseTerm","operator","type","right","parseFactor","expr","test","parseFloat","args","parseArguments","evaluate","ast","parseCellReference","getCellValue","startCell","endCell","split","start","end","getRangeValues","evaluateBinaryExpression","evaluateFunction","pow","arg","toUpperCase","flat","reduce","sum","val","values","console","log","price","getCellText","text","cellRef","evaluateExpression","rangeRef","colLetter","rowNumber","acc","char","charCodeAt","getAst","$2ed898743101093c$export$2e2bcd8739ae039","onmessage","event","messageData","Yaticker","decode","Uint8Array","atob","c","updateListeners","tickers","Set","connection","isOpen","root","protobuf","Root","fromJSON","lookupType","cbs","getSubString","subscribe","hasSubs","addListener","cb","updateSubs","send","WebSocket","onopen","fetchTicker","symbol","addSubs","subs","$9404a3e77a7924f2$export$2e2bcd8739ae039","ya","tickListeners","listener","listenYA","onTick","$b786fc20307c7d32$export$de8456e649b1d7","curBorder","borderStr","border","$b786fc20307c7d32$export$63c9bf321bec550b","tag","$1687a2f0ec14ec0a$export$6248b70327fdc923","dir","delta","deltas","up","down","reverse","str","pop","token","indexes","newRef","$1687a2f0ec14ec0a$var$rowColToRef","colLetters","remaining","fromCharCode","floor","$874381dec2e17b27$export$38e42c68cf43b5d4","$64e794a85fb4c4a6$var$menuItems","title","label","$64e794a85fb4c4a6$export$2e2bcd8739ae039","child","menuItems","it","$64e794a85fb4c4a6$var$buildMenuItem","item","setAttribute","oncontextmenu","preventDefault","style","display","appendChild","onclick","action","clickCb","hide","onClick","setPosition","x","y","containerRect","width","height","ctxwidth","ctxrect","getBoundingClientRect","bottom","maxHeight","top","$e1851ed6dad30b6d$export$2e2bcd8739ae039","wrapper","options","_container","flexDirection","ctxmenu","append","position","overflow","scrollLeft","scrollTop","headerContainer","rowNumberContainer","cornerCell","selectionLayer","mergeButton","formatButton","lastDevicePixelRatio","window","devicePixelRatio","lastBlockCanvases","blockCanvases","cellWidth","cellHeight","blockRows","blockCols","paddingBlocks","padding","MAX_HISTORY_SIZE","rowNumberWidth","headerRowHeight","lineHeight","marginTop","subscribeFinance","mergedCells","heightOverrides","buildOverrides","widthOverrides","gridlinesOn","activeBlocks","Map","undoStack","redoStack","elRegistry","heightAccum","widthAccum","isResizing","resizeStart","resizeInitialSize","busy","selectedCell","isSelecting","selectionStart","selectionEnd","selectionHandle","draggingHeader","selectedCols","selectedRows","visibleStartRow","visibleEndRow","visibleStartCol","visibleEndCol","initEventListeners","createSelectionHandle","addNewSelection","editInput","initRender","parser","setData","initialCells","updateGridDimensions","renderHeaders","renderRowNumbers","updateVisibleGrid","overrides","_overrides","f","renderCell","requestAnimationFrame","handleScroll","resizeObserver","ResizeObserver","updateSelection","updateRenderingQuality","observe","handleMouseDown","bind","handleMouseMove","handleMouseUp","handleCellDblClick","handleKeyDown","editingCell","selectionBoundRect","clipboardData","closest","textAlign","selectedCells","getSelectedCells","setCells","execCommand","clipboardText","navigator","clipboard","readText","handlePaste","clearSelectedCells","getData","mergeSelectedCells","openFormatMenu","insertRow","insertCol","toggleGridlines","forceRerender","unmergeSelectedCells","showContextMenu","rect","rowColInBounds","selectCell","record","pivotRow","cellsToUpdate","helper","tree","depth","didShift","newDeps","tmp","rowOrCol","newText","setText","rowData","merge","heightOverride","shiftHeightOverrides","updateHeightAccum","recordChanges","changeKind","getBoundingRectCells","pivotCol","didshift","_row","widthOverride","shiftWidthOverrides","updateWidthAccum","pivot","amount","scaler","changes","deletions","previousValue","newValue","clearElRegistry","getColumnName","columnNumber","columnName","rowsData","j","shift","setWidthOverride","setHeightOverride","undo","redoChanges","updatedCells","rerender","change","bounds","prev","setCell","rerenderCells","arr","rerenderMerges","mergeSet","getMerge","block","getBlocksInMerge","redo","undoChanges","hideContextMenu","getCellFromEvent","startCellEdit","win","formatWindow","open","body","onChange","getElementById","querySelectorAll","option","color","btn","b","toggle","databorder","baselineOptions","description","baseline","indicator","pos","textContent","toLowerCase","cancelCellEdit","ctrlKey","localStorage","setItem","restoreSave","metaKey","shiftKey","handleArrowKeyDown","getItem","g","curMerge","prevRect","getTotalCols","getTotalRows","totalRowBounds","totalColBounds","continuation","inVisibleBounds","visStartRow","visStartCol","getTopLeftBounds","visEndRow","visEndCol","getBottomRightBounds","scrollTo","totalCols","getWidthOffset","getHeightOffset","getMergeWidth","getMergeHeight","getCellWidth","rowHeight","behavior","clientWidth","isValid","find","merged","getWidthBetweenColumns","getHeightBetweenRows","startingValue","minWidth","focus","onblur","finishCellEdit","onkeydown","field","getCell","blockSet","getBlockOrSubBlock","abs","rqtimeout","clearTimeout","setTimeout","subBlocks","renderBlock","subBlock","stopPropagation","clientX","clientY","offsetWidth","offsetHeight","contains","button","handleSelectionMouseDown","activeSelection","getCellsInRange","getMergesInRange","merges","normalizeCoordinates","draggingRow","dx","dy","newWidth","newHeight","positionSelectionHandle","diff","prevOverride","origLeft","getCellHeight","origTop","getColWidth","bsearch","mid","er","ec","alert","newSelection","handle","nextSibling","initialData","onmousedown","totalWidth","headerCell","headerHandle","createRowNumber","totalHeight","rowNumberEl","rowNumberHandle","totalYBounds","totalXBounds","prevRowBounds","oldHeight","heightSum","updateVisHeight","clientHeight","scrollHeight","prevColBounds","oldWidth","widthSum","updateVisWidth","scrollWidth","calculateVisibleRange","force","maxBlockRows","maxBlockCols","neededBlocks","startBlockRow","endBlockRow","startBlockCol","endBlockCol","blockRow","blockCol","toRemove","releaseBlock","positionBlock","createBlock","blockContainer","positionSubBlock","canvas","parentBlock","styleWidth","styleHeight","createCanvas","idx","calculateBlockDimensionsContainer","parentNode","calculateBlockDimensions","isSubBlock","scaleFactor","effectiveDevicePixelRatio","round","ctx","getContext","alpha","scale","blockKey","leftBlock","getBlock","blockFromRc","getKey","getWidthHeight","getHeight","ncol","subBlockCols","nrow","getCellCoordsContainer","getCellCoordsCanvas","renderBorders","strokeStyle","beginPath","moveTo","lineTo","stroke","srcblock","fillStyle","fillRect","_width","_height","cellType","getButton","positionElement","lineChart","getLineChart","renderCellText","childRow","childCol","scalerZoom","calcDimensions","applyRenderingQuality","textBaseline","lineWidth","font","getFontString","translate","quality","colWidth","renderMergesOnBlock","getCellId","removeChild","isSelectStart","isSelectEnd","ondblclick","zIndex","userSelect","render","chart","tooltip","parsedData","date","chartWidth","chartHeight","svg","createElementNS","chartGroup","xScale","totalPoints","maxValue","yScale","path","pathData","point","pageX","pageY","ceil","xPos","labelText","substring","textLength","toFixed","gridLine","insertBefore","firstChild","xAxisTitle","yAxisTitle","update","destroy","withStickyLeftBar","withStickyHeader","a","col1","col2","accumulatedWidth","_col","devicePixelRatio1","textRendering","imageSmoothingEnabled","getCellTextAlign","_text","drow","dcol","$c8587485a8b03077$export$75915f81f2a6540a","deps","t","dcell","warn","getCellColor","fontSize","clip","fillText","getAbbreviatedText","fontString","$926fdc6e551c4757$export$2e2bcd8739ae039","wrapperId","curId","curActiveGridId","activeGrids","bottomBar","addSheetButton","sheetsContainer","initSheets","addGrid","switchTab","grid","getDefaultOptions"],"version":3,"file":"gigaspreadsheet.a5d21c63.js.map"}